# Generated from ../grammar/Kql.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,318,2823,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,1,0,1,0,1,1,1,1,1,1,5,1,616,
        8,1,10,1,12,1,619,9,1,1,1,3,1,622,8,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,3,2,633,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,3,4,646,8,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,658,8,
        6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,669,8,7,1,7,1,7,1,7,1,
        8,1,8,1,8,5,8,677,8,8,10,8,12,8,680,9,8,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,3,11,706,8,11,1,12,1,12,1,12,1,12,3,12,712,
        8,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,721,8,14,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,5,16,731,8,16,10,16,12,16,734,9,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,746,8,18,
        10,18,12,18,749,9,18,1,18,3,18,752,8,18,1,18,3,18,755,8,18,1,18,
        1,18,1,19,1,19,3,19,761,8,19,1,20,1,20,1,20,1,20,3,20,767,8,20,1,
        21,1,21,1,21,3,21,772,8,21,1,21,1,21,4,21,776,8,21,11,21,12,21,777,
        1,21,1,21,1,22,1,22,1,22,1,22,5,22,786,8,22,10,22,12,22,789,9,22,
        1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,3,25,
        803,8,25,1,25,1,25,1,25,3,25,808,8,25,1,26,1,26,1,26,1,26,5,26,814,
        8,26,10,26,12,26,817,9,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,
        1,28,1,29,1,29,1,29,1,29,5,29,832,8,29,10,29,12,29,835,9,29,1,29,
        1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,847,8,30,10,30,
        12,30,850,9,30,1,30,1,30,1,31,1,31,3,31,856,8,31,1,32,1,32,1,32,
        1,32,3,32,862,8,32,1,33,1,33,3,33,866,8,33,1,34,1,34,1,34,1,34,1,
        34,1,34,5,34,874,8,34,10,34,12,34,877,9,34,1,34,1,34,1,35,1,35,1,
        35,1,35,3,35,885,8,35,1,36,1,36,1,37,1,37,1,38,1,38,5,38,893,8,38,
        10,38,12,38,896,9,38,1,39,1,39,1,39,1,40,1,40,5,40,903,8,40,10,40,
        12,40,906,9,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,914,8,41,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,965,8,42,1,43,
        1,43,1,43,1,43,3,43,971,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,3,44,998,8,44,1,45,1,45,5,45,1002,8,45,
        10,45,12,45,1005,9,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,5,47,1014,
        8,47,10,47,12,47,1017,9,47,1,48,1,48,5,48,1021,8,48,10,48,12,48,
        1024,9,48,1,49,1,49,1,49,1,50,1,50,5,50,1031,8,50,10,50,12,50,1034,
        9,50,1,50,1,50,3,50,1038,8,50,1,51,1,51,1,52,1,52,1,52,5,52,1045,
        8,52,10,52,12,52,1048,9,52,1,53,1,53,5,53,1052,8,53,10,53,12,53,
        1055,9,53,1,53,1,53,3,53,1059,8,53,1,54,1,54,1,54,1,55,1,55,1,55,
        1,55,5,55,1068,8,55,10,55,12,55,1071,9,55,1,56,1,56,1,57,1,57,1,
        57,1,57,1,57,5,57,1080,8,57,10,57,12,57,1083,9,57,1,57,1,57,3,57,
        1087,8,57,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,3,60,
        1099,8,60,1,60,3,60,1102,8,60,1,60,1,60,1,60,3,60,1107,8,60,1,60,
        3,60,1110,8,60,1,61,5,61,1113,8,61,10,61,12,61,1116,9,61,1,61,3,
        61,1119,8,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,5,62,1128,8,62,10,
        62,12,62,1131,9,62,1,62,1,62,1,63,1,63,1,63,1,63,5,63,1139,8,63,
        10,63,12,63,1142,9,63,1,64,1,64,3,64,1146,8,64,1,65,1,65,3,65,1150,
        8,65,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,69,1,69,
        1,69,3,69,1165,8,69,1,70,1,70,1,71,1,71,1,71,5,71,1172,8,71,10,71,
        12,71,1175,9,71,1,72,1,72,3,72,1179,8,72,1,73,1,73,1,73,5,73,1184,
        8,73,10,73,12,73,1187,9,73,1,74,1,74,4,74,1191,8,74,11,74,12,74,
        1192,1,75,3,75,1196,8,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,77,
        1,77,5,77,1207,8,77,10,77,12,77,1210,9,77,1,78,1,78,1,78,1,79,1,
        79,1,80,1,80,5,80,1219,8,80,10,80,12,80,1222,9,80,1,81,1,81,5,81,
        1226,8,81,10,81,12,81,1229,9,81,1,81,1,81,1,81,1,81,1,81,3,81,1236,
        8,81,1,81,3,81,1239,8,81,1,82,1,82,1,82,3,82,1244,8,82,1,83,1,83,
        1,83,1,83,1,84,1,84,1,85,1,85,1,85,3,85,1255,8,85,1,85,1,85,1,86,
        1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,88,1,88,1,88,1,88,5,88,1271,
        8,88,10,88,12,88,1274,9,88,1,89,1,89,1,89,3,89,1279,8,89,1,90,1,
        90,1,90,1,90,1,90,1,91,1,91,3,91,1288,8,91,1,91,5,91,1291,8,91,10,
        91,12,91,1294,9,91,1,92,1,92,1,92,1,93,1,93,5,93,1301,8,93,10,93,
        12,93,1304,9,93,1,93,1,93,1,93,1,93,1,93,3,93,1311,8,93,1,93,3,93,
        1314,8,93,1,94,1,94,1,94,1,95,1,95,5,95,1321,8,95,10,95,12,95,1324,
        9,95,1,95,1,95,1,95,3,95,1329,8,95,1,96,1,96,1,96,1,96,5,96,1335,
        8,96,10,96,12,96,1338,9,96,3,96,1340,8,96,1,97,1,97,1,97,1,98,1,
        98,5,98,1347,8,98,10,98,12,98,1350,9,98,1,98,1,98,1,98,1,99,1,99,
        5,99,1357,8,99,10,99,12,99,1360,9,99,1,99,1,99,1,99,1,99,1,99,1,
        99,1,99,5,99,1369,8,99,10,99,12,99,1372,9,99,1,99,3,99,1375,8,99,
        1,99,1,99,1,100,1,100,1,100,3,100,1382,8,100,1,101,1,101,1,101,1,
        101,1,101,5,101,1389,8,101,10,101,12,101,1392,9,101,1,101,1,101,
        1,102,1,102,5,102,1398,8,102,10,102,12,102,1401,9,102,1,102,1,102,
        1,102,1,102,1,102,3,102,1408,8,102,1,102,3,102,1411,8,102,1,103,
        1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,
        1,105,1,105,1,105,1,106,1,106,5,106,1430,8,106,10,106,12,106,1433,
        9,106,1,106,1,106,1,106,5,106,1438,8,106,10,106,12,106,1441,9,106,
        1,106,1,106,1,106,3,106,1446,8,106,1,106,3,106,1449,8,106,1,107,
        1,107,1,107,1,108,1,108,3,108,1456,8,108,1,109,1,109,1,109,1,109,
        1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,111,
        1,111,3,111,1474,8,111,1,111,1,111,3,111,1478,8,111,1,111,1,111,
        1,111,1,112,1,112,1,112,1,112,5,112,1487,8,112,10,112,12,112,1490,
        9,112,1,113,1,113,5,113,1494,8,113,10,113,12,113,1497,9,113,1,113,
        1,113,1,113,5,113,1502,8,113,10,113,12,113,1505,9,113,1,113,3,113,
        1508,8,113,1,113,3,113,1511,8,113,1,113,1,113,1,113,1,113,1,113,
        1,114,1,114,1,114,1,115,1,115,1,115,1,116,1,116,3,116,1526,8,116,
        1,117,1,117,1,117,1,118,1,118,5,118,1533,8,118,10,118,12,118,1536,
        9,118,1,118,1,118,1,118,5,118,1541,8,118,10,118,12,118,1544,9,118,
        1,118,3,118,1547,8,118,1,119,1,119,3,119,1551,8,119,1,120,1,120,
        3,120,1555,8,120,1,120,1,120,1,120,1,120,1,121,1,121,1,121,1,121,
        3,121,1565,8,121,1,122,1,122,1,122,1,122,1,123,1,123,1,123,3,123,
        1574,8,123,1,124,3,124,1577,8,124,1,124,5,124,1580,8,124,10,124,
        12,124,1583,9,124,1,124,3,124,1586,8,124,1,125,3,125,1589,8,125,
        1,125,1,125,3,125,1593,8,125,1,126,1,126,3,126,1597,8,126,1,126,
        1,126,1,126,1,126,1,127,1,127,1,127,1,127,3,127,1607,8,127,1,128,
        1,128,1,128,1,128,1,128,5,128,1614,8,128,10,128,12,128,1617,9,128,
        1,128,1,128,1,129,1,129,5,129,1623,8,129,10,129,12,129,1626,9,129,
        1,129,1,129,1,129,3,129,1631,8,129,1,129,1,129,3,129,1635,8,129,
        1,130,1,130,1,130,3,130,1640,8,130,1,131,1,131,1,131,1,131,1,132,
        1,132,1,132,1,132,1,133,1,133,5,133,1652,8,133,10,133,12,133,1655,
        9,133,1,133,1,133,3,133,1659,8,133,1,133,1,133,1,133,1,133,1,134,
        1,134,1,134,1,135,1,135,1,135,1,135,5,135,1672,8,135,10,135,12,135,
        1675,9,135,1,136,1,136,1,136,1,136,5,136,1681,8,136,10,136,12,136,
        1684,9,136,3,136,1686,8,136,1,137,1,137,1,137,1,137,5,137,1692,8,
        137,10,137,12,137,1695,9,137,1,138,1,138,1,138,1,138,5,138,1701,
        8,138,10,138,12,138,1704,9,138,3,138,1706,8,138,1,139,1,139,1,139,
        1,139,5,139,1712,8,139,10,139,12,139,1715,9,139,3,139,1717,8,139,
        1,140,1,140,1,140,1,140,5,140,1723,8,140,10,140,12,140,1726,9,140,
        3,140,1728,8,140,1,141,1,141,3,141,1732,8,141,1,142,1,142,5,142,
        1736,8,142,10,142,12,142,1739,9,142,1,142,1,142,1,142,3,142,1744,
        8,142,1,143,1,143,1,143,1,143,5,143,1750,8,143,10,143,12,143,1753,
        9,143,1,144,1,144,1,144,1,144,3,144,1759,8,144,1,145,1,145,1,145,
        1,145,1,145,5,145,1766,8,145,10,145,12,145,1769,9,145,3,145,1771,
        8,145,1,145,1,145,1,146,4,146,1776,8,146,11,146,12,146,1777,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,3,147,1831,8,147,1,148,1,148,
        1,148,5,148,1836,8,148,10,148,12,148,1839,9,148,1,149,1,149,1,149,
        1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,3,149,
        1854,8,149,1,150,1,150,5,150,1858,8,150,10,150,12,150,1861,9,150,
        1,150,1,150,1,150,1,150,1,151,1,151,5,151,1869,8,151,10,151,12,151,
        1872,9,151,1,151,1,151,1,152,1,152,5,152,1878,8,152,10,152,12,152,
        1881,9,152,1,152,3,152,1884,8,152,1,152,3,152,1887,8,152,1,152,3,
        152,1890,8,152,1,152,1,152,1,152,4,152,1895,8,152,11,152,12,152,
        1896,1,152,1,152,1,153,1,153,1,153,1,153,1,153,1,153,1,154,1,154,
        1,154,1,154,1,154,5,154,1912,8,154,10,154,12,154,1915,9,154,1,155,
        1,155,1,155,1,155,1,155,5,155,1922,8,155,10,155,12,155,1925,9,155,
        1,155,1,155,1,156,1,156,1,156,3,156,1932,8,156,1,156,3,156,1935,
        8,156,1,156,1,156,1,156,3,156,1940,8,156,1,156,1,156,1,157,1,157,
        1,157,1,157,1,158,1,158,1,158,1,158,5,158,1952,8,158,10,158,12,158,
        1955,9,158,1,159,1,159,1,159,1,159,1,160,1,160,5,160,1963,8,160,
        10,160,12,160,1966,9,160,1,160,3,160,1969,8,160,1,160,3,160,1972,
        8,160,1,160,1,160,1,160,3,160,1977,8,160,1,161,1,161,1,161,1,161,
        1,162,1,162,1,162,1,162,1,162,5,162,1988,8,162,10,162,12,162,1991,
        9,162,1,162,1,162,1,163,1,163,5,163,1997,8,163,10,163,12,163,2000,
        9,163,1,163,1,163,1,163,5,163,2005,8,163,10,163,12,163,2008,9,163,
        1,164,1,164,5,164,2012,8,164,10,164,12,164,2015,9,164,1,164,1,164,
        1,164,1,164,5,164,2021,8,164,10,164,12,164,2024,9,164,1,165,1,165,
        1,165,1,166,3,166,2030,8,166,1,166,1,166,3,166,2034,8,166,1,167,
        1,167,5,167,2038,8,167,10,167,12,167,2041,9,167,1,167,1,167,1,167,
        5,167,2046,8,167,10,167,12,167,2049,9,167,3,167,2051,8,167,1,167,
        3,167,2054,8,167,1,168,1,168,1,168,1,168,1,168,1,168,3,168,2062,
        8,168,1,169,1,169,1,169,1,169,1,170,1,170,5,170,2070,8,170,10,170,
        12,170,2073,9,170,1,170,1,170,1,171,1,171,5,171,2079,8,171,10,171,
        12,171,2082,9,171,1,171,1,171,1,171,1,171,1,172,1,172,1,172,1,172,
        1,172,3,172,2093,8,172,1,173,1,173,1,173,1,174,1,174,1,174,5,174,
        2101,8,174,10,174,12,174,2104,9,174,1,175,1,175,3,175,2108,8,175,
        1,175,1,175,1,175,3,175,2113,8,175,1,175,1,175,1,175,1,176,1,176,
        1,176,1,176,1,176,1,177,1,177,5,177,2125,8,177,10,177,12,177,2128,
        9,177,1,177,1,177,1,177,5,177,2133,8,177,10,177,12,177,2136,9,177,
        1,178,1,178,1,178,3,178,2141,8,178,1,179,1,179,5,179,2145,8,179,
        10,179,12,179,2148,9,179,1,179,1,179,1,180,1,180,3,180,2154,8,180,
        1,181,1,181,5,181,2158,8,181,10,181,12,181,2161,9,181,1,182,1,182,
        1,182,1,183,1,183,1,183,1,183,3,183,2170,8,183,1,184,1,184,1,184,
        1,184,3,184,2176,8,184,1,185,1,185,1,185,1,185,3,185,2182,8,185,
        1,186,3,186,2185,8,186,1,186,1,186,1,187,1,187,3,187,2191,8,187,
        1,187,1,187,1,188,1,188,1,188,1,188,5,188,2199,8,188,10,188,12,188,
        2202,9,188,1,188,1,188,1,189,1,189,1,189,1,189,1,190,1,190,1,191,
        1,191,5,191,2214,8,191,10,191,12,191,2217,9,191,1,192,1,192,1,192,
        1,193,1,193,5,193,2224,8,193,10,193,12,193,2227,9,193,1,194,1,194,
        1,194,1,195,1,195,1,195,1,195,1,195,3,195,2237,8,195,1,196,1,196,
        1,196,1,196,1,197,1,197,1,197,1,197,1,197,1,197,5,197,2249,8,197,
        10,197,12,197,2252,9,197,1,197,1,197,1,198,1,198,1,198,1,198,1,198,
        1,198,1,198,1,198,1,199,1,199,1,199,1,199,1,200,1,200,1,200,3,200,
        2271,8,200,1,201,1,201,5,201,2275,8,201,10,201,12,201,2278,9,201,
        1,202,1,202,1,202,1,203,1,203,5,203,2285,8,203,10,203,12,203,2288,
        9,203,1,204,1,204,1,204,1,205,1,205,3,205,2295,8,205,1,206,1,206,
        5,206,2299,8,206,10,206,12,206,2302,9,206,1,207,1,207,3,207,2306,
        8,207,1,207,1,207,1,208,1,208,1,209,1,209,1,209,1,209,1,210,3,210,
        2317,8,210,1,210,1,210,1,211,1,211,1,211,3,211,2324,8,211,1,212,
        1,212,1,212,3,212,2329,8,212,1,213,1,213,4,213,2333,8,213,11,213,
        12,213,2334,1,214,1,214,1,214,3,214,2340,8,214,1,215,1,215,1,215,
        1,216,1,216,1,216,1,216,1,217,1,217,1,217,1,217,1,217,1,218,1,218,
        3,218,2356,8,218,1,218,1,218,1,218,1,218,1,219,1,219,3,219,2364,
        8,219,1,219,1,219,1,219,1,219,1,220,1,220,1,220,1,220,1,221,1,221,
        5,221,2376,8,221,10,221,12,221,2379,9,221,1,222,1,222,1,222,1,223,
        1,223,3,223,2386,8,223,1,224,1,224,1,224,1,224,1,224,5,224,2393,
        8,224,10,224,12,224,2396,9,224,3,224,2398,8,224,1,224,1,224,1,225,
        1,225,3,225,2404,8,225,1,226,1,226,1,226,3,226,2409,8,226,1,226,
        1,226,1,227,1,227,1,228,1,228,1,228,1,228,1,228,1,228,1,228,3,228,
        2422,8,228,1,229,1,229,3,229,2426,8,229,1,230,1,230,1,230,1,230,
        1,231,1,231,1,231,1,231,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
        1,232,1,232,1,233,1,233,3,233,2447,8,233,1,234,1,234,4,234,2451,
        8,234,11,234,12,234,2452,1,235,1,235,1,235,3,235,2458,8,235,1,236,
        1,236,1,236,1,237,1,237,1,237,1,237,1,238,1,238,1,238,1,238,1,238,
        1,239,1,239,1,239,3,239,2475,8,239,1,240,1,240,1,241,1,241,1,242,
        1,242,1,243,1,243,1,243,3,243,2486,8,243,1,244,1,244,1,244,1,244,
        1,245,1,245,3,245,2494,8,245,1,246,1,246,1,246,1,246,1,247,1,247,
        5,247,2502,8,247,10,247,12,247,2505,9,247,1,247,1,247,1,247,3,247,
        2510,8,247,1,247,1,247,5,247,2514,8,247,10,247,12,247,2517,9,247,
        1,247,3,247,2520,8,247,1,247,1,247,1,248,1,248,3,248,2526,8,248,
        1,248,1,248,5,248,2530,8,248,10,248,12,248,2533,9,248,1,248,3,248,
        2536,8,248,1,248,1,248,1,249,1,249,1,249,1,249,1,250,1,250,5,250,
        2546,8,250,10,250,12,250,2549,9,250,1,250,1,250,1,250,1,250,1,250,
        5,250,2556,8,250,10,250,12,250,2559,9,250,1,250,1,250,3,250,2563,
        8,250,1,251,1,251,1,251,1,251,1,251,5,251,2570,8,251,10,251,12,251,
        2573,9,251,1,251,3,251,2576,8,251,3,251,2578,8,251,1,251,1,251,1,
        252,1,252,1,252,1,252,1,252,3,252,2587,8,252,1,253,1,253,1,253,1,
        253,1,253,1,253,1,253,1,253,1,254,1,254,1,254,1,254,1,254,1,255,
        1,255,1,255,1,255,1,255,1,256,1,256,1,256,1,256,1,256,1,257,1,257,
        1,258,1,258,1,259,1,259,1,260,1,260,1,261,1,261,1,262,1,262,1,263,
        1,263,3,263,2626,8,263,1,264,1,264,1,265,1,265,1,266,1,266,1,267,
        1,267,1,267,1,267,1,268,1,268,3,268,2640,8,268,1,269,1,269,1,269,
        3,269,2645,8,269,1,270,1,270,1,270,1,270,3,270,2651,8,270,1,271,
        1,271,1,271,3,271,2656,8,271,1,272,3,272,2659,8,272,1,272,1,272,
        5,272,2663,8,272,10,272,12,272,2666,9,272,1,273,1,273,1,273,3,273,
        2671,8,273,1,274,1,274,1,274,1,274,1,274,3,274,2678,8,274,1,275,
        1,275,3,275,2682,8,275,1,276,1,276,1,276,1,276,1,276,1,276,1,276,
        1,276,1,276,1,276,1,276,3,276,2695,8,276,1,277,1,277,1,277,1,277,
        1,277,1,277,1,277,3,277,2704,8,277,1,278,1,278,1,278,1,278,1,278,
        3,278,2711,8,278,1,279,1,279,3,279,2715,8,279,1,280,1,280,1,281,
        1,281,1,282,1,282,1,283,1,283,1,284,1,284,1,285,1,285,1,286,1,286,
        1,287,1,287,1,288,1,288,1,289,1,289,1,289,1,290,1,290,1,290,1,291,
        1,291,5,291,2743,8,291,10,291,12,291,2746,9,291,1,292,1,292,1,292,
        1,292,1,292,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,
        1,293,1,293,3,293,2764,8,293,1,294,1,294,1,294,1,294,5,294,2770,
        8,294,10,294,12,294,2773,9,294,3,294,2775,8,294,1,294,1,294,1,295,
        1,295,1,295,1,295,1,296,1,296,1,296,1,296,5,296,2787,8,296,10,296,
        12,296,2790,9,296,3,296,2792,8,296,1,296,1,296,1,297,1,297,1,298,
        1,298,1,299,1,299,1,300,1,300,1,301,1,301,5,301,2806,8,301,10,301,
        12,301,2809,9,301,1,302,1,302,1,303,3,303,2814,8,303,1,303,1,303,
        1,304,3,304,2819,8,304,1,304,1,304,1,304,0,0,305,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
        262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
        294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
        326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,
        358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,
        390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,
        422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,
        454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,
        486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,
        518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,
        550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,
        582,584,586,588,590,592,594,596,598,600,602,604,606,608,0,37,2,0,
        12,13,25,25,2,0,14,14,26,26,1,0,6,7,2,0,78,78,161,161,1,0,12,13,
        2,0,157,157,159,159,2,0,158,158,160,160,2,0,216,217,229,229,3,0,
        48,48,76,76,97,98,15,0,37,37,44,44,46,46,52,52,58,58,60,60,138,138,
        146,147,202,203,224,224,234,234,239,239,242,244,252,252,316,316,
        4,0,74,74,153,153,232,233,255,255,2,0,145,145,149,149,2,0,112,112,
        258,258,3,0,50,50,162,162,193,193,3,0,42,42,139,139,162,162,2,0,
        189,189,230,230,2,0,48,48,76,76,2,0,92,92,139,139,2,0,144,144,240,
        240,2,0,90,90,259,259,13,0,51,51,56,56,67,68,73,73,85,85,113,123,
        129,129,134,135,137,137,201,201,231,231,261,264,266,267,14,0,51,
        51,56,56,67,68,73,73,85,85,113,123,129,129,134,135,137,137,201,201,
        231,231,261,264,266,267,316,316,3,0,18,18,20,20,28,28,3,0,105,106,
        130,131,175,176,2,0,54,54,164,164,2,0,22,24,27,27,2,0,11,11,33,33,
        3,0,1,1,32,32,35,35,11,0,19,19,21,21,62,64,79,80,104,104,107,111,
        142,143,154,154,165,174,177,182,235,236,2,0,42,42,125,125,3,0,137,
        137,262,262,266,266,1,0,87,88,4,0,305,305,307,307,310,311,313,315,
        4,0,279,285,287,289,292,297,304,304,1,0,279,304,39,0,38,38,40,42,
        50,50,53,53,55,55,59,59,69,69,72,72,74,75,78,78,82,83,89,89,94,95,
        112,112,124,124,126,128,132,132,140,141,145,145,147,149,153,153,
        161,162,183,184,186,187,191,192,197,198,200,200,204,204,213,215,
        218,220,227,227,232,233,237,237,241,241,253,253,255,258,260,260,
        268,279,287,287,25,0,39,39,47,47,57,57,61,62,66,66,71,71,77,77,86,
        87,90,91,104,104,130,130,133,133,144,144,155,155,185,185,194,194,
        205,205,221,223,225,226,228,228,230,230,238,238,240,240,245,251,
        259,259,2936,0,610,1,0,0,0,2,612,1,0,0,0,4,632,1,0,0,0,6,634,1,0,
        0,0,8,645,1,0,0,0,10,647,1,0,0,0,12,652,1,0,0,0,14,662,1,0,0,0,16,
        673,1,0,0,0,18,681,1,0,0,0,20,689,1,0,0,0,22,705,1,0,0,0,24,707,
        1,0,0,0,26,713,1,0,0,0,28,716,1,0,0,0,30,722,1,0,0,0,32,726,1,0,
        0,0,34,737,1,0,0,0,36,741,1,0,0,0,38,760,1,0,0,0,40,762,1,0,0,0,
        42,768,1,0,0,0,44,781,1,0,0,0,46,792,1,0,0,0,48,796,1,0,0,0,50,800,
        1,0,0,0,52,809,1,0,0,0,54,820,1,0,0,0,56,825,1,0,0,0,58,827,1,0,
        0,0,60,839,1,0,0,0,62,855,1,0,0,0,64,857,1,0,0,0,66,865,1,0,0,0,
        68,867,1,0,0,0,70,880,1,0,0,0,72,886,1,0,0,0,74,888,1,0,0,0,76,890,
        1,0,0,0,78,897,1,0,0,0,80,900,1,0,0,0,82,913,1,0,0,0,84,964,1,0,
        0,0,86,970,1,0,0,0,88,997,1,0,0,0,90,999,1,0,0,0,92,1008,1,0,0,0,
        94,1011,1,0,0,0,96,1018,1,0,0,0,98,1025,1,0,0,0,100,1028,1,0,0,0,
        102,1039,1,0,0,0,104,1041,1,0,0,0,106,1049,1,0,0,0,108,1060,1,0,
        0,0,110,1063,1,0,0,0,112,1072,1,0,0,0,114,1074,1,0,0,0,116,1088,
        1,0,0,0,118,1091,1,0,0,0,120,1096,1,0,0,0,122,1114,1,0,0,0,124,1122,
        1,0,0,0,126,1134,1,0,0,0,128,1145,1,0,0,0,130,1147,1,0,0,0,132,1151,
        1,0,0,0,134,1154,1,0,0,0,136,1159,1,0,0,0,138,1161,1,0,0,0,140,1166,
        1,0,0,0,142,1168,1,0,0,0,144,1178,1,0,0,0,146,1180,1,0,0,0,148,1188,
        1,0,0,0,150,1195,1,0,0,0,152,1201,1,0,0,0,154,1204,1,0,0,0,156,1211,
        1,0,0,0,158,1214,1,0,0,0,160,1216,1,0,0,0,162,1223,1,0,0,0,164,1243,
        1,0,0,0,166,1245,1,0,0,0,168,1249,1,0,0,0,170,1251,1,0,0,0,172,1258,
        1,0,0,0,174,1263,1,0,0,0,176,1266,1,0,0,0,178,1275,1,0,0,0,180,1280,
        1,0,0,0,182,1285,1,0,0,0,184,1295,1,0,0,0,186,1298,1,0,0,0,188,1315,
        1,0,0,0,190,1318,1,0,0,0,192,1330,1,0,0,0,194,1341,1,0,0,0,196,1344,
        1,0,0,0,198,1354,1,0,0,0,200,1381,1,0,0,0,202,1383,1,0,0,0,204,1395,
        1,0,0,0,206,1412,1,0,0,0,208,1416,1,0,0,0,210,1421,1,0,0,0,212,1427,
        1,0,0,0,214,1450,1,0,0,0,216,1453,1,0,0,0,218,1457,1,0,0,0,220,1461,
        1,0,0,0,222,1473,1,0,0,0,224,1482,1,0,0,0,226,1491,1,0,0,0,228,1517,
        1,0,0,0,230,1520,1,0,0,0,232,1523,1,0,0,0,234,1527,1,0,0,0,236,1530,
        1,0,0,0,238,1548,1,0,0,0,240,1552,1,0,0,0,242,1560,1,0,0,0,244,1566,
        1,0,0,0,246,1570,1,0,0,0,248,1576,1,0,0,0,250,1588,1,0,0,0,252,1594,
        1,0,0,0,254,1602,1,0,0,0,256,1608,1,0,0,0,258,1620,1,0,0,0,260,1636,
        1,0,0,0,262,1641,1,0,0,0,264,1645,1,0,0,0,266,1649,1,0,0,0,268,1664,
        1,0,0,0,270,1667,1,0,0,0,272,1676,1,0,0,0,274,1687,1,0,0,0,276,1696,
        1,0,0,0,278,1707,1,0,0,0,280,1718,1,0,0,0,282,1729,1,0,0,0,284,1733,
        1,0,0,0,286,1745,1,0,0,0,288,1754,1,0,0,0,290,1760,1,0,0,0,292,1775,
        1,0,0,0,294,1830,1,0,0,0,296,1832,1,0,0,0,298,1853,1,0,0,0,300,1855,
        1,0,0,0,302,1866,1,0,0,0,304,1875,1,0,0,0,306,1900,1,0,0,0,308,1906,
        1,0,0,0,310,1916,1,0,0,0,312,1928,1,0,0,0,314,1943,1,0,0,0,316,1947,
        1,0,0,0,318,1956,1,0,0,0,320,1960,1,0,0,0,322,1978,1,0,0,0,324,1982,
        1,0,0,0,326,1994,1,0,0,0,328,2009,1,0,0,0,330,2025,1,0,0,0,332,2029,
        1,0,0,0,334,2035,1,0,0,0,336,2055,1,0,0,0,338,2063,1,0,0,0,340,2067,
        1,0,0,0,342,2076,1,0,0,0,344,2087,1,0,0,0,346,2094,1,0,0,0,348,2097,
        1,0,0,0,350,2105,1,0,0,0,352,2117,1,0,0,0,354,2122,1,0,0,0,356,2140,
        1,0,0,0,358,2142,1,0,0,0,360,2153,1,0,0,0,362,2155,1,0,0,0,364,2162,
        1,0,0,0,366,2165,1,0,0,0,368,2171,1,0,0,0,370,2177,1,0,0,0,372,2184,
        1,0,0,0,374,2190,1,0,0,0,376,2194,1,0,0,0,378,2205,1,0,0,0,380,2209,
        1,0,0,0,382,2211,1,0,0,0,384,2218,1,0,0,0,386,2221,1,0,0,0,388,2228,
        1,0,0,0,390,2236,1,0,0,0,392,2238,1,0,0,0,394,2242,1,0,0,0,396,2255,
        1,0,0,0,398,2263,1,0,0,0,400,2267,1,0,0,0,402,2272,1,0,0,0,404,2279,
        1,0,0,0,406,2282,1,0,0,0,408,2289,1,0,0,0,410,2294,1,0,0,0,412,2296,
        1,0,0,0,414,2305,1,0,0,0,416,2309,1,0,0,0,418,2311,1,0,0,0,420,2316,
        1,0,0,0,422,2323,1,0,0,0,424,2328,1,0,0,0,426,2330,1,0,0,0,428,2339,
        1,0,0,0,430,2341,1,0,0,0,432,2344,1,0,0,0,434,2348,1,0,0,0,436,2353,
        1,0,0,0,438,2361,1,0,0,0,440,2369,1,0,0,0,442,2373,1,0,0,0,444,2380,
        1,0,0,0,446,2385,1,0,0,0,448,2387,1,0,0,0,450,2403,1,0,0,0,452,2405,
        1,0,0,0,454,2412,1,0,0,0,456,2421,1,0,0,0,458,2423,1,0,0,0,460,2427,
        1,0,0,0,462,2431,1,0,0,0,464,2435,1,0,0,0,466,2446,1,0,0,0,468,2448,
        1,0,0,0,470,2457,1,0,0,0,472,2459,1,0,0,0,474,2462,1,0,0,0,476,2466,
        1,0,0,0,478,2474,1,0,0,0,480,2476,1,0,0,0,482,2478,1,0,0,0,484,2480,
        1,0,0,0,486,2485,1,0,0,0,488,2487,1,0,0,0,490,2493,1,0,0,0,492,2495,
        1,0,0,0,494,2499,1,0,0,0,496,2523,1,0,0,0,498,2539,1,0,0,0,500,2543,
        1,0,0,0,502,2564,1,0,0,0,504,2581,1,0,0,0,506,2588,1,0,0,0,508,2596,
        1,0,0,0,510,2601,1,0,0,0,512,2606,1,0,0,0,514,2611,1,0,0,0,516,2613,
        1,0,0,0,518,2615,1,0,0,0,520,2617,1,0,0,0,522,2619,1,0,0,0,524,2621,
        1,0,0,0,526,2625,1,0,0,0,528,2627,1,0,0,0,530,2629,1,0,0,0,532,2631,
        1,0,0,0,534,2633,1,0,0,0,536,2639,1,0,0,0,538,2644,1,0,0,0,540,2650,
        1,0,0,0,542,2655,1,0,0,0,544,2658,1,0,0,0,546,2670,1,0,0,0,548,2677,
        1,0,0,0,550,2681,1,0,0,0,552,2694,1,0,0,0,554,2703,1,0,0,0,556,2710,
        1,0,0,0,558,2714,1,0,0,0,560,2716,1,0,0,0,562,2718,1,0,0,0,564,2720,
        1,0,0,0,566,2722,1,0,0,0,568,2724,1,0,0,0,570,2726,1,0,0,0,572,2728,
        1,0,0,0,574,2730,1,0,0,0,576,2732,1,0,0,0,578,2734,1,0,0,0,580,2737,
        1,0,0,0,582,2740,1,0,0,0,584,2747,1,0,0,0,586,2763,1,0,0,0,588,2765,
        1,0,0,0,590,2778,1,0,0,0,592,2782,1,0,0,0,594,2795,1,0,0,0,596,2797,
        1,0,0,0,598,2799,1,0,0,0,600,2801,1,0,0,0,602,2803,1,0,0,0,604,2810,
        1,0,0,0,606,2813,1,0,0,0,608,2818,1,0,0,0,610,611,3,2,1,0,611,1,
        1,0,0,0,612,617,3,4,2,0,613,614,5,34,0,0,614,616,3,4,2,0,615,613,
        1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,621,
        1,0,0,0,619,617,1,0,0,0,620,622,5,34,0,0,621,620,1,0,0,0,621,622,
        1,0,0,0,622,623,1,0,0,0,623,624,5,0,0,1,624,3,1,0,0,0,625,633,3,
        6,3,0,626,633,3,40,20,0,627,633,3,68,34,0,628,633,3,8,4,0,629,633,
        3,72,36,0,630,633,3,60,30,0,631,633,3,64,32,0,632,625,1,0,0,0,632,
        626,1,0,0,0,632,627,1,0,0,0,632,628,1,0,0,0,632,629,1,0,0,0,632,
        630,1,0,0,0,632,631,1,0,0,0,633,5,1,0,0,0,634,635,5,41,0,0,635,636,
        5,69,0,0,636,637,3,538,269,0,637,638,5,17,0,0,638,639,3,380,190,
        0,639,7,1,0,0,0,640,646,3,12,6,0,641,646,3,14,7,0,642,646,3,10,5,
        0,643,646,3,18,9,0,644,646,3,20,10,0,645,640,1,0,0,0,645,641,1,0,
        0,0,645,642,1,0,0,0,645,643,1,0,0,0,645,644,1,0,0,0,646,9,1,0,0,
        0,647,648,5,141,0,0,648,649,3,538,269,0,649,650,5,17,0,0,650,651,
        3,74,37,0,651,11,1,0,0,0,652,653,5,141,0,0,653,654,3,538,269,0,654,
        655,5,17,0,0,655,657,5,31,0,0,656,658,3,22,11,0,657,656,1,0,0,0,
        657,658,1,0,0,0,658,659,1,0,0,0,659,660,5,8,0,0,660,661,3,36,18,
        0,661,13,1,0,0,0,662,663,5,141,0,0,663,664,3,538,269,0,664,665,5,
        17,0,0,665,666,5,257,0,0,666,668,5,31,0,0,667,669,3,16,8,0,668,667,
        1,0,0,0,668,669,1,0,0,0,669,670,1,0,0,0,670,671,5,8,0,0,671,672,
        3,36,18,0,672,15,1,0,0,0,673,678,3,24,12,0,674,675,5,9,0,0,675,677,
        3,24,12,0,676,674,1,0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,
        1,0,0,0,679,17,1,0,0,0,680,678,1,0,0,0,681,682,5,141,0,0,682,683,
        3,538,269,0,683,684,5,17,0,0,684,685,5,155,0,0,685,686,5,31,0,0,
        686,687,3,76,38,0,687,688,5,8,0,0,688,19,1,0,0,0,689,690,5,141,0,
        0,690,691,3,538,269,0,691,692,5,17,0,0,692,693,3,202,101,0,693,21,
        1,0,0,0,694,695,3,28,14,0,695,696,5,9,0,0,696,697,3,28,14,0,697,
        698,1,0,0,0,698,699,5,9,0,0,699,700,3,24,12,0,700,706,1,0,0,0,701,
        702,3,24,12,0,702,703,5,9,0,0,703,704,3,24,12,0,704,706,1,0,0,0,
        705,694,1,0,0,0,705,701,1,0,0,0,706,23,1,0,0,0,707,708,3,518,259,
        0,708,709,5,10,0,0,709,711,3,514,257,0,710,712,3,26,13,0,711,710,
        1,0,0,0,711,712,1,0,0,0,712,25,1,0,0,0,713,714,5,17,0,0,714,715,
        3,550,275,0,715,27,1,0,0,0,716,717,3,518,259,0,717,720,5,10,0,0,
        718,721,3,30,15,0,719,721,3,32,16,0,720,718,1,0,0,0,720,719,1,0,
        0,0,721,29,1,0,0,0,722,723,5,31,0,0,723,724,5,1,0,0,724,725,5,8,
        0,0,725,31,1,0,0,0,726,727,5,31,0,0,727,732,3,34,17,0,728,729,5,
        9,0,0,729,731,3,34,17,0,730,728,1,0,0,0,731,734,1,0,0,0,732,730,
        1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,734,732,1,0,0,0,735,736,
        5,8,0,0,736,33,1,0,0,0,737,738,3,518,259,0,738,739,5,10,0,0,739,
        740,3,514,257,0,740,35,1,0,0,0,741,747,5,29,0,0,742,743,3,38,19,
        0,743,744,5,34,0,0,744,746,1,0,0,0,745,742,1,0,0,0,746,749,1,0,0,
        0,747,745,1,0,0,0,747,748,1,0,0,0,748,751,1,0,0,0,749,747,1,0,0,
        0,750,752,3,74,37,0,751,750,1,0,0,0,751,752,1,0,0,0,752,754,1,0,
        0,0,753,755,5,34,0,0,754,753,1,0,0,0,754,755,1,0,0,0,755,756,1,0,
        0,0,756,757,5,4,0,0,757,37,1,0,0,0,758,761,3,8,4,0,759,761,3,68,
        34,0,760,758,1,0,0,0,760,759,1,0,0,0,761,39,1,0,0,0,762,763,5,72,
        0,0,763,764,5,200,0,0,764,766,3,520,260,0,765,767,3,42,21,0,766,
        765,1,0,0,0,766,767,1,0,0,0,767,41,1,0,0,0,768,769,5,17,0,0,769,
        771,3,44,22,0,770,772,3,48,24,0,771,770,1,0,0,0,771,772,1,0,0,0,
        772,773,1,0,0,0,773,775,5,29,0,0,774,776,3,50,25,0,775,774,1,0,0,
        0,776,777,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,779,1,0,0,
        0,779,780,5,4,0,0,780,43,1,0,0,0,781,782,5,31,0,0,782,787,3,46,23,
        0,783,784,5,9,0,0,784,786,3,46,23,0,785,783,1,0,0,0,786,789,1,0,
        0,0,787,785,1,0,0,0,787,788,1,0,0,0,788,790,1,0,0,0,789,787,1,0,
        0,0,790,791,5,8,0,0,791,45,1,0,0,0,792,793,3,518,259,0,793,794,5,
        10,0,0,794,795,3,514,257,0,795,47,1,0,0,0,796,797,5,30,0,0,797,798,
        3,46,23,0,798,799,5,5,0,0,799,49,1,0,0,0,800,802,3,52,26,0,801,803,
        3,54,27,0,802,801,1,0,0,0,802,803,1,0,0,0,803,804,1,0,0,0,804,805,
        5,17,0,0,805,807,3,58,29,0,806,808,5,34,0,0,807,806,1,0,0,0,807,
        808,1,0,0,0,808,51,1,0,0,0,809,810,5,31,0,0,810,815,3,56,28,0,811,
        812,5,9,0,0,812,814,3,56,28,0,813,811,1,0,0,0,814,817,1,0,0,0,815,
        813,1,0,0,0,815,816,1,0,0,0,816,818,1,0,0,0,817,815,1,0,0,0,818,
        819,5,8,0,0,819,53,1,0,0,0,820,821,5,15,0,0,821,822,5,30,0,0,822,
        823,3,56,28,0,823,824,5,5,0,0,824,55,1,0,0,0,825,826,3,582,291,0,
        826,57,1,0,0,0,827,833,5,29,0,0,828,829,3,38,19,0,829,830,5,34,0,
        0,830,832,1,0,0,0,831,828,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,
        0,833,834,1,0,0,0,834,836,1,0,0,0,835,833,1,0,0,0,836,837,3,74,37,
        0,837,838,5,4,0,0,838,59,1,0,0,0,839,840,5,220,0,0,840,841,5,38,
        0,0,841,842,5,246,0,0,842,843,5,31,0,0,843,848,3,62,31,0,844,845,
        5,9,0,0,845,847,3,62,31,0,846,844,1,0,0,0,847,850,1,0,0,0,848,846,
        1,0,0,0,848,849,1,0,0,0,849,851,1,0,0,0,850,848,1,0,0,0,851,852,
        5,8,0,0,852,61,1,0,0,0,853,856,3,520,260,0,854,856,3,486,243,0,855,
        853,1,0,0,0,855,854,1,0,0,0,856,63,1,0,0,0,857,858,5,228,0,0,858,
        861,3,536,268,0,859,860,5,17,0,0,860,862,3,66,33,0,861,859,1,0,0,
        0,861,862,1,0,0,0,862,65,1,0,0,0,863,866,3,536,268,0,864,866,3,550,
        275,0,865,863,1,0,0,0,865,864,1,0,0,0,866,67,1,0,0,0,867,868,5,72,
        0,0,868,869,5,213,0,0,869,870,5,31,0,0,870,875,3,70,35,0,871,872,
        5,9,0,0,872,874,3,70,35,0,873,871,1,0,0,0,874,877,1,0,0,0,875,873,
        1,0,0,0,875,876,1,0,0,0,876,878,1,0,0,0,877,875,1,0,0,0,878,879,
        5,8,0,0,879,69,1,0,0,0,880,881,3,518,259,0,881,882,5,10,0,0,882,
        884,3,514,257,0,883,885,3,26,13,0,884,883,1,0,0,0,884,885,1,0,0,
        0,885,71,1,0,0,0,886,887,3,74,37,0,887,73,1,0,0,0,888,889,3,76,38,
        0,889,75,1,0,0,0,890,894,3,82,41,0,891,893,3,78,39,0,892,891,1,0,
        0,0,893,896,1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,895,77,1,0,0,
        0,896,894,1,0,0,0,897,898,5,3,0,0,898,899,3,84,42,0,899,79,1,0,0,
        0,900,904,3,84,42,0,901,903,3,78,39,0,902,901,1,0,0,0,903,906,1,
        0,0,0,904,902,1,0,0,0,904,905,1,0,0,0,905,81,1,0,0,0,906,904,1,0,
        0,0,907,914,3,86,43,0,908,914,3,270,135,0,909,914,3,198,99,0,910,
        914,3,464,232,0,911,914,3,378,189,0,912,914,3,380,190,0,913,907,
        1,0,0,0,913,908,1,0,0,0,913,909,1,0,0,0,913,910,1,0,0,0,913,911,
        1,0,0,0,913,912,1,0,0,0,914,83,1,0,0,0,915,965,3,90,45,0,916,965,
        3,92,46,0,917,965,3,94,47,0,918,965,3,96,48,0,919,965,3,100,50,0,
        920,965,3,112,56,0,921,965,3,110,55,0,922,965,3,114,57,0,923,965,
        3,120,60,0,924,965,3,148,74,0,925,965,3,158,79,0,926,965,3,160,80,
        0,927,965,3,162,81,0,928,965,3,178,89,0,929,965,3,186,93,0,930,965,
        3,180,90,0,931,965,3,188,94,0,932,965,3,190,95,0,933,965,3,196,98,
        0,934,965,3,204,102,0,935,965,3,212,106,0,936,965,3,236,118,0,937,
        965,3,226,113,0,938,965,3,106,53,0,939,965,3,240,120,0,940,965,3,
        254,127,0,941,965,3,252,126,0,942,965,3,258,129,0,943,965,3,266,
        133,0,944,965,3,276,138,0,945,965,3,272,136,0,946,965,3,278,139,
        0,947,965,3,280,140,0,948,965,3,274,137,0,949,965,3,284,142,0,950,
        965,3,288,144,0,951,965,3,302,151,0,952,965,3,300,150,0,953,965,
        3,304,152,0,954,965,3,320,160,0,955,965,3,326,163,0,956,965,3,328,
        164,0,957,965,3,334,167,0,958,965,3,340,170,0,959,965,3,344,172,
        0,960,965,3,342,171,0,961,965,3,348,174,0,962,965,3,354,177,0,963,
        965,3,358,179,0,964,915,1,0,0,0,964,916,1,0,0,0,964,917,1,0,0,0,
        964,918,1,0,0,0,964,919,1,0,0,0,964,920,1,0,0,0,964,921,1,0,0,0,
        964,922,1,0,0,0,964,923,1,0,0,0,964,924,1,0,0,0,964,925,1,0,0,0,
        964,926,1,0,0,0,964,927,1,0,0,0,964,928,1,0,0,0,964,929,1,0,0,0,
        964,930,1,0,0,0,964,931,1,0,0,0,964,932,1,0,0,0,964,933,1,0,0,0,
        964,934,1,0,0,0,964,935,1,0,0,0,964,936,1,0,0,0,964,937,1,0,0,0,
        964,938,1,0,0,0,964,939,1,0,0,0,964,940,1,0,0,0,964,941,1,0,0,0,
        964,942,1,0,0,0,964,943,1,0,0,0,964,944,1,0,0,0,964,945,1,0,0,0,
        964,946,1,0,0,0,964,947,1,0,0,0,964,948,1,0,0,0,964,949,1,0,0,0,
        964,950,1,0,0,0,964,951,1,0,0,0,964,952,1,0,0,0,964,953,1,0,0,0,
        964,954,1,0,0,0,964,955,1,0,0,0,964,956,1,0,0,0,964,957,1,0,0,0,
        964,958,1,0,0,0,964,959,1,0,0,0,964,960,1,0,0,0,964,961,1,0,0,0,
        964,962,1,0,0,0,964,963,1,0,0,0,965,85,1,0,0,0,966,971,3,120,60,
        0,967,971,3,320,160,0,968,971,3,354,177,0,969,971,3,106,53,0,970,
        966,1,0,0,0,970,967,1,0,0,0,970,968,1,0,0,0,970,969,1,0,0,0,971,
        87,1,0,0,0,972,998,3,96,48,0,973,998,3,110,55,0,974,998,3,358,179,
        0,975,998,3,240,120,0,976,998,3,252,126,0,977,998,3,340,170,0,978,
        998,3,348,174,0,979,998,3,276,138,0,980,998,3,272,136,0,981,998,
        3,278,139,0,982,998,3,280,140,0,983,998,3,274,137,0,984,998,3,334,
        167,0,985,998,3,100,50,0,986,998,3,344,172,0,987,998,3,342,171,0,
        988,998,3,328,164,0,989,998,3,236,118,0,990,998,3,284,142,0,991,
        998,3,302,151,0,992,998,3,300,150,0,993,998,3,90,45,0,994,998,3,
        188,94,0,995,998,3,112,56,0,996,998,3,304,152,0,997,972,1,0,0,0,
        997,973,1,0,0,0,997,974,1,0,0,0,997,975,1,0,0,0,997,976,1,0,0,0,
        997,977,1,0,0,0,997,978,1,0,0,0,997,979,1,0,0,0,997,980,1,0,0,0,
        997,981,1,0,0,0,997,982,1,0,0,0,997,983,1,0,0,0,997,984,1,0,0,0,
        997,985,1,0,0,0,997,986,1,0,0,0,997,987,1,0,0,0,997,988,1,0,0,0,
        997,989,1,0,0,0,997,990,1,0,0,0,997,991,1,0,0,0,997,992,1,0,0,0,
        997,993,1,0,0,0,997,994,1,0,0,0,997,995,1,0,0,0,997,996,1,0,0,0,
        998,89,1,0,0,0,999,1003,5,47,0,0,1000,1002,3,368,184,0,1001,1000,
        1,0,0,0,1002,1005,1,0,0,0,1003,1001,1,0,0,0,1003,1004,1,0,0,0,1004,
        1006,1,0,0,0,1005,1003,1,0,0,0,1006,1007,3,538,269,0,1007,91,1,0,
        0,0,1008,1009,5,49,0,0,1009,1010,3,496,248,0,1010,93,1,0,0,0,1011,
        1015,5,61,0,0,1012,1014,3,368,184,0,1013,1012,1,0,0,0,1014,1017,
        1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,95,1,0,0,0,1017,
        1015,1,0,0,0,1018,1022,5,66,0,0,1019,1021,3,368,184,0,1020,1019,
        1,0,0,0,1021,1024,1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,
        97,1,0,0,0,1024,1022,1,0,0,0,1025,1026,5,47,0,0,1026,1027,3,528,
        264,0,1027,99,1,0,0,0,1028,1032,5,77,0,0,1029,1031,3,368,184,0,1030,
        1029,1,0,0,0,1031,1034,1,0,0,0,1032,1030,1,0,0,0,1032,1033,1,0,0,
        0,1033,1037,1,0,0,0,1034,1032,1,0,0,0,1035,1038,3,102,51,0,1036,
        1038,3,104,52,0,1037,1035,1,0,0,0,1037,1036,1,0,0,0,1038,101,1,0,
        0,0,1039,1040,5,1,0,0,1040,103,1,0,0,0,1041,1046,3,380,190,0,1042,
        1043,5,9,0,0,1043,1045,3,380,190,0,1044,1042,1,0,0,0,1045,1048,1,
        0,0,0,1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,105,1,0,0,0,1048,
        1046,1,0,0,0,1049,1053,5,82,0,0,1050,1052,3,368,184,0,1051,1050,
        1,0,0,0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,
        1056,1,0,0,0,1055,1053,1,0,0,0,1056,1058,3,446,223,0,1057,1059,3,
        108,54,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,107,1,0,0,0,1060,
        1061,5,10,0,0,1061,1062,3,496,248,0,1062,109,1,0,0,0,1063,1064,5,
        86,0,0,1064,1069,3,372,186,0,1065,1066,5,9,0,0,1066,1068,3,372,186,
        0,1067,1065,1,0,0,0,1068,1071,1,0,0,0,1069,1067,1,0,0,0,1069,1070,
        1,0,0,0,1070,111,1,0,0,0,1071,1069,1,0,0,0,1072,1073,5,84,0,0,1073,
        113,1,0,0,0,1074,1075,5,89,0,0,1075,1076,5,57,0,0,1076,1081,3,466,
        233,0,1077,1078,5,9,0,0,1078,1080,3,466,233,0,1079,1077,1,0,0,0,
        1080,1083,1,0,0,0,1081,1079,1,0,0,0,1081,1082,1,0,0,0,1082,1086,
        1,0,0,0,1083,1081,1,0,0,0,1084,1087,3,116,58,0,1085,1087,3,118,59,
        0,1086,1084,1,0,0,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,115,
        1,0,0,0,1088,1089,5,260,0,0,1089,1090,3,88,44,0,1090,117,1,0,0,0,
        1091,1092,5,260,0,0,1092,1093,5,31,0,0,1093,1094,3,154,77,0,1094,
        1095,5,8,0,0,1095,119,1,0,0,0,1096,1098,5,91,0,0,1097,1099,3,460,
        230,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,1101,1,0,0,0,1100,
        1102,3,122,61,0,1101,1100,1,0,0,0,1101,1102,1,0,0,0,1102,1103,1,
        0,0,0,1103,1106,3,380,190,0,1104,1107,3,126,63,0,1105,1107,3,136,
        68,0,1106,1104,1,0,0,0,1106,1105,1,0,0,0,1106,1107,1,0,0,0,1107,
        1109,1,0,0,0,1108,1110,3,138,69,0,1109,1108,1,0,0,0,1109,1110,1,
        0,0,0,1110,121,1,0,0,0,1111,1113,3,368,184,0,1112,1111,1,0,0,0,1113,
        1116,1,0,0,0,1114,1112,1,0,0,0,1114,1115,1,0,0,0,1115,1118,1,0,0,
        0,1116,1114,1,0,0,0,1117,1119,3,124,62,0,1118,1117,1,0,0,0,1118,
        1119,1,0,0,0,1119,1120,1,0,0,0,1120,1121,5,259,0,0,1121,123,1,0,
        0,0,1122,1123,5,130,0,0,1123,1124,5,31,0,0,1124,1129,3,144,72,0,
        1125,1126,5,9,0,0,1126,1128,3,144,72,0,1127,1125,1,0,0,0,1128,1131,
        1,0,0,0,1129,1127,1,0,0,0,1129,1130,1,0,0,0,1130,1132,1,0,0,0,1131,
        1129,1,0,0,0,1132,1133,5,8,0,0,1133,125,1,0,0,0,1134,1135,5,206,
        0,0,1135,1140,3,128,64,0,1136,1137,5,9,0,0,1137,1139,3,128,64,0,
        1138,1136,1,0,0,0,1139,1142,1,0,0,0,1140,1138,1,0,0,0,1140,1141,
        1,0,0,0,1141,127,1,0,0,0,1142,1140,1,0,0,0,1143,1146,3,130,65,0,
        1144,1146,3,134,67,0,1145,1143,1,0,0,0,1145,1144,1,0,0,0,1146,129,
        1,0,0,0,1147,1149,3,518,259,0,1148,1150,3,132,66,0,1149,1148,1,0,
        0,0,1149,1150,1,0,0,0,1150,131,1,0,0,0,1151,1152,5,10,0,0,1152,1153,
        3,516,258,0,1153,133,1,0,0,0,1154,1155,5,192,0,0,1155,1156,5,31,
        0,0,1156,1157,5,1,0,0,1157,1158,5,8,0,0,1158,135,1,0,0,0,1159,1160,
        5,212,0,0,1160,137,1,0,0,0,1161,1164,5,208,0,0,1162,1165,3,140,70,
        0,1163,1165,3,142,71,0,1164,1162,1,0,0,0,1164,1163,1,0,0,0,1165,
        139,1,0,0,0,1166,1167,5,1,0,0,1167,141,1,0,0,0,1168,1173,3,130,65,
        0,1169,1170,5,9,0,0,1170,1172,3,130,65,0,1171,1169,1,0,0,0,1172,
        1175,1,0,0,0,1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,143,1,0,0,
        0,1175,1173,1,0,0,0,1176,1179,3,146,73,0,1177,1179,3,486,243,0,1178,
        1176,1,0,0,0,1178,1177,1,0,0,0,1179,145,1,0,0,0,1180,1185,3,480,
        240,0,1181,1182,5,3,0,0,1182,1184,3,90,45,0,1183,1181,1,0,0,0,1184,
        1187,1,0,0,0,1185,1183,1,0,0,0,1185,1186,1,0,0,0,1186,147,1,0,0,
        0,1187,1185,1,0,0,0,1188,1190,5,94,0,0,1189,1191,3,150,75,0,1190,
        1189,1,0,0,0,1191,1192,1,0,0,0,1192,1190,1,0,0,0,1192,1193,1,0,0,
        0,1193,149,1,0,0,0,1194,1196,3,152,76,0,1195,1194,1,0,0,0,1195,1196,
        1,0,0,0,1196,1197,1,0,0,0,1197,1198,5,31,0,0,1198,1199,3,154,77,
        0,1199,1200,5,8,0,0,1200,151,1,0,0,0,1201,1202,3,538,269,0,1202,
        1203,5,17,0,0,1203,153,1,0,0,0,1204,1208,3,88,44,0,1205,1207,3,156,
        78,0,1206,1205,1,0,0,0,1207,1210,1,0,0,0,1208,1206,1,0,0,0,1208,
        1209,1,0,0,0,1209,155,1,0,0,0,1210,1208,1,0,0,0,1211,1212,5,3,0,
        0,1212,1213,3,88,44,0,1213,157,1,0,0,0,1214,1215,5,96,0,0,1215,159,
        1,0,0,0,1216,1220,5,99,0,0,1217,1219,3,368,184,0,1218,1217,1,0,0,
        0,1219,1222,1,0,0,0,1220,1218,1,0,0,0,1220,1221,1,0,0,0,1221,161,
        1,0,0,0,1222,1220,1,0,0,0,1223,1227,5,100,0,0,1224,1226,3,368,184,
        0,1225,1224,1,0,0,0,1226,1229,1,0,0,0,1227,1225,1,0,0,0,1227,1228,
        1,0,0,0,1228,1230,1,0,0,0,1229,1227,1,0,0,0,1230,1231,3,164,82,0,
        1231,1232,5,9,0,0,1232,1233,3,164,82,0,1233,1235,1,0,0,0,1234,1236,
        3,174,87,0,1235,1234,1,0,0,0,1235,1236,1,0,0,0,1236,1238,1,0,0,0,
        1237,1239,3,176,88,0,1238,1237,1,0,0,0,1238,1239,1,0,0,0,1239,163,
        1,0,0,0,1240,1244,3,166,83,0,1241,1244,3,168,84,0,1242,1244,3,170,
        85,0,1243,1240,1,0,0,0,1243,1241,1,0,0,0,1243,1242,1,0,0,0,1244,
        165,1,0,0,0,1245,1246,5,31,0,0,1246,1247,3,538,269,0,1247,1248,5,
        8,0,0,1248,167,1,0,0,0,1249,1250,7,0,0,0,1250,169,1,0,0,0,1251,1252,
        7,1,0,0,1252,1254,3,538,269,0,1253,1255,3,172,86,0,1254,1253,1,0,
        0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1257,7,2,0,0,1257,171,
        1,0,0,0,1258,1259,5,1,0,0,1259,1260,3,420,210,0,1260,1261,5,16,0,
        0,1261,1262,3,420,210,0,1262,173,1,0,0,0,1263,1264,5,259,0,0,1264,
        1265,3,74,37,0,1265,175,1,0,0,0,1266,1267,5,206,0,0,1267,1272,3,
        372,186,0,1268,1269,5,9,0,0,1269,1271,3,372,186,0,1270,1268,1,0,
        0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1272,1273,1,0,0,0,1273,177,
        1,0,0,0,1274,1272,1,0,0,0,1275,1276,5,101,0,0,1276,1278,3,420,210,
        0,1277,1279,3,192,96,0,1278,1277,1,0,0,0,1278,1279,1,0,0,0,1279,
        179,1,0,0,0,1280,1281,5,103,0,0,1281,1282,3,182,91,0,1282,1283,5,
        9,0,0,1283,1284,3,182,91,0,1284,181,1,0,0,0,1285,1287,7,3,0,0,1286,
        1288,3,184,92,0,1287,1286,1,0,0,0,1287,1288,1,0,0,0,1288,1292,1,
        0,0,0,1289,1291,3,368,184,0,1290,1289,1,0,0,0,1291,1294,1,0,0,0,
        1292,1290,1,0,0,0,1292,1293,1,0,0,0,1293,183,1,0,0,0,1294,1292,1,
        0,0,0,1295,1296,5,47,0,0,1296,1297,3,538,269,0,1297,185,1,0,0,0,
        1298,1302,5,102,0,0,1299,1301,3,368,184,0,1300,1299,1,0,0,0,1301,
        1304,1,0,0,0,1302,1300,1,0,0,0,1302,1303,1,0,0,0,1303,1305,1,0,0,
        0,1304,1302,1,0,0,0,1305,1306,3,164,82,0,1306,1307,5,9,0,0,1307,
        1308,3,164,82,0,1308,1310,1,0,0,0,1309,1311,3,174,87,0,1310,1309,
        1,0,0,0,1310,1311,1,0,0,0,1311,1313,1,0,0,0,1312,1314,3,176,88,0,
        1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,187,1,0,0,0,1315,1316,5,
        133,0,0,1316,1317,3,442,221,0,1317,189,1,0,0,0,1318,1322,5,136,0,
        0,1319,1321,3,368,184,0,1320,1319,1,0,0,0,1321,1324,1,0,0,0,1322,
        1320,1,0,0,0,1322,1323,1,0,0,0,1323,1325,1,0,0,0,1324,1322,1,0,0,
        0,1325,1328,3,380,190,0,1326,1329,3,192,96,0,1327,1329,3,194,97,
        0,1328,1326,1,0,0,0,1328,1327,1,0,0,0,1328,1329,1,0,0,0,1329,191,
        1,0,0,0,1330,1339,5,186,0,0,1331,1336,3,380,190,0,1332,1333,5,9,
        0,0,1333,1335,3,380,190,0,1334,1332,1,0,0,0,1335,1338,1,0,0,0,1336,
        1334,1,0,0,0,1336,1337,1,0,0,0,1337,1340,1,0,0,0,1338,1336,1,0,0,
        0,1339,1331,1,0,0,0,1339,1340,1,0,0,0,1340,193,1,0,0,0,1341,1342,
        5,259,0,0,1342,1343,3,380,190,0,1343,195,1,0,0,0,1344,1348,5,148,
        0,0,1345,1347,3,368,184,0,1346,1345,1,0,0,0,1347,1350,1,0,0,0,1348,
        1346,1,0,0,0,1348,1349,1,0,0,0,1349,1351,1,0,0,0,1350,1348,1,0,0,
        0,1351,1352,3,380,190,0,1352,1353,3,192,96,0,1353,197,1,0,0,0,1354,
        1358,5,150,0,0,1355,1357,3,368,184,0,1356,1355,1,0,0,0,1357,1360,
        1,0,0,0,1358,1356,1,0,0,0,1358,1359,1,0,0,0,1359,1361,1,0,0,0,1360,
        1358,1,0,0,0,1361,1362,3,200,100,0,1362,1363,5,47,0,0,1363,1364,
        3,538,269,0,1364,1365,5,31,0,0,1365,1370,3,4,2,0,1366,1367,5,34,
        0,0,1367,1369,3,4,2,0,1368,1366,1,0,0,0,1369,1372,1,0,0,0,1370,1368,
        1,0,0,0,1370,1371,1,0,0,0,1371,1374,1,0,0,0,1372,1370,1,0,0,0,1373,
        1375,5,34,0,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,
        0,0,1376,1377,5,8,0,0,1377,199,1,0,0,0,1378,1382,3,202,101,0,1379,
        1382,3,520,260,0,1380,1382,3,466,233,0,1381,1378,1,0,0,0,1381,1379,
        1,0,0,0,1381,1380,1,0,0,0,1382,201,1,0,0,0,1383,1384,5,81,0,0,1384,
        1385,5,30,0,0,1385,1390,3,380,190,0,1386,1387,5,9,0,0,1387,1389,
        3,380,190,0,1388,1386,1,0,0,0,1389,1392,1,0,0,0,1390,1388,1,0,0,
        0,1390,1391,1,0,0,0,1391,1393,1,0,0,0,1392,1390,1,0,0,0,1393,1394,
        5,5,0,0,1394,203,1,0,0,0,1395,1399,5,151,0,0,1396,1398,3,368,184,
        0,1397,1396,1,0,0,0,1398,1401,1,0,0,0,1399,1397,1,0,0,0,1399,1400,
        1,0,0,0,1400,1402,1,0,0,0,1401,1399,1,0,0,0,1402,1403,3,520,260,
        0,1403,1404,7,4,0,0,1404,1407,3,520,260,0,1405,1408,3,206,103,0,
        1406,1408,3,208,104,0,1407,1405,1,0,0,0,1407,1406,1,0,0,0,1407,1408,
        1,0,0,0,1408,1410,1,0,0,0,1409,1411,3,210,105,0,1410,1409,1,0,0,
        0,1410,1411,1,0,0,0,1411,205,1,0,0,0,1412,1413,5,265,0,0,1413,1414,
        5,17,0,0,1414,1415,3,538,269,0,1415,207,1,0,0,0,1416,1417,5,260,
        0,0,1417,1418,3,420,210,0,1418,1419,5,186,0,0,1419,1420,3,520,260,
        0,1420,209,1,0,0,0,1421,1422,5,199,0,0,1422,1423,3,468,234,0,1423,
        1424,5,31,0,0,1424,1425,3,360,180,0,1425,1426,5,8,0,0,1426,211,1,
        0,0,0,1427,1431,5,152,0,0,1428,1430,3,368,184,0,1429,1428,1,0,0,
        0,1430,1433,1,0,0,0,1431,1429,1,0,0,0,1431,1432,1,0,0,0,1432,1434,
        1,0,0,0,1433,1431,1,0,0,0,1434,1439,3,216,108,0,1435,1436,5,9,0,
        0,1436,1438,3,216,108,0,1437,1435,1,0,0,0,1438,1441,1,0,0,0,1439,
        1437,1,0,0,0,1439,1440,1,0,0,0,1440,1442,1,0,0,0,1441,1439,1,0,0,
        0,1442,1445,3,214,107,0,1443,1446,3,220,110,0,1444,1446,3,222,111,
        0,1445,1443,1,0,0,0,1445,1444,1,0,0,0,1446,1448,1,0,0,0,1447,1449,
        3,224,112,0,1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,213,1,0,0,0,
        1450,1451,5,186,0,0,1451,1452,3,372,186,0,1452,215,1,0,0,0,1453,
        1455,3,372,186,0,1454,1456,3,218,109,0,1455,1454,1,0,0,0,1455,1456,
        1,0,0,0,1456,217,1,0,0,0,1457,1458,5,74,0,0,1458,1459,5,17,0,0,1459,
        1460,3,372,186,0,1460,219,1,0,0,0,1461,1462,5,130,0,0,1462,1463,
        5,214,0,0,1463,1464,5,31,0,0,1464,1465,3,372,186,0,1465,1466,5,9,
        0,0,1466,1467,3,372,186,0,1467,1468,5,9,0,0,1468,1469,3,372,186,
        0,1469,1470,5,8,0,0,1470,221,1,0,0,0,1471,1472,5,95,0,0,1472,1474,
        3,372,186,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,1477,1,0,0,
        0,1475,1476,5,246,0,0,1476,1478,3,372,186,0,1477,1475,1,0,0,0,1477,
        1478,1,0,0,0,1478,1479,1,0,0,0,1479,1480,5,237,0,0,1480,1481,3,372,
        186,0,1481,223,1,0,0,0,1482,1483,5,57,0,0,1483,1488,3,372,186,0,
        1484,1485,5,9,0,0,1485,1487,3,372,186,0,1486,1484,1,0,0,0,1487,1490,
        1,0,0,0,1488,1486,1,0,0,0,1488,1489,1,0,0,0,1489,225,1,0,0,0,1490,
        1488,1,0,0,0,1491,1495,7,5,0,0,1492,1494,3,366,183,0,1493,1492,1,
        0,0,0,1494,1497,1,0,0,0,1495,1493,1,0,0,0,1495,1496,1,0,0,0,1496,
        1498,1,0,0,0,1497,1495,1,0,0,0,1498,1503,3,232,116,0,1499,1500,5,
        9,0,0,1500,1502,3,232,116,0,1501,1499,1,0,0,0,1502,1505,1,0,0,0,
        1503,1501,1,0,0,0,1503,1504,1,0,0,0,1504,1507,1,0,0,0,1505,1503,
        1,0,0,0,1506,1508,3,228,114,0,1507,1506,1,0,0,0,1507,1508,1,0,0,
        0,1508,1510,1,0,0,0,1509,1511,3,230,115,0,1510,1509,1,0,0,0,1510,
        1511,1,0,0,0,1511,1512,1,0,0,0,1512,1513,5,186,0,0,1513,1514,5,31,
        0,0,1514,1515,3,360,180,0,1515,1516,5,8,0,0,1516,227,1,0,0,0,1517,
        1518,5,144,0,0,1518,1519,5,305,0,0,1519,229,1,0,0,0,1520,1521,5,
        128,0,0,1521,1522,5,315,0,0,1522,231,1,0,0,0,1523,1525,3,372,186,
        0,1524,1526,3,234,117,0,1525,1524,1,0,0,0,1525,1526,1,0,0,0,1526,
        233,1,0,0,0,1527,1528,5,246,0,0,1528,1529,5,313,0,0,1529,235,1,0,
        0,0,1530,1534,7,6,0,0,1531,1533,3,366,183,0,1532,1531,1,0,0,0,1533,
        1536,1,0,0,0,1534,1532,1,0,0,0,1534,1535,1,0,0,0,1535,1537,1,0,0,
        0,1536,1534,1,0,0,0,1537,1542,3,238,119,0,1538,1539,5,9,0,0,1539,
        1541,3,238,119,0,1540,1538,1,0,0,0,1541,1544,1,0,0,0,1542,1540,1,
        0,0,0,1542,1543,1,0,0,0,1543,1546,1,0,0,0,1544,1542,1,0,0,0,1545,
        1547,3,228,114,0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,237,1,
        0,0,0,1548,1550,3,372,186,0,1549,1551,3,234,117,0,1550,1549,1,0,
        0,0,1550,1551,1,0,0,0,1551,239,1,0,0,0,1552,1554,5,194,0,0,1553,
        1555,3,242,121,0,1554,1553,1,0,0,0,1554,1555,1,0,0,0,1555,1556,1,
        0,0,0,1556,1557,3,380,190,0,1557,1558,5,260,0,0,1558,1559,3,248,
        124,0,1559,241,1,0,0,0,1560,1561,5,137,0,0,1561,1562,5,17,0,0,1562,
        1564,7,7,0,0,1563,1565,3,244,122,0,1564,1563,1,0,0,0,1564,1565,1,
        0,0,0,1565,243,1,0,0,0,1566,1567,5,93,0,0,1567,1568,5,17,0,0,1568,
        1569,5,316,0,0,1569,245,1,0,0,0,1570,1573,3,520,260,0,1571,1572,
        5,10,0,0,1572,1574,3,514,257,0,1573,1571,1,0,0,0,1573,1574,1,0,0,
        0,1574,247,1,0,0,0,1575,1577,3,246,123,0,1576,1575,1,0,0,0,1576,
        1577,1,0,0,0,1577,1581,1,0,0,0,1578,1580,3,250,125,0,1579,1578,1,
        0,0,0,1580,1583,1,0,0,0,1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,
        1585,1,0,0,0,1583,1581,1,0,0,0,1584,1586,5,1,0,0,1585,1584,1,0,0,
        0,1585,1586,1,0,0,0,1586,249,1,0,0,0,1587,1589,5,1,0,0,1588,1587,
        1,0,0,0,1588,1589,1,0,0,0,1589,1590,1,0,0,0,1590,1592,3,582,291,
        0,1591,1593,3,246,123,0,1592,1591,1,0,0,0,1592,1593,1,0,0,0,1593,
        251,1,0,0,0,1594,1596,5,196,0,0,1595,1597,3,242,121,0,1596,1595,
        1,0,0,0,1596,1597,1,0,0,0,1597,1598,1,0,0,0,1598,1599,3,380,190,
        0,1599,1600,5,260,0,0,1600,1601,3,248,124,0,1601,253,1,0,0,0,1602,
        1603,5,195,0,0,1603,1604,3,380,190,0,1604,1606,3,496,248,0,1605,
        1607,3,256,128,0,1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,255,1,
        0,0,0,1608,1609,5,260,0,0,1609,1610,5,31,0,0,1610,1615,3,370,185,
        0,1611,1612,5,9,0,0,1612,1614,3,370,185,0,1613,1611,1,0,0,0,1614,
        1617,1,0,0,0,1615,1613,1,0,0,0,1615,1616,1,0,0,0,1616,1618,1,0,0,
        0,1617,1615,1,0,0,0,1618,1619,5,8,0,0,1619,257,1,0,0,0,1620,1624,
        5,197,0,0,1621,1623,3,368,184,0,1622,1621,1,0,0,0,1623,1626,1,0,
        0,0,1624,1622,1,0,0,0,1624,1625,1,0,0,0,1625,1627,1,0,0,0,1626,1624,
        1,0,0,0,1627,1628,5,57,0,0,1628,1630,3,466,233,0,1629,1631,3,260,
        130,0,1630,1629,1,0,0,0,1630,1631,1,0,0,0,1631,1634,1,0,0,0,1632,
        1635,3,262,131,0,1633,1635,3,264,132,0,1634,1632,1,0,0,0,1634,1633,
        1,0,0,0,1635,259,1,0,0,0,1636,1639,5,130,0,0,1637,1640,3,446,223,
        0,1638,1640,3,584,292,0,1639,1637,1,0,0,0,1639,1638,1,0,0,0,1640,
        261,1,0,0,0,1641,1642,5,31,0,0,1642,1643,3,80,40,0,1643,1644,5,8,
        0,0,1644,263,1,0,0,0,1645,1646,5,29,0,0,1646,1647,3,76,38,0,1647,
        1648,5,4,0,0,1648,265,1,0,0,0,1649,1653,5,198,0,0,1650,1652,3,368,
        184,0,1651,1650,1,0,0,0,1652,1655,1,0,0,0,1653,1651,1,0,0,0,1653,
        1654,1,0,0,0,1654,1656,1,0,0,0,1655,1653,1,0,0,0,1656,1658,3,466,
        233,0,1657,1659,3,268,134,0,1658,1657,1,0,0,0,1658,1659,1,0,0,0,
        1659,1660,1,0,0,0,1660,1661,5,31,0,0,1661,1662,3,360,180,0,1662,
        1663,5,8,0,0,1663,267,1,0,0,0,1664,1665,5,128,0,0,1665,1666,5,315,
        0,0,1666,269,1,0,0,0,1667,1668,5,205,0,0,1668,1673,3,372,186,0,1669,
        1670,5,9,0,0,1670,1672,3,372,186,0,1671,1669,1,0,0,0,1672,1675,1,
        0,0,0,1673,1671,1,0,0,0,1673,1674,1,0,0,0,1674,271,1,0,0,0,1675,
        1673,1,0,0,0,1676,1685,5,207,0,0,1677,1682,3,526,263,0,1678,1679,
        5,9,0,0,1679,1681,3,526,263,0,1680,1678,1,0,0,0,1681,1684,1,0,0,
        0,1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,1686,1,0,0,0,1684,1682,
        1,0,0,0,1685,1677,1,0,0,0,1685,1686,1,0,0,0,1686,273,1,0,0,0,1687,
        1688,5,209,0,0,1688,1693,3,526,263,0,1689,1690,5,9,0,0,1690,1692,
        3,526,263,0,1691,1689,1,0,0,0,1692,1695,1,0,0,0,1693,1691,1,0,0,
        0,1693,1694,1,0,0,0,1694,275,1,0,0,0,1695,1693,1,0,0,0,1696,1705,
        5,206,0,0,1697,1702,3,372,186,0,1698,1699,5,9,0,0,1699,1701,3,372,
        186,0,1700,1698,1,0,0,0,1701,1704,1,0,0,0,1702,1700,1,0,0,0,1702,
        1703,1,0,0,0,1703,1706,1,0,0,0,1704,1702,1,0,0,0,1705,1697,1,0,0,
        0,1705,1706,1,0,0,0,1706,277,1,0,0,0,1707,1716,5,210,0,0,1708,1713,
        3,372,186,0,1709,1710,5,9,0,0,1710,1712,3,372,186,0,1711,1709,1,
        0,0,0,1712,1715,1,0,0,0,1713,1711,1,0,0,0,1713,1714,1,0,0,0,1714,
        1717,1,0,0,0,1715,1713,1,0,0,0,1716,1708,1,0,0,0,1716,1717,1,0,0,
        0,1717,279,1,0,0,0,1718,1727,5,211,0,0,1719,1724,3,282,141,0,1720,
        1721,5,9,0,0,1721,1723,3,282,141,0,1722,1720,1,0,0,0,1723,1726,1,
        0,0,0,1724,1722,1,0,0,0,1724,1725,1,0,0,0,1725,1728,1,0,0,0,1726,
        1724,1,0,0,0,1727,1719,1,0,0,0,1727,1728,1,0,0,0,1728,281,1,0,0,
        0,1729,1731,3,526,263,0,1730,1732,7,8,0,0,1731,1730,1,0,0,0,1731,
        1732,1,0,0,0,1732,283,1,0,0,0,1733,1737,5,215,0,0,1734,1736,3,366,
        183,0,1735,1734,1,0,0,0,1736,1739,1,0,0,0,1737,1735,1,0,0,0,1737,
        1738,1,0,0,0,1738,1740,1,0,0,0,1739,1737,1,0,0,0,1740,1741,5,57,
        0,0,1741,1743,3,372,186,0,1742,1744,3,286,143,0,1743,1742,1,0,0,
        0,1743,1744,1,0,0,0,1744,285,1,0,0,0,1745,1746,5,260,0,0,1746,1751,
        3,372,186,0,1747,1748,5,9,0,0,1748,1750,3,372,186,0,1749,1747,1,
        0,0,0,1750,1753,1,0,0,0,1751,1749,1,0,0,0,1751,1752,1,0,0,0,1752,
        287,1,0,0,0,1753,1751,1,0,0,0,1754,1755,5,218,0,0,1755,1758,7,9,
        0,0,1756,1759,3,290,145,0,1757,1759,3,292,146,0,1758,1756,1,0,0,
        0,1758,1757,1,0,0,0,1758,1759,1,0,0,0,1759,289,1,0,0,0,1760,1761,
        5,260,0,0,1761,1770,5,31,0,0,1762,1767,3,294,147,0,1763,1764,5,9,
        0,0,1764,1766,3,294,147,0,1765,1763,1,0,0,0,1766,1769,1,0,0,0,1767,
        1765,1,0,0,0,1767,1768,1,0,0,0,1768,1771,1,0,0,0,1769,1767,1,0,0,
        0,1770,1762,1,0,0,0,1770,1771,1,0,0,0,1771,1772,1,0,0,0,1772,1773,
        5,8,0,0,1773,291,1,0,0,0,1774,1776,3,298,149,0,1775,1774,1,0,0,0,
        1776,1777,1,0,0,0,1777,1775,1,0,0,0,1777,1778,1,0,0,0,1778,293,1,
        0,0,0,1779,1780,5,245,0,0,1780,1781,5,17,0,0,1781,1831,3,422,211,
        0,1782,1783,5,269,0,0,1783,1784,5,17,0,0,1784,1831,3,520,260,0,1785,
        1786,5,227,0,0,1786,1787,5,17,0,0,1787,1831,3,296,148,0,1788,1789,
        5,274,0,0,1789,1790,5,17,0,0,1790,1831,3,296,148,0,1791,1792,5,45,
        0,0,1792,1793,5,17,0,0,1793,1831,3,296,148,0,1794,1795,5,137,0,0,
        1795,1796,5,17,0,0,1796,1831,7,10,0,0,1797,1798,5,272,0,0,1798,1799,
        5,17,0,0,1799,1831,3,422,211,0,1800,1801,5,278,0,0,1801,1802,5,17,
        0,0,1802,1831,3,422,211,0,1803,1804,5,268,0,0,1804,1805,5,17,0,0,
        1805,1831,7,11,0,0,1806,1807,5,273,0,0,1807,1808,5,17,0,0,1808,1831,
        7,11,0,0,1809,1810,5,140,0,0,1810,1811,5,17,0,0,1811,1831,7,12,0,
        0,1812,1813,5,277,0,0,1813,1814,5,17,0,0,1814,1831,7,13,0,0,1815,
        1816,5,39,0,0,1816,1817,5,17,0,0,1817,1831,5,310,0,0,1818,1819,5,
        276,0,0,1819,1820,5,17,0,0,1820,1831,3,556,278,0,1821,1822,5,275,
        0,0,1822,1823,5,17,0,0,1823,1831,3,556,278,0,1824,1825,5,271,0,0,
        1825,1826,5,17,0,0,1826,1831,3,550,275,0,1827,1828,5,270,0,0,1828,
        1829,5,17,0,0,1829,1831,3,550,275,0,1830,1779,1,0,0,0,1830,1782,
        1,0,0,0,1830,1785,1,0,0,0,1830,1788,1,0,0,0,1830,1791,1,0,0,0,1830,
        1794,1,0,0,0,1830,1797,1,0,0,0,1830,1800,1,0,0,0,1830,1803,1,0,0,
        0,1830,1806,1,0,0,0,1830,1809,1,0,0,0,1830,1812,1,0,0,0,1830,1815,
        1,0,0,0,1830,1818,1,0,0,0,1830,1821,1,0,0,0,1830,1824,1,0,0,0,1830,
        1827,1,0,0,0,1831,295,1,0,0,0,1832,1837,3,522,261,0,1833,1834,5,
        9,0,0,1834,1836,3,522,261,0,1835,1833,1,0,0,0,1836,1839,1,0,0,0,
        1837,1835,1,0,0,0,1837,1838,1,0,0,0,1838,297,1,0,0,0,1839,1837,1,
        0,0,0,1840,1841,5,245,0,0,1841,1842,5,17,0,0,1842,1854,3,582,291,
        0,1843,1844,5,137,0,0,1844,1845,5,17,0,0,1845,1854,7,10,0,0,1846,
        1847,5,260,0,0,1847,1854,3,582,291,0,1848,1849,5,57,0,0,1849,1854,
        3,296,148,0,1850,1851,5,39,0,0,1851,1852,5,17,0,0,1852,1854,5,310,
        0,0,1853,1840,1,0,0,0,1853,1843,1,0,0,0,1853,1846,1,0,0,0,1853,1848,
        1,0,0,0,1853,1850,1,0,0,0,1854,299,1,0,0,0,1855,1859,5,222,0,0,1856,
        1858,3,366,183,0,1857,1856,1,0,0,0,1858,1861,1,0,0,0,1859,1857,1,
        0,0,0,1859,1860,1,0,0,0,1860,1862,1,0,0,0,1861,1859,1,0,0,0,1862,
        1863,3,372,186,0,1863,1864,5,185,0,0,1864,1865,3,372,186,0,1865,
        301,1,0,0,0,1866,1870,5,221,0,0,1867,1869,3,366,183,0,1868,1867,
        1,0,0,0,1869,1872,1,0,0,0,1870,1868,1,0,0,0,1870,1871,1,0,0,0,1871,
        1873,1,0,0,0,1872,1870,1,0,0,0,1873,1874,3,372,186,0,1874,303,1,
        0,0,0,1875,1879,5,223,0,0,1876,1878,3,368,184,0,1877,1876,1,0,0,
        0,1878,1881,1,0,0,0,1879,1877,1,0,0,0,1879,1880,1,0,0,0,1880,1883,
        1,0,0,0,1881,1879,1,0,0,0,1882,1884,3,306,153,0,1883,1882,1,0,0,
        0,1883,1884,1,0,0,0,1884,1886,1,0,0,0,1885,1887,3,308,154,0,1886,
        1885,1,0,0,0,1886,1887,1,0,0,0,1887,1889,1,0,0,0,1888,1890,3,310,
        155,0,1889,1888,1,0,0,0,1889,1890,1,0,0,0,1890,1891,1,0,0,0,1891,
        1892,5,260,0,0,1892,1894,5,31,0,0,1893,1895,3,312,156,0,1894,1893,
        1,0,0,0,1895,1896,1,0,0,0,1896,1894,1,0,0,0,1896,1897,1,0,0,0,1897,
        1898,1,0,0,0,1898,1899,5,8,0,0,1899,305,1,0,0,0,1900,1901,5,189,
        0,0,1901,1902,5,57,0,0,1902,1903,3,330,165,0,1903,1904,5,9,0,0,1904,
        1905,3,330,165,0,1905,307,1,0,0,0,1906,1907,5,197,0,0,1907,1908,
        5,57,0,0,1908,1913,3,380,190,0,1909,1910,5,9,0,0,1910,1912,3,380,
        190,0,1911,1909,1,0,0,0,1912,1915,1,0,0,0,1913,1911,1,0,0,0,1913,
        1914,1,0,0,0,1914,309,1,0,0,0,1915,1913,1,0,0,0,1916,1917,5,72,0,
        0,1917,1918,5,31,0,0,1918,1923,3,24,12,0,1919,1920,5,9,0,0,1920,
        1922,3,24,12,0,1921,1919,1,0,0,0,1922,1925,1,0,0,0,1923,1921,1,0,
        0,0,1923,1924,1,0,0,0,1924,1926,1,0,0,0,1925,1923,1,0,0,0,1926,1927,
        5,8,0,0,1927,311,1,0,0,0,1928,1929,5,237,0,0,1929,1931,3,518,259,
        0,1930,1932,5,187,0,0,1931,1930,1,0,0,0,1931,1932,1,0,0,0,1932,1934,
        1,0,0,0,1933,1935,3,314,157,0,1934,1933,1,0,0,0,1934,1935,1,0,0,
        0,1935,1936,1,0,0,0,1936,1937,5,10,0,0,1937,1939,3,380,190,0,1938,
        1940,3,316,158,0,1939,1938,1,0,0,0,1939,1940,1,0,0,0,1940,1941,1,
        0,0,0,1941,1942,5,34,0,0,1942,313,1,0,0,0,1943,1944,5,191,0,0,1944,
        1945,5,17,0,0,1945,1946,7,14,0,0,1946,315,1,0,0,0,1947,1948,5,36,
        0,0,1948,1953,3,318,159,0,1949,1950,5,9,0,0,1950,1952,3,318,159,
        0,1951,1949,1,0,0,0,1952,1955,1,0,0,0,1953,1951,1,0,0,0,1953,1954,
        1,0,0,0,1954,317,1,0,0,0,1955,1953,1,0,0,0,1956,1957,3,518,259,0,
        1957,1958,5,17,0,0,1958,1959,3,380,190,0,1959,319,1,0,0,0,1960,1964,
        5,225,0,0,1961,1963,3,368,184,0,1962,1961,1,0,0,0,1963,1966,1,0,
        0,0,1964,1962,1,0,0,0,1964,1965,1,0,0,0,1965,1968,1,0,0,0,1966,1964,
        1,0,0,0,1967,1969,3,460,230,0,1968,1967,1,0,0,0,1968,1969,1,0,0,
        0,1969,1971,1,0,0,0,1970,1972,3,324,162,0,1971,1970,1,0,0,0,1971,
        1972,1,0,0,0,1972,1976,1,0,0,0,1973,1977,3,380,190,0,1974,1977,3,
        454,227,0,1975,1977,3,322,161,0,1976,1973,1,0,0,0,1976,1974,1,0,
        0,0,1976,1975,1,0,0,0,1977,321,1,0,0,0,1978,1979,5,1,0,0,1979,1980,
        5,43,0,0,1980,1981,3,380,190,0,1981,323,1,0,0,0,1982,1983,5,130,
        0,0,1983,1984,5,31,0,0,1984,1989,3,144,72,0,1985,1986,5,9,0,0,1986,
        1988,3,144,72,0,1987,1985,1,0,0,0,1988,1991,1,0,0,0,1989,1987,1,
        0,0,0,1989,1990,1,0,0,0,1990,1992,1,0,0,0,1991,1989,1,0,0,0,1992,
        1993,5,8,0,0,1993,325,1,0,0,0,1994,1998,5,226,0,0,1995,1997,3,366,
        183,0,1996,1995,1,0,0,0,1997,2000,1,0,0,0,1998,1996,1,0,0,0,1998,
        1999,1,0,0,0,1999,2001,1,0,0,0,2000,1998,1,0,0,0,2001,2006,3,372,
        186,0,2002,2003,5,9,0,0,2003,2005,3,372,186,0,2004,2002,1,0,0,0,
        2005,2008,1,0,0,0,2006,2004,1,0,0,0,2006,2007,1,0,0,0,2007,327,1,
        0,0,0,2008,2006,1,0,0,0,2009,2013,7,15,0,0,2010,2012,3,368,184,0,
        2011,2010,1,0,0,0,2012,2015,1,0,0,0,2013,2011,1,0,0,0,2013,2014,
        1,0,0,0,2014,2016,1,0,0,0,2015,2013,1,0,0,0,2016,2017,5,57,0,0,2017,
        2022,3,330,165,0,2018,2019,5,9,0,0,2019,2021,3,330,165,0,2020,2018,
        1,0,0,0,2021,2024,1,0,0,0,2022,2020,1,0,0,0,2022,2023,1,0,0,0,2023,
        329,1,0,0,0,2024,2022,1,0,0,0,2025,2026,3,372,186,0,2026,2027,3,
        332,166,0,2027,331,1,0,0,0,2028,2030,7,16,0,0,2029,2028,1,0,0,0,
        2029,2030,1,0,0,0,2030,2033,1,0,0,0,2031,2032,5,184,0,0,2032,2034,
        7,17,0,0,2033,2031,1,0,0,0,2033,2034,1,0,0,0,2034,333,1,0,0,0,2035,
        2039,5,238,0,0,2036,2038,3,366,183,0,2037,2036,1,0,0,0,2038,2041,
        1,0,0,0,2039,2037,1,0,0,0,2039,2040,1,0,0,0,2040,2050,1,0,0,0,2041,
        2039,1,0,0,0,2042,2047,3,372,186,0,2043,2044,5,9,0,0,2044,2046,3,
        372,186,0,2045,2043,1,0,0,0,2046,2049,1,0,0,0,2047,2045,1,0,0,0,
        2047,2048,1,0,0,0,2048,2051,1,0,0,0,2049,2047,1,0,0,0,2050,2042,
        1,0,0,0,2050,2051,1,0,0,0,2051,2053,1,0,0,0,2052,2054,3,336,168,
        0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,335,1,0,0,0,2055,2056,
        5,57,0,0,2056,2057,3,372,186,0,2057,2058,5,9,0,0,2058,2059,3,372,
        186,0,2059,2061,1,0,0,0,2060,2062,3,338,169,0,2061,2060,1,0,0,0,
        2061,2062,1,0,0,0,2062,337,1,0,0,0,2063,2064,5,55,0,0,2064,2065,
        5,17,0,0,2065,2066,3,554,277,0,2066,339,1,0,0,0,2067,2071,7,18,0,
        0,2068,2070,3,366,183,0,2069,2068,1,0,0,0,2070,2073,1,0,0,0,2071,
        2069,1,0,0,0,2071,2072,1,0,0,0,2072,2074,1,0,0,0,2073,2071,1,0,0,
        0,2074,2075,3,372,186,0,2075,341,1,0,0,0,2076,2080,5,247,0,0,2077,
        2079,3,366,183,0,2078,2077,1,0,0,0,2079,2082,1,0,0,0,2080,2078,1,
        0,0,0,2080,2081,1,0,0,0,2081,2083,1,0,0,0,2082,2080,1,0,0,0,2083,
        2084,3,372,186,0,2084,2085,5,57,0,0,2085,2086,3,330,165,0,2086,343,
        1,0,0,0,2087,2088,5,248,0,0,2088,2089,3,372,186,0,2089,2090,5,185,
        0,0,2090,2092,3,372,186,0,2091,2093,3,346,173,0,2092,2091,1,0,0,
        0,2092,2093,1,0,0,0,2093,345,1,0,0,0,2094,2095,5,57,0,0,2095,2096,
        3,330,165,0,2096,347,1,0,0,0,2097,2102,3,350,175,0,2098,2099,5,9,
        0,0,2099,2101,3,350,175,0,2100,2098,1,0,0,0,2101,2104,1,0,0,0,2102,
        2100,1,0,0,0,2102,2103,1,0,0,0,2103,349,1,0,0,0,2104,2102,1,0,0,
        0,2105,2107,5,249,0,0,2106,2108,3,372,186,0,2107,2106,1,0,0,0,2107,
        2108,1,0,0,0,2108,2109,1,0,0,0,2109,2110,5,185,0,0,2110,2112,3,372,
        186,0,2111,2113,3,352,176,0,2112,2111,1,0,0,0,2112,2113,1,0,0,0,
        2113,2114,1,0,0,0,2114,2115,5,57,0,0,2115,2116,3,330,165,0,2116,
        351,1,0,0,0,2117,2118,5,260,0,0,2118,2119,5,190,0,0,2119,2120,5,
        17,0,0,2120,2121,3,372,186,0,2121,353,1,0,0,0,2122,2126,5,254,0,
        0,2123,2125,3,368,184,0,2124,2123,1,0,0,0,2125,2128,1,0,0,0,2126,
        2124,1,0,0,0,2126,2127,1,0,0,0,2127,2129,1,0,0,0,2128,2126,1,0,0,
        0,2129,2134,3,356,178,0,2130,2131,5,9,0,0,2131,2133,3,356,178,0,
        2132,2130,1,0,0,0,2133,2136,1,0,0,0,2134,2132,1,0,0,0,2134,2135,
        1,0,0,0,2135,355,1,0,0,0,2136,2134,1,0,0,0,2137,2141,3,486,243,0,
        2138,2141,3,480,240,0,2139,2141,3,462,231,0,2140,2137,1,0,0,0,2140,
        2138,1,0,0,0,2140,2139,1,0,0,0,2141,357,1,0,0,0,2142,2146,7,19,0,
        0,2143,2145,3,366,183,0,2144,2143,1,0,0,0,2145,2148,1,0,0,0,2146,
        2144,1,0,0,0,2146,2147,1,0,0,0,2147,2149,1,0,0,0,2148,2146,1,0,0,
        0,2149,2150,3,372,186,0,2150,359,1,0,0,0,2151,2154,3,80,40,0,2152,
        2154,3,362,181,0,2153,2151,1,0,0,0,2153,2152,1,0,0,0,2154,361,1,
        0,0,0,2155,2159,3,492,246,0,2156,2158,3,364,182,0,2157,2156,1,0,
        0,0,2158,2161,1,0,0,0,2159,2157,1,0,0,0,2159,2160,1,0,0,0,2160,363,
        1,0,0,0,2161,2159,1,0,0,0,2162,2163,5,3,0,0,2163,2164,3,84,42,0,
        2164,365,1,0,0,0,2165,2166,7,20,0,0,2166,2169,5,17,0,0,2167,2170,
        3,536,268,0,2168,2170,3,550,275,0,2169,2167,1,0,0,0,2169,2168,1,
        0,0,0,2170,367,1,0,0,0,2171,2172,7,21,0,0,2172,2175,5,17,0,0,2173,
        2176,3,536,268,0,2174,2176,3,550,275,0,2175,2173,1,0,0,0,2175,2174,
        1,0,0,0,2176,369,1,0,0,0,2177,2178,5,316,0,0,2178,2181,5,17,0,0,
        2179,2182,3,536,268,0,2180,2182,3,550,275,0,2181,2179,1,0,0,0,2181,
        2180,1,0,0,0,2182,371,1,0,0,0,2183,2185,3,374,187,0,2184,2183,1,
        0,0,0,2184,2185,1,0,0,0,2185,2186,1,0,0,0,2186,2187,3,380,190,0,
        2187,373,1,0,0,0,2188,2191,3,540,270,0,2189,2191,3,376,188,0,2190,
        2188,1,0,0,0,2190,2189,1,0,0,0,2191,2192,1,0,0,0,2192,2193,5,17,
        0,0,2193,375,1,0,0,0,2194,2195,5,31,0,0,2195,2200,3,540,270,0,2196,
        2197,5,9,0,0,2197,2199,3,540,270,0,2198,2196,1,0,0,0,2199,2202,1,
        0,0,0,2200,2198,1,0,0,0,2200,2201,1,0,0,0,2201,2203,1,0,0,0,2202,
        2200,1,0,0,0,2203,2204,5,8,0,0,2204,377,1,0,0,0,2205,2206,3,520,
        260,0,2206,2207,5,15,0,0,2207,2208,3,446,223,0,2208,379,1,0,0,0,
        2209,2210,3,382,191,0,2210,381,1,0,0,0,2211,2215,3,386,193,0,2212,
        2214,3,384,192,0,2213,2212,1,0,0,0,2214,2217,1,0,0,0,2215,2213,1,
        0,0,0,2215,2216,1,0,0,0,2216,383,1,0,0,0,2217,2215,1,0,0,0,2218,
        2219,5,188,0,0,2219,2220,3,386,193,0,2220,385,1,0,0,0,2221,2225,
        3,390,195,0,2222,2224,3,388,194,0,2223,2222,1,0,0,0,2224,2227,1,
        0,0,0,2225,2223,1,0,0,0,2225,2226,1,0,0,0,2226,387,1,0,0,0,2227,
        2225,1,0,0,0,2228,2229,5,43,0,0,2229,2230,3,390,195,0,2230,389,1,
        0,0,0,2231,2237,3,400,200,0,2232,2237,3,392,196,0,2233,2237,3,394,
        197,0,2234,2237,3,396,198,0,2235,2237,3,398,199,0,2236,2231,1,0,
        0,0,2236,2232,1,0,0,0,2236,2233,1,0,0,0,2236,2234,1,0,0,0,2236,2235,
        1,0,0,0,2237,391,1,0,0,0,2238,2239,3,400,200,0,2239,2240,7,22,0,
        0,2240,2241,3,400,200,0,2241,393,1,0,0,0,2242,2243,3,400,200,0,2243,
        2244,7,23,0,0,2244,2245,5,31,0,0,2245,2250,3,420,210,0,2246,2247,
        5,9,0,0,2247,2249,3,420,210,0,2248,2246,1,0,0,0,2249,2252,1,0,0,
        0,2250,2248,1,0,0,0,2250,2251,1,0,0,0,2251,2253,1,0,0,0,2252,2250,
        1,0,0,0,2253,2254,5,8,0,0,2254,395,1,0,0,0,2255,2256,3,400,200,0,
        2256,2257,7,24,0,0,2257,2258,5,31,0,0,2258,2259,3,420,210,0,2259,
        2260,5,16,0,0,2260,2261,3,420,210,0,2261,2262,5,8,0,0,2262,397,1,
        0,0,0,2263,2264,5,1,0,0,2264,2265,5,18,0,0,2265,2266,3,400,200,0,
        2266,399,1,0,0,0,2267,2270,3,402,201,0,2268,2269,7,25,0,0,2269,2271,
        3,402,201,0,2270,2268,1,0,0,0,2270,2271,1,0,0,0,2271,401,1,0,0,0,
        2272,2276,3,406,203,0,2273,2275,3,404,202,0,2274,2273,1,0,0,0,2275,
        2278,1,0,0,0,2276,2274,1,0,0,0,2276,2277,1,0,0,0,2277,403,1,0,0,
        0,2278,2276,1,0,0,0,2279,2280,7,26,0,0,2280,2281,3,406,203,0,2281,
        405,1,0,0,0,2282,2286,3,410,205,0,2283,2285,3,408,204,0,2284,2283,
        1,0,0,0,2285,2288,1,0,0,0,2286,2284,1,0,0,0,2286,2287,1,0,0,0,2287,
        407,1,0,0,0,2288,2286,1,0,0,0,2289,2290,7,27,0,0,2290,2291,3,410,
        205,0,2291,409,1,0,0,0,2292,2295,3,412,206,0,2293,2295,3,418,209,
        0,2294,2292,1,0,0,0,2294,2293,1,0,0,0,2295,411,1,0,0,0,2296,2300,
        3,420,210,0,2297,2299,3,414,207,0,2298,2297,1,0,0,0,2299,2302,1,
        0,0,0,2300,2298,1,0,0,0,2300,2301,1,0,0,0,2301,413,1,0,0,0,2302,
        2300,1,0,0,0,2303,2306,3,416,208,0,2304,2306,5,10,0,0,2305,2303,
        1,0,0,0,2305,2304,1,0,0,0,2306,2307,1,0,0,0,2307,2308,3,420,210,
        0,2308,415,1,0,0,0,2309,2310,7,28,0,0,2310,417,1,0,0,0,2311,2312,
        5,1,0,0,2312,2313,3,416,208,0,2313,2314,3,420,210,0,2314,419,1,0,
        0,0,2315,2317,7,26,0,0,2316,2315,1,0,0,0,2316,2317,1,0,0,0,2317,
        2318,1,0,0,0,2318,2319,3,422,211,0,2319,421,1,0,0,0,2320,2324,3,
        424,212,0,2321,2324,3,426,213,0,2322,2324,3,438,219,0,2323,2320,
        1,0,0,0,2323,2321,1,0,0,0,2323,2322,1,0,0,0,2324,423,1,0,0,0,2325,
        2329,3,442,221,0,2326,2329,3,456,228,0,2327,2329,3,436,218,0,2328,
        2325,1,0,0,0,2328,2326,1,0,0,0,2328,2327,1,0,0,0,2329,425,1,0,0,
        0,2330,2332,3,424,212,0,2331,2333,3,428,214,0,2332,2331,1,0,0,0,
        2333,2334,1,0,0,0,2334,2332,1,0,0,0,2334,2335,1,0,0,0,2335,427,1,
        0,0,0,2336,2340,3,430,215,0,2337,2340,3,432,216,0,2338,2340,3,434,
        217,0,2339,2336,1,0,0,0,2339,2337,1,0,0,0,2339,2338,1,0,0,0,2340,
        429,1,0,0,0,2341,2342,5,15,0,0,2342,2343,3,538,269,0,2343,431,1,
        0,0,0,2344,2345,5,30,0,0,2345,2346,3,380,190,0,2346,2347,5,5,0,0,
        2347,433,1,0,0,0,2348,2349,5,15,0,0,2349,2350,5,30,0,0,2350,2351,
        3,380,190,0,2351,2352,5,5,0,0,2352,435,1,0,0,0,2353,2355,5,250,0,
        0,2354,2356,3,440,220,0,2355,2354,1,0,0,0,2355,2356,1,0,0,0,2356,
        2357,1,0,0,0,2357,2358,5,31,0,0,2358,2359,3,76,38,0,2359,2360,5,
        8,0,0,2360,437,1,0,0,0,2361,2363,5,251,0,0,2362,2364,3,440,220,0,
        2363,2362,1,0,0,0,2363,2364,1,0,0,0,2364,2365,1,0,0,0,2365,2366,
        5,31,0,0,2366,2367,3,76,38,0,2367,2368,5,8,0,0,2368,439,1,0,0,0,
        2369,2370,5,137,0,0,2370,2371,5,17,0,0,2371,2372,5,163,0,0,2372,
        441,1,0,0,0,2373,2377,3,446,223,0,2374,2376,3,444,222,0,2375,2374,
        1,0,0,0,2376,2379,1,0,0,0,2377,2375,1,0,0,0,2377,2378,1,0,0,0,2378,
        443,1,0,0,0,2379,2377,1,0,0,0,2380,2381,5,15,0,0,2381,2382,3,446,
        223,0,2382,445,1,0,0,0,2383,2386,3,448,224,0,2384,2386,3,452,226,
        0,2385,2383,1,0,0,0,2385,2384,1,0,0,0,2386,447,1,0,0,0,2387,2388,
        3,520,260,0,2388,2397,5,31,0,0,2389,2394,3,450,225,0,2390,2391,5,
        9,0,0,2391,2393,3,450,225,0,2392,2390,1,0,0,0,2393,2396,1,0,0,0,
        2394,2392,1,0,0,0,2394,2395,1,0,0,0,2395,2398,1,0,0,0,2396,2394,
        1,0,0,0,2397,2389,1,0,0,0,2397,2398,1,0,0,0,2398,2399,1,0,0,0,2399,
        2400,5,8,0,0,2400,449,1,0,0,0,2401,2404,3,372,186,0,2402,2404,3,
        454,227,0,2403,2401,1,0,0,0,2403,2402,1,0,0,0,2404,451,1,0,0,0,2405,
        2406,5,66,0,0,2406,2408,5,31,0,0,2407,2409,3,372,186,0,2408,2407,
        1,0,0,0,2408,2409,1,0,0,0,2409,2410,1,0,0,0,2410,2411,5,8,0,0,2411,
        453,1,0,0,0,2412,2413,5,1,0,0,2413,455,1,0,0,0,2414,2422,3,552,276,
        0,2415,2422,3,458,229,0,2416,2422,3,494,247,0,2417,2422,3,500,250,
        0,2418,2422,3,492,246,0,2419,2422,3,506,253,0,2420,2422,3,462,231,
        0,2421,2414,1,0,0,0,2421,2415,1,0,0,0,2421,2416,1,0,0,0,2421,2417,
        1,0,0,0,2421,2418,1,0,0,0,2421,2419,1,0,0,0,2421,2420,1,0,0,0,2422,
        457,1,0,0,0,2423,2425,3,520,260,0,2424,2426,3,460,230,0,2425,2424,
        1,0,0,0,2425,2426,1,0,0,0,2426,459,1,0,0,0,2427,2428,5,70,0,0,2428,
        2429,5,17,0,0,2429,2430,7,29,0,0,2430,461,1,0,0,0,2431,2432,5,31,
        0,0,2432,2433,3,74,37,0,2433,2434,5,8,0,0,2434,463,1,0,0,0,2435,
        2436,5,214,0,0,2436,2437,3,520,260,0,2437,2438,5,95,0,0,2438,2439,
        3,380,190,0,2439,2440,5,246,0,0,2440,2441,3,380,190,0,2441,2442,
        5,237,0,0,2442,2443,3,380,190,0,2443,465,1,0,0,0,2444,2447,3,480,
        240,0,2445,2447,3,468,234,0,2446,2444,1,0,0,0,2446,2445,1,0,0,0,
        2447,467,1,0,0,0,2448,2450,3,480,240,0,2449,2451,3,470,235,0,2450,
        2449,1,0,0,0,2451,2452,1,0,0,0,2452,2450,1,0,0,0,2452,2453,1,0,0,
        0,2453,469,1,0,0,0,2454,2458,3,472,236,0,2455,2458,3,474,237,0,2456,
        2458,3,476,238,0,2457,2454,1,0,0,0,2457,2455,1,0,0,0,2457,2456,1,
        0,0,0,2458,471,1,0,0,0,2459,2460,5,15,0,0,2460,2461,3,478,239,0,
        2461,473,1,0,0,0,2462,2463,5,30,0,0,2463,2464,3,380,190,0,2464,2465,
        5,5,0,0,2465,475,1,0,0,0,2466,2467,5,15,0,0,2467,2468,5,30,0,0,2468,
        2469,3,380,190,0,2469,2470,5,5,0,0,2470,477,1,0,0,0,2471,2475,3,
        482,241,0,2472,2475,3,540,270,0,2473,2475,3,484,242,0,2474,2471,
        1,0,0,0,2474,2472,1,0,0,0,2474,2473,1,0,0,0,2475,479,1,0,0,0,2476,
        2477,3,478,239,0,2477,481,1,0,0,0,2478,2479,5,2,0,0,2479,483,1,0,
        0,0,2480,2481,7,30,0,0,2481,485,1,0,0,0,2482,2486,3,524,262,0,2483,
        2486,3,442,221,0,2484,2486,3,488,244,0,2485,2482,1,0,0,0,2485,2483,
        1,0,0,0,2485,2484,1,0,0,0,2486,487,1,0,0,0,2487,2488,3,442,221,0,
        2488,2489,5,15,0,0,2489,2490,3,490,245,0,2490,489,1,0,0,0,2491,2494,
        3,544,272,0,2492,2494,3,478,239,0,2493,2491,1,0,0,0,2493,2492,1,
        0,0,0,2494,491,1,0,0,0,2495,2496,5,65,0,0,2496,2497,5,315,0,0,2497,
        2498,3,496,248,0,2498,493,1,0,0,0,2499,2503,5,71,0,0,2500,2502,3,
        368,184,0,2501,2500,1,0,0,0,2502,2505,1,0,0,0,2503,2501,1,0,0,0,
        2503,2504,1,0,0,0,2504,2506,1,0,0,0,2505,2503,1,0,0,0,2506,2507,
        3,496,248,0,2507,2509,5,30,0,0,2508,2510,3,550,275,0,2509,2508,1,
        0,0,0,2509,2510,1,0,0,0,2510,2515,1,0,0,0,2511,2512,5,9,0,0,2512,
        2514,3,550,275,0,2513,2511,1,0,0,0,2514,2517,1,0,0,0,2515,2513,1,
        0,0,0,2515,2516,1,0,0,0,2516,2519,1,0,0,0,2517,2515,1,0,0,0,2518,
        2520,5,9,0,0,2519,2518,1,0,0,0,2519,2520,1,0,0,0,2520,2521,1,0,0,
        0,2521,2522,5,5,0,0,2522,495,1,0,0,0,2523,2525,5,31,0,0,2524,2526,
        3,498,249,0,2525,2524,1,0,0,0,2525,2526,1,0,0,0,2526,2531,1,0,0,
        0,2527,2528,5,9,0,0,2528,2530,3,498,249,0,2529,2527,1,0,0,0,2530,
        2533,1,0,0,0,2531,2529,1,0,0,0,2531,2532,1,0,0,0,2532,2535,1,0,0,
        0,2533,2531,1,0,0,0,2534,2536,5,9,0,0,2535,2534,1,0,0,0,2535,2536,
        1,0,0,0,2536,2537,1,0,0,0,2537,2538,5,8,0,0,2538,497,1,0,0,0,2539,
        2540,3,518,259,0,2540,2541,5,10,0,0,2541,2542,3,514,257,0,2542,499,
        1,0,0,0,2543,2547,7,31,0,0,2544,2546,3,368,184,0,2545,2544,1,0,0,
        0,2546,2549,1,0,0,0,2547,2545,1,0,0,0,2547,2548,1,0,0,0,2548,2550,
        1,0,0,0,2549,2547,1,0,0,0,2550,2551,3,496,248,0,2551,2552,5,30,0,
        0,2552,2557,3,582,291,0,2553,2554,5,9,0,0,2554,2556,3,582,291,0,
        2555,2553,1,0,0,0,2556,2559,1,0,0,0,2557,2555,1,0,0,0,2557,2558,
        1,0,0,0,2558,2560,1,0,0,0,2559,2557,1,0,0,0,2560,2562,5,5,0,0,2561,
        2563,3,502,251,0,2562,2561,1,0,0,0,2562,2563,1,0,0,0,2563,501,1,
        0,0,0,2564,2565,5,260,0,0,2565,2577,5,31,0,0,2566,2571,3,504,252,
        0,2567,2568,5,9,0,0,2568,2570,3,504,252,0,2569,2567,1,0,0,0,2570,
        2573,1,0,0,0,2571,2569,1,0,0,0,2571,2572,1,0,0,0,2572,2575,1,0,0,
        0,2573,2571,1,0,0,0,2574,2576,5,9,0,0,2575,2574,1,0,0,0,2575,2576,
        1,0,0,0,2576,2578,1,0,0,0,2577,2566,1,0,0,0,2577,2578,1,0,0,0,2578,
        2579,1,0,0,0,2579,2580,5,8,0,0,2580,503,1,0,0,0,2581,2582,3,518,
        259,0,2582,2586,5,17,0,0,2583,2587,3,582,291,0,2584,2587,7,32,0,
        0,2585,2587,3,518,259,0,2586,2583,1,0,0,0,2586,2584,1,0,0,0,2586,
        2585,1,0,0,0,2587,505,1,0,0,0,2588,2589,5,156,0,0,2589,2590,5,31,
        0,0,2590,2591,3,582,291,0,2591,2592,5,8,0,0,2592,2593,3,508,254,
        0,2593,2594,3,510,255,0,2594,2595,3,512,256,0,2595,507,1,0,0,0,2596,
        2597,5,53,0,0,2597,2598,5,31,0,0,2598,2599,3,74,37,0,2599,2600,5,
        8,0,0,2600,509,1,0,0,0,2601,2602,5,75,0,0,2602,2603,5,31,0,0,2603,
        2604,3,74,37,0,2604,2605,5,8,0,0,2605,511,1,0,0,0,2606,2607,5,40,
        0,0,2607,2608,5,31,0,0,2608,2609,3,334,167,0,2609,2610,5,8,0,0,2610,
        513,1,0,0,0,2611,2612,7,33,0,0,2612,515,1,0,0,0,2613,2614,7,34,0,
        0,2614,517,1,0,0,0,2615,2616,3,540,270,0,2616,519,1,0,0,0,2617,2618,
        3,538,269,0,2618,521,1,0,0,0,2619,2620,3,540,270,0,2620,523,1,0,
        0,0,2621,2622,3,544,272,0,2622,525,1,0,0,0,2623,2626,3,520,260,0,
        2624,2626,3,524,262,0,2625,2623,1,0,0,0,2625,2624,1,0,0,0,2626,527,
        1,0,0,0,2627,2628,5,316,0,0,2628,529,1,0,0,0,2629,2630,7,35,0,0,
        2630,531,1,0,0,0,2631,2632,7,36,0,0,2632,533,1,0,0,0,2633,2634,5,
        30,0,0,2634,2635,3,582,291,0,2635,2636,5,5,0,0,2636,535,1,0,0,0,
        2637,2640,3,528,264,0,2638,2640,3,530,265,0,2639,2637,1,0,0,0,2639,
        2638,1,0,0,0,2640,537,1,0,0,0,2641,2645,3,528,264,0,2642,2645,3,
        530,265,0,2643,2645,3,534,267,0,2644,2641,1,0,0,0,2644,2642,1,0,
        0,0,2644,2643,1,0,0,0,2645,539,1,0,0,0,2646,2651,3,528,264,0,2647,
        2651,3,530,265,0,2648,2651,3,532,266,0,2649,2651,3,534,267,0,2650,
        2646,1,0,0,0,2650,2647,1,0,0,0,2650,2648,1,0,0,0,2650,2649,1,0,0,
        0,2651,541,1,0,0,0,2652,2656,3,528,264,0,2653,2656,3,530,265,0,2654,
        2656,3,532,266,0,2655,2652,1,0,0,0,2655,2653,1,0,0,0,2655,2654,1,
        0,0,0,2656,543,1,0,0,0,2657,2659,3,546,273,0,2658,2657,1,0,0,0,2658,
        2659,1,0,0,0,2659,2660,1,0,0,0,2660,2664,5,1,0,0,2661,2663,3,548,
        274,0,2662,2661,1,0,0,0,2663,2666,1,0,0,0,2664,2662,1,0,0,0,2664,
        2665,1,0,0,0,2665,545,1,0,0,0,2666,2664,1,0,0,0,2667,2671,5,316,
        0,0,2668,2671,3,530,265,0,2669,2671,3,532,266,0,2670,2667,1,0,0,
        0,2670,2668,1,0,0,0,2670,2669,1,0,0,0,2671,547,1,0,0,0,2672,2678,
        5,316,0,0,2673,2678,3,530,265,0,2674,2678,3,532,266,0,2675,2678,
        5,305,0,0,2676,2678,5,1,0,0,2677,2672,1,0,0,0,2677,2673,1,0,0,0,
        2677,2674,1,0,0,0,2677,2675,1,0,0,0,2677,2676,1,0,0,0,2678,549,1,
        0,0,0,2679,2682,3,558,279,0,2680,2682,3,552,276,0,2681,2679,1,0,
        0,0,2681,2680,1,0,0,0,2682,551,1,0,0,0,2683,2695,3,560,280,0,2684,
        2695,3,562,281,0,2685,2695,3,564,282,0,2686,2695,3,566,283,0,2687,
        2695,3,568,284,0,2688,2695,3,570,285,0,2689,2695,3,572,286,0,2690,
        2695,3,574,287,0,2691,2695,3,576,288,0,2692,2695,3,582,291,0,2693,
        2695,3,584,292,0,2694,2683,1,0,0,0,2694,2684,1,0,0,0,2694,2685,1,
        0,0,0,2694,2686,1,0,0,0,2694,2687,1,0,0,0,2694,2688,1,0,0,0,2694,
        2689,1,0,0,0,2694,2690,1,0,0,0,2694,2691,1,0,0,0,2694,2692,1,0,0,
        0,2694,2693,1,0,0,0,2695,553,1,0,0,0,2696,2704,3,560,280,0,2697,
        2704,3,562,281,0,2698,2704,3,564,282,0,2699,2704,3,566,283,0,2700,
        2704,3,558,279,0,2701,2704,3,568,284,0,2702,2704,3,570,285,0,2703,
        2696,1,0,0,0,2703,2697,1,0,0,0,2703,2698,1,0,0,0,2703,2699,1,0,0,
        0,2703,2700,1,0,0,0,2703,2701,1,0,0,0,2703,2702,1,0,0,0,2704,555,
        1,0,0,0,2705,2711,3,560,280,0,2706,2711,3,562,281,0,2707,2711,3,
        564,282,0,2708,2711,3,566,283,0,2709,2711,3,558,279,0,2710,2705,
        1,0,0,0,2710,2706,1,0,0,0,2710,2707,1,0,0,0,2710,2708,1,0,0,0,2710,
        2709,1,0,0,0,2711,557,1,0,0,0,2712,2715,3,578,289,0,2713,2715,3,
        580,290,0,2714,2712,1,0,0,0,2714,2713,1,0,0,0,2715,559,1,0,0,0,2716,
        2717,5,305,0,0,2717,561,1,0,0,0,2718,2719,5,306,0,0,2719,563,1,0,
        0,0,2720,2721,5,307,0,0,2721,565,1,0,0,0,2722,2723,5,308,0,0,2723,
        567,1,0,0,0,2724,2725,5,311,0,0,2725,569,1,0,0,0,2726,2727,5,312,
        0,0,2727,571,1,0,0,0,2728,2729,5,310,0,0,2729,573,1,0,0,0,2730,2731,
        5,315,0,0,2731,575,1,0,0,0,2732,2733,5,313,0,0,2733,577,1,0,0,0,
        2734,2735,7,26,0,0,2735,2736,5,305,0,0,2736,579,1,0,0,0,2737,2738,
        7,26,0,0,2738,2739,5,307,0,0,2739,581,1,0,0,0,2740,2744,5,309,0,
        0,2741,2743,5,309,0,0,2742,2741,1,0,0,0,2743,2746,1,0,0,0,2744,2742,
        1,0,0,0,2744,2745,1,0,0,0,2745,583,1,0,0,0,2746,2744,1,0,0,0,2747,
        2748,5,285,0,0,2748,2749,5,31,0,0,2749,2750,3,586,293,0,2750,2751,
        5,8,0,0,2751,585,1,0,0,0,2752,2764,3,592,296,0,2753,2764,3,594,297,
        0,2754,2764,3,596,298,0,2755,2764,3,598,299,0,2756,2764,3,606,303,
        0,2757,2764,3,600,300,0,2758,2764,3,588,294,0,2759,2764,3,608,304,
        0,2760,2764,3,602,301,0,2761,2764,3,604,302,0,2762,2764,3,584,292,
        0,2763,2752,1,0,0,0,2763,2753,1,0,0,0,2763,2754,1,0,0,0,2763,2755,
        1,0,0,0,2763,2756,1,0,0,0,2763,2757,1,0,0,0,2763,2758,1,0,0,0,2763,
        2759,1,0,0,0,2763,2760,1,0,0,0,2763,2761,1,0,0,0,2763,2762,1,0,0,
        0,2764,587,1,0,0,0,2765,2774,5,29,0,0,2766,2771,3,590,295,0,2767,
        2768,5,9,0,0,2768,2770,3,590,295,0,2769,2767,1,0,0,0,2770,2773,1,
        0,0,0,2771,2769,1,0,0,0,2771,2772,1,0,0,0,2772,2775,1,0,0,0,2773,
        2771,1,0,0,0,2774,2766,1,0,0,0,2774,2775,1,0,0,0,2775,2776,1,0,0,
        0,2776,2777,5,4,0,0,2777,589,1,0,0,0,2778,2779,5,309,0,0,2779,2780,
        5,10,0,0,2780,2781,3,586,293,0,2781,591,1,0,0,0,2782,2791,5,30,0,
        0,2783,2788,3,586,293,0,2784,2785,5,9,0,0,2785,2787,3,586,293,0,
        2786,2784,1,0,0,0,2787,2790,1,0,0,0,2788,2786,1,0,0,0,2788,2789,
        1,0,0,0,2789,2792,1,0,0,0,2790,2788,1,0,0,0,2791,2783,1,0,0,0,2791,
        2792,1,0,0,0,2792,2793,1,0,0,0,2793,2794,5,5,0,0,2794,593,1,0,0,
        0,2795,2796,5,310,0,0,2796,595,1,0,0,0,2797,2798,5,311,0,0,2798,
        597,1,0,0,0,2799,2800,5,315,0,0,2800,599,1,0,0,0,2801,2802,5,183,
        0,0,2802,601,1,0,0,0,2803,2807,5,309,0,0,2804,2806,5,309,0,0,2805,
        2804,1,0,0,0,2806,2809,1,0,0,0,2807,2805,1,0,0,0,2807,2808,1,0,0,
        0,2808,603,1,0,0,0,2809,2807,1,0,0,0,2810,2811,5,312,0,0,2811,605,
        1,0,0,0,2812,2814,5,11,0,0,2813,2812,1,0,0,0,2813,2814,1,0,0,0,2814,
        2815,1,0,0,0,2815,2816,5,305,0,0,2816,607,1,0,0,0,2817,2819,5,11,
        0,0,2818,2817,1,0,0,0,2818,2819,1,0,0,0,2819,2820,1,0,0,0,2820,2821,
        5,307,0,0,2821,609,1,0,0,0,259,617,621,632,645,657,668,678,705,711,
        720,732,747,751,754,760,766,771,777,787,802,807,815,833,848,855,
        861,865,875,884,894,904,913,964,970,997,1003,1015,1022,1032,1037,
        1046,1053,1058,1069,1081,1086,1098,1101,1106,1109,1114,1118,1129,
        1140,1145,1149,1164,1173,1178,1185,1192,1195,1208,1220,1227,1235,
        1238,1243,1254,1272,1278,1287,1292,1302,1310,1313,1322,1328,1336,
        1339,1348,1358,1370,1374,1381,1390,1399,1407,1410,1431,1439,1445,
        1448,1455,1473,1477,1488,1495,1503,1507,1510,1525,1534,1542,1546,
        1550,1554,1564,1573,1576,1581,1585,1588,1592,1596,1606,1615,1624,
        1630,1634,1639,1653,1658,1673,1682,1685,1693,1702,1705,1713,1716,
        1724,1727,1731,1737,1743,1751,1758,1767,1770,1777,1830,1837,1853,
        1859,1870,1879,1883,1886,1889,1896,1913,1923,1931,1934,1939,1953,
        1964,1968,1971,1976,1989,1998,2006,2013,2022,2029,2033,2039,2047,
        2050,2053,2061,2071,2080,2092,2102,2107,2112,2126,2134,2140,2146,
        2153,2159,2169,2175,2181,2184,2190,2200,2215,2225,2236,2250,2270,
        2276,2286,2294,2300,2305,2316,2323,2328,2334,2339,2355,2363,2377,
        2385,2394,2397,2403,2408,2421,2425,2446,2452,2457,2474,2485,2493,
        2503,2509,2515,2519,2525,2531,2535,2547,2557,2562,2571,2575,2577,
        2586,2625,2639,2644,2650,2655,2658,2664,2670,2677,2681,2694,2703,
        2710,2714,2744,2763,2771,2774,2788,2791,2807,2813,2818
    ]

class KqlParser ( Parser ):

    grammarFileName = "Kql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'*'", "'@'", "'|'", "'}'", "']'", "']-'", 
                     "']->'", "')'", "','", "':'", "'-'", "'--'", "'-->'", 
                     "'-['", "'.'", "'..'", "'='", "'=='", "'=~'", "'!='", 
                     "'!~'", "'>'", "'>='", "'<'", "'<--'", "'<-['", "'<='", 
                     "'<>'", "'{'", "'['", "'('", "'%'", "'+'", "';'", "'/'", 
                     "'=>'", "'3Dchart'", "'access'", "'accumulate'", "'aggregations'", 
                     "'alias'", "'all'", "'and'", "'anomalychart'", "'anomalycolumns'", 
                     "'areachart'", "'as'", "'asc'", "'assert-schema'", 
                     "'axes'", "'bagexpansion'", "'barchart'", "'base'", 
                     "'between'", "'bin'", "'bin_legacy'", "'by'", "'card'", 
                     "'cluster'", "'columnchart'", "'consume'", "'contains'", 
                     "'containscs'", "'contains_cs'", "'__contextual_datatable'", 
                     "'count'", "'__crossCluster'", "'__crossDB'", "'database'", 
                     "'datascope'", "'datatable'", "'declare'", "'decodeblocks'", 
                     "'default'", "'delta'", "'desc'", "'distinct'", "'edges'", 
                     "'endswith'", "'endswith_cs'", "'entity_group'", "'evaluate'", 
                     "'execute'", "'__executeAndCache'", "'expandoutput'", 
                     "'extend'", "'externaldata'", "'external_data'", "'facet'", 
                     "'filter'", "'find'", "'first'", "'flags'", "'fork'", 
                     "'from'", "'getschema'", "'granny-asc'", "'granny-desc'", 
                     "'graph-mark-components'", "'graph-match'", "'graph-merge'", 
                     "'graph-shortest-paths'", "'graph-to-table'", "'has'", 
                     "'has_all'", "'has_any'", "'has_cs'", "'hasprefix'", 
                     "'hasprefix_cs'", "'hassuffix'", "'hassuffix_cs'", 
                     "'hidden'", "'hint.concurrency'", "'hint.distribution'", 
                     "'hint.materialized'", "'hint.num_partitions'", "'hint.pass_filters'", 
                     "'hint.pass_filters_column'", "'hint.progressive_top'", 
                     "'hint.remote'", "'hint.shufflekey'", "'hint.spread'", 
                     "'hint.strategy'", "'hot'", "'hotcache'", "'hotdata'", 
                     "'hotindex'", "'id'", "'__id'", "'in'", "'in~'", "'into'", 
                     "'invoke'", "'isfuzzy'", "'__isFuzzy'", "'join'", "'kind'", 
                     "'ladderchart'", "'last'", "'legend'", "'let'", "'like'", 
                     "'likecs'", "'limit'", "'linear'", "'linechart'", "'list'", 
                     "'lookup'", "'log'", "'macro-expand'", "'make-graph'", 
                     "'make-series'", "'map'", "'matches regex'", "'materialize'", 
                     "'materialized-view-combine'", "'mv-apply'", "'mv-expand'", 
                     "'mvapply'", "'mvexpand'", "'nodes'", "'none'", "'nooptimization'", 
                     "'!between'", "'!contains'", "'!contains_cs'", "'!endswith_cs'", 
                     "'!endswith'", "'!has'", "'!has_cs'", "'!hasprefix'", 
                     "'!hasprefix_cs'", "'!hassuffix'", "'!hassuffix_cs'", 
                     "'!in'", "'!in~'", "'!startswith'", "'!startswith_cs'", 
                     "'notcontains'", "'notcontainscs'", "'notlike'", "'notlikecs'", 
                     "'null'", "'nulls'", "'of'", "'on'", "'optional'", 
                     "'or'", "'order'", "'others'", "'output'", "'pack'", 
                     "'panels'", "'parse'", "'parse-kv'", "'parse-where'", 
                     "'partition'", "'__partitionby'", "'partitioned-by'", 
                     "'pattern'", "'__packedColumn'", "'piechart'", "'pivotchart'", 
                     "'plugin'", "'print'", "'project'", "'project-away'", 
                     "'__projectAway'", "'project-keep'", "'project-rename'", 
                     "'project-reorder'", "'project-smart'", "'query_parameters'", 
                     "'range'", "'reduce'", "'regex'", "'relaxed'", "'render'", 
                     "'replace'", "'restrict'", "'sample'", "'sample-distinct'", 
                     "'scan'", "'scatterchart'", "'search'", "'serialize'", 
                     "'series'", "'set'", "'simple'", "'sort'", "'__sourceColumnIndex'", 
                     "'stacked'", "'stacked100'", "'stackedareachart'", 
                     "'startswith'", "'startswith_cs'", "'step'", "'summarize'", 
                     "'table'", "'take'", "'threshold'", "'timechart'", 
                     "'timeline'", "'timepivot'", "'title'", "'to'", "'top'", 
                     "'top-hitters'", "'top-nested'", "'toscalar'", "'totable'", 
                     "'treemap'", "'typeof'", "'union'", "'unstacked'", 
                     "'uuid'", "'view'", "'visible'", "'where'", "'with'", 
                     "'__noWithSource'", "'withsource'", "'with_itemindex'", 
                     "'with_match_id'", "'with_node_id'", "'with_source'", 
                     "'with_step_name'", "'xaxis'", "'xcolumn'", "'xmax'", 
                     "'xmin'", "'xtitle'", "'yaxis'", "'ycolumns'", "'ymax'", 
                     "'ymin'", "'ysplit'", "'ytitle'", "'bool'", "'boolean'", 
                     "'date'", "'datetime'", "'decimal'", "'double'", "'dynamic'", 
                     "'float'", "'guid'", "'int'", "'int8'", "'int16'", 
                     "'int32'", "'int64'", "'long'", "'string'", "'real'", 
                     "'time'", "'timespan'", "'uint'", "'uint8'", "'uint16'", 
                     "'uint32'", "'uint64'", "'ulong'", "'uniqueid'" ]

    symbolicNames = [ "<INVALID>", "ASTERISK", "ATSIGN", "BAR", "CLOSEBRACE", 
                      "CLOSEBRACKET", "CLOSEBRACKET_DASH", "CLOSEBRACKET_DASH_GREATERTHAN", 
                      "CLOSEPAREN", "COMMA", "COLON", "DASH", "DASHDASH", 
                      "DASHDASH_GREATERTHAN", "DASH_OPENBRACKET", "DOT", 
                      "DOTDOT", "EQUAL", "EQUALEQUAL", "EQUALTILDE", "EXCLAIMATIONPOINT_EQUAL", 
                      "EXCLAIMATIONPOINT_TILDE", "GREATERTHAN", "GREATERTHAN_EQUAL", 
                      "LESSTHAN", "LESSTHAN_DASHDASH", "LESSTHAN_DASH_OPENBRACKET", 
                      "LESSTHAN_EQUAL", "LESSTHAN_GREATERTHAN", "OPENBRACE", 
                      "OPENBRACKET", "OPENPAREN", "PERCENTSIGN", "PLUS", 
                      "SEMICOLON", "SLASH", "EQUAL_GREATERTHAN", "CHART3D_", 
                      "ACCESS", "ACCUMULATE", "AGGREGATIONS", "ALIAS", "ALL", 
                      "AND", "ANOMALYCHART", "ANOMALYCOLUMNS", "AREACHART", 
                      "AS", "ASC", "ASSERTSCHEMA", "AXES", "BAGEXPANSION", 
                      "BARCHART", "BASE", "BETWEEN", "BIN", "BIN_LEGACY", 
                      "BY", "CARD", "CLUSTER", "COLUMNCHART", "CONSUME", 
                      "CONTAINS", "CONTAINSCS", "CONTAINS_CS", "CONTEXTUAL_DATATABLE", 
                      "COUNT", "CROSSCLUSTER__", "CROSSDB__", "DATABASE", 
                      "DATASCOPE", "DATATABLE", "DECLARE", "DECODEBLOCKS", 
                      "DEFAULT", "DELTA", "DESC", "DISTINCT", "EDGES", "ENDSWITH", 
                      "ENDSWITH_CS", "ENTITYGROUP", "EVALUATE", "EXECUTE", 
                      "EXECUTE_AND_CACHE", "EXPANDOUTPUT", "EXTEND", "EXTERNALDATA", 
                      "EXTERNAL_DATA", "FACET", "FILTER", "FIND", "FIRST", 
                      "FLAGS", "FORK", "FROM", "GETSCHEMA", "GRANNYASC", 
                      "GRANNYDESC", "GRAPHMARKCOMPONENTS", "GRAPHMATCH", 
                      "GRAPHMERGE", "GRAPHSHORTESTPATHS", "GRAPHTOTABLE", 
                      "HAS", "HAS_ALL", "HAS_ANY", "HAS_CS", "HASPREFIX", 
                      "HASPREFIX_CS", "HASSUFFIX", "HASSUFFIX_CS", "HIDDEN_", 
                      "HINT_CONCURRENCY", "HINT_DISTRIBUTION", "HINT_MATERIALIZED", 
                      "HINT_NUM_PARTITIONS", "HINT_PASS_FILTERS", "HINT_PASS_FILTERS_COLUMN", 
                      "HINT_PROGRESSIVE_TOP", "HINT_REMOTE", "HINT_SUFFLEKEY", 
                      "HINT_SPREAD", "HINT_STRATEGY", "HOT", "HOTCACHE", 
                      "HOTDATA", "HOTINDEX", "ID", "ID__", "IN", "IN_CI", 
                      "INTO", "INVOKE", "ISFUZZY", "ISFUZZY__", "JOIN", 
                      "KIND", "LADDERCHART", "LAST", "LEGEND", "LET", "LIKE", 
                      "LIKECS", "LIMIT", "LINEAR", "LINECHART", "LIST", 
                      "LOOKUP", "LOG", "MACROEXPAND", "MAKEGRAPH", "MAKESERIES", 
                      "MAP", "MATCHES_REGEX", "MATERIALIZE", "MATERIALIZED_VIEW_COMBINE", 
                      "MV_APPLY", "MV_EXPAND", "MVAPPLY", "MVEXPAND", "NODES", 
                      "NONE", "NOOPTIMIZATION", "NOT_BETWEEN", "NOT_CONTAINS", 
                      "NOT_CONTAINS_CS", "NOT_ENDSWITH_CS", "NOT_ENDSWITH", 
                      "NOT_HAS", "NOT_HAS_CS", "NOT_HASPREFIX", "NOT_HASPREFIX_CS", 
                      "NOT_HASSUFFIX", "NOT_HASSUFFIX_CS", "NOT_IN", "NOT_IN_CI", 
                      "NOT_STARTSWITH", "NOT_STARTSWITH_CS", "NOTCONTAINS", 
                      "NOTCONTAINSCS", "NOTLIKE", "NOTLIKECS", "NULL", "NULLS", 
                      "OF", "ON", "OPTIONAL", "OR", "ORDER", "OTHERS", "OUTPUT", 
                      "PACK", "PANELS", "PARSE", "PARSEKV", "PARSEWHERE", 
                      "PARTITION", "PARTITIONBY", "PARTITIONEDBY", "PATTERN", 
                      "PACKEDCOLUMN__", "PIECHART", "PIVOTCHART", "PLUGIN", 
                      "PRINT", "PROJECT", "PROJECTAWAY", "PROJECTAWAY_", 
                      "PROJECTKEEP", "PROJECTRENAME", "PROJECTREORDER", 
                      "PROJECTSMART", "QUERYPARAMETERS", "RANGE", "REDUCE", 
                      "REGEX", "RELAXED", "RENDER", "REPLACE", "RESTRICT", 
                      "SAMPLE", "SAMPLE_DISTINCT", "SCAN", "SCATTERCHART", 
                      "SEARCH", "SERIALIZE", "SERIES", "SET", "SIMPLE", 
                      "SORT", "SOURCECOLUMNINDEX__", "STACKED", "STACKED100", 
                      "STACKEDAREACHART", "STARTSWITH", "STARTSWITH_CS", 
                      "STEP", "SUMMARIZE", "TABLE", "TAKE", "THRESHOLD", 
                      "TIMECHART", "TIMELINE", "TIMEPIVOT", "TITLE", "TO", 
                      "TOP", "TOP_HITTERS", "TOP_NESTED", "TOSCALAR", "TOTABLE", 
                      "TREEMAP", "TYPEOF", "UNION", "UNSTACKED", "UUID", 
                      "VIEW", "VISIBLE", "WHERE", "WITH", "WITHNOSOURCE__", 
                      "WITHSOURCE", "WITH_ITEM_INDEX", "WITH_MATCH_ID", 
                      "WITH_NODE_ID", "WITH_SOURCE", "WITH_STEP_NAME", "XAXIS", 
                      "XCOLUMN", "XMAX", "XMIN", "XTITLE", "YAXIS", "YCOLUMNS", 
                      "YMAX", "YMIN", "YSPLIT", "YTITLE", "BOOL", "BOOLEAN", 
                      "DATE", "DATETIME", "DECIMAL", "DOUBLE", "DYNAMIC", 
                      "FLOAT", "GUID", "INT", "INT8", "INT16", "INT32", 
                      "INT64", "LONG", "STRING", "REAL", "TIME", "TIMESPAN", 
                      "UINT", "UINT8", "UINT16", "UINT32", "UINT64", "ULONG", 
                      "UNIQUEID", "LONGLITERAL", "INTLITERAL", "REALLITERAL", 
                      "DECIMALLITERAL", "STRINGLITERAL", "BOOLEANLITERAL", 
                      "DATETIMELITERAL", "TIMESPANLITERAL", "TYPELITERAL", 
                      "RAWGUIDLITERAL", "GUIDLITERAL", "IDENTIFIER", "WHITESPACE", 
                      "COMMENT" ]

    RULE_top = 0
    RULE_query = 1
    RULE_statement = 2
    RULE_aliasDatabaseStatement = 3
    RULE_letStatement = 4
    RULE_letVariableDeclaration = 5
    RULE_letFunctionDeclaration = 6
    RULE_letViewDeclaration = 7
    RULE_letViewParameterList = 8
    RULE_letMaterializeDeclaration = 9
    RULE_letEntityGroupDeclaration = 10
    RULE_letFunctionParameterList = 11
    RULE_scalarParameter = 12
    RULE_scalarParameterDefault = 13
    RULE_tabularParameter = 14
    RULE_tabularParameterOpenSchema = 15
    RULE_tabularParameterRowSchema = 16
    RULE_tabularParameterRowSchemaColumnDeclaration = 17
    RULE_letFunctionBody = 18
    RULE_letFunctionBodyStatement = 19
    RULE_declarePatternStatement = 20
    RULE_declarePatternDefinition = 21
    RULE_declarePatternParameterList = 22
    RULE_declarePatternParameter = 23
    RULE_declarePatternPathParameter = 24
    RULE_declarePatternRule = 25
    RULE_declarePatternRuleArgumentList = 26
    RULE_declarePatternRulePathArgument = 27
    RULE_declarePatternRuleArgument = 28
    RULE_declarePatternBody = 29
    RULE_restrictAccessStatement = 30
    RULE_restrictAccessStatementEntity = 31
    RULE_setStatement = 32
    RULE_setStatementOptionValue = 33
    RULE_declareQueryParametersStatement = 34
    RULE_declareQueryParametersStatementParameter = 35
    RULE_queryStatement = 36
    RULE_expression = 37
    RULE_pipeExpression = 38
    RULE_pipedOperator = 39
    RULE_pipeSubExpression = 40
    RULE_beforePipeExpression = 41
    RULE_afterPipeOperator = 42
    RULE_beforeOrAfterPipeOperator = 43
    RULE_forkPipeOperator = 44
    RULE_asOperator = 45
    RULE_assertSchemaOperator = 46
    RULE_consumeOperator = 47
    RULE_countOperator = 48
    RULE_countOperatorAsClause = 49
    RULE_distinctOperator = 50
    RULE_distinctOperatorStarTarget = 51
    RULE_distinctOperatorColumnListTarget = 52
    RULE_evaluateOperator = 53
    RULE_evaluateOperatorSchemaClause = 54
    RULE_extendOperator = 55
    RULE_executeAndCacheOperator = 56
    RULE_facetByOperator = 57
    RULE_facetByOperatorWithOperatorClause = 58
    RULE_facetByOperatorWithExpressionClause = 59
    RULE_findOperator = 60
    RULE_findOperatorParametersWhereClause = 61
    RULE_findOperatorInClause = 62
    RULE_findOperatorProjectClause = 63
    RULE_findOperatorProjectExpression = 64
    RULE_findOperatorColumnExpression = 65
    RULE_findOperatorOptionalColumnType = 66
    RULE_findOperatorPackExpression = 67
    RULE_findOperatorProjectSmartClause = 68
    RULE_findOperatorProjectAwayClause = 69
    RULE_findOperatorProjectAwayStar = 70
    RULE_findOperatorProjectAwayColumnList = 71
    RULE_findOperatorSource = 72
    RULE_findOperatorSourceEntityExpression = 73
    RULE_forkOperator = 74
    RULE_forkOperatorFork = 75
    RULE_forkOperatorExpressionName = 76
    RULE_forkOperatorExpression = 77
    RULE_forkOperatorPipedOperator = 78
    RULE_getSchemaOperator = 79
    RULE_graphMarkComponentsOperator = 80
    RULE_graphMatchOperator = 81
    RULE_graphMatchPattern = 82
    RULE_graphMatchPatternNode = 83
    RULE_graphMatchPatternUnnamedEdge = 84
    RULE_graphMatchPatternNamedEdge = 85
    RULE_graphMatchPatternRange = 86
    RULE_graphMatchWhereClause = 87
    RULE_graphMatchProjectClause = 88
    RULE_graphMergeOperator = 89
    RULE_graphToTableOperator = 90
    RULE_graphToTableOutput = 91
    RULE_graphToTableAsClause = 92
    RULE_graphShortestPathsOperator = 93
    RULE_invokeOperator = 94
    RULE_joinOperator = 95
    RULE_joinOperatorOnClause = 96
    RULE_joinOperatorWhereClause = 97
    RULE_lookupOperator = 98
    RULE_macroExpandOperator = 99
    RULE_macroExpandEntityGroup = 100
    RULE_entityGroupExpression = 101
    RULE_makeGraphOperator = 102
    RULE_makeGraphIdClause = 103
    RULE_makeGraphTablesAndKeysClause = 104
    RULE_makeGraphPartitionedByClause = 105
    RULE_makeSeriesOperator = 106
    RULE_makeSeriesOperatorOnClause = 107
    RULE_makeSeriesOperatorAggregation = 108
    RULE_makeSeriesOperatorExpressionDefaultClause = 109
    RULE_makeSeriesOperatorInRangeClause = 110
    RULE_makeSeriesOperatorFromToStepClause = 111
    RULE_makeSeriesOperatorByClause = 112
    RULE_mvapplyOperator = 113
    RULE_mvapplyOperatorLimitClause = 114
    RULE_mvapplyOperatorIdClause = 115
    RULE_mvapplyOperatorExpression = 116
    RULE_mvapplyOperatorExpressionToClause = 117
    RULE_mvexpandOperator = 118
    RULE_mvexpandOperatorExpression = 119
    RULE_parseOperator = 120
    RULE_parseOperatorKindClause = 121
    RULE_parseOperatorFlagsClause = 122
    RULE_parseOperatorNameAndOptionalType = 123
    RULE_parseOperatorPattern = 124
    RULE_parseOperatorPatternSegment = 125
    RULE_parseWhereOperator = 126
    RULE_parseKvOperator = 127
    RULE_parseKvWithClause = 128
    RULE_partitionOperator = 129
    RULE_partitionOperatorInClause = 130
    RULE_partitionOperatorSubExpressionBody = 131
    RULE_partitionOperatorFullExpressionBody = 132
    RULE_partitionByOperator = 133
    RULE_partitionByOperatorIdClause = 134
    RULE_printOperator = 135
    RULE_projectAwayOperator = 136
    RULE_projectKeepOperator = 137
    RULE_projectOperator = 138
    RULE_projectRenameOperator = 139
    RULE_projectReorderOperator = 140
    RULE_projectReorderExpression = 141
    RULE_reduceByOperator = 142
    RULE_reduceByWithClause = 143
    RULE_renderOperator = 144
    RULE_renderOperatorWithClause = 145
    RULE_renderOperatorLegacyPropertyList = 146
    RULE_renderOperatorProperty = 147
    RULE_renderPropertyNameList = 148
    RULE_renderOperatorLegacyProperty = 149
    RULE_sampleDistinctOperator = 150
    RULE_sampleOperator = 151
    RULE_scanOperator = 152
    RULE_scanOperatorOrderByClause = 153
    RULE_scanOperatorPartitionByClause = 154
    RULE_scanOperatorDeclareClause = 155
    RULE_scanOperatorStep = 156
    RULE_scanOperatorStepOutputClause = 157
    RULE_scanOperatorBody = 158
    RULE_scanOperatorAssignment = 159
    RULE_searchOperator = 160
    RULE_searchOperatorStarAndExpression = 161
    RULE_searchOperatorInClause = 162
    RULE_serializeOperator = 163
    RULE_sortOperator = 164
    RULE_orderedExpression = 165
    RULE_sortOrdering = 166
    RULE_summarizeOperator = 167
    RULE_summarizeOperatorByClause = 168
    RULE_summarizeOperatorLegacyBinClause = 169
    RULE_takeOperator = 170
    RULE_topOperator = 171
    RULE_topHittersOperator = 172
    RULE_topHittersOperatorByClause = 173
    RULE_topNestedOperator = 174
    RULE_topNestedOperatorPart = 175
    RULE_topNestedOperatorWithOthersClause = 176
    RULE_unionOperator = 177
    RULE_unionOperatorExpression = 178
    RULE_whereOperator = 179
    RULE_contextualSubExpression = 180
    RULE_contextualPipeExpression = 181
    RULE_contextualPipeExpressionPipedOperator = 182
    RULE_strictQueryOperatorParameter = 183
    RULE_relaxedQueryOperatorParameter = 184
    RULE_queryOperatorProperty = 185
    RULE_namedExpression = 186
    RULE_namedExpressionNameClause = 187
    RULE_namedExpressionNameList = 188
    RULE_scopedFunctionCallExpression = 189
    RULE_unnamedExpression = 190
    RULE_logicalOrExpression = 191
    RULE_logicalOrOperation = 192
    RULE_logicalAndExpression = 193
    RULE_logicalAndOperation = 194
    RULE_equalityExpression = 195
    RULE_equalsEqualityExpression = 196
    RULE_listEqualityExpression = 197
    RULE_betweenEqualityExpression = 198
    RULE_starEqualityExpression = 199
    RULE_relationalExpression = 200
    RULE_additiveExpression = 201
    RULE_additiveOperation = 202
    RULE_multiplicativeExpression = 203
    RULE_multiplicativeOperation = 204
    RULE_stringOperatorExpression = 205
    RULE_stringBinaryOperatorExpression = 206
    RULE_stringBinaryOperation = 207
    RULE_stringBinaryOperator = 208
    RULE_stringStarOperatorExpression = 209
    RULE_invocationExpression = 210
    RULE_functionCallOrPathExpression = 211
    RULE_functionCallOrPathRoot = 212
    RULE_functionCallOrPathPathExpression = 213
    RULE_functionCallOrPathOperation = 214
    RULE_functionalCallOrPathPathOperation = 215
    RULE_functionCallOrPathElementOperation = 216
    RULE_legacyFunctionCallOrPathElementOperation = 217
    RULE_toScalarExpression = 218
    RULE_toTableExpression = 219
    RULE_noOptimizationParameter = 220
    RULE_dotCompositeFunctionCallExpression = 221
    RULE_dotCompositeFunctionCallOperation = 222
    RULE_functionCallExpression = 223
    RULE_namedFunctionCallExpression = 224
    RULE_argumentExpression = 225
    RULE_countExpression = 226
    RULE_starExpression = 227
    RULE_primaryExpression = 228
    RULE_nameReferenceWithDataScope = 229
    RULE_dataScopeClause = 230
    RULE_parenthesizedExpression = 231
    RULE_rangeExpression = 232
    RULE_entityExpression = 233
    RULE_entityPathOrElementExpression = 234
    RULE_entityPathOrElementOperator = 235
    RULE_entityPathOperator = 236
    RULE_entityElementOperator = 237
    RULE_legacyEntityPathElementOperator = 238
    RULE_entityName = 239
    RULE_entityNameReference = 240
    RULE_atSignName = 241
    RULE_extendedPathName = 242
    RULE_wildcardedEntityExpression = 243
    RULE_wildcardedPathExpression = 244
    RULE_wildcardedPathName = 245
    RULE_contextualDataTableExpression = 246
    RULE_dataTableExpression = 247
    RULE_rowSchema = 248
    RULE_rowSchemaColumnDeclaration = 249
    RULE_externalDataExpression = 250
    RULE_externalDataWithClause = 251
    RULE_externalDataWithClauseProperty = 252
    RULE_materializedViewCombineExpression = 253
    RULE_materializeViewCombineBaseClause = 254
    RULE_materializedViewCombineDeltaClause = 255
    RULE_materializedViewCombineAggregationsClause = 256
    RULE_scalarType = 257
    RULE_extendedScalarType = 258
    RULE_parameterName = 259
    RULE_simpleNameReference = 260
    RULE_extendedNameReference = 261
    RULE_wildcardedNameReference = 262
    RULE_simpleOrWildcardedNameReference = 263
    RULE_identifierName = 264
    RULE_keywordName = 265
    RULE_extendedKeywordName = 266
    RULE_escapedName = 267
    RULE_identifierOrKeywordName = 268
    RULE_identifierOrKeywordOrEscapedName = 269
    RULE_identifierOrExtendedKeywordOrEscapedName = 270
    RULE_identifierOrExtendedKeywordName = 271
    RULE_wildcardedName = 272
    RULE_wildcardedNamePrefix = 273
    RULE_wildcardedNameSegment = 274
    RULE_literalExpression = 275
    RULE_unsignedLiteralExpression = 276
    RULE_numberLikeLiteralExpression = 277
    RULE_numericLiteralExpression = 278
    RULE_signedLiteralExpression = 279
    RULE_longLiteralExpression = 280
    RULE_intLiteralExpression = 281
    RULE_realLiteralExpression = 282
    RULE_decimalLiteralExpression = 283
    RULE_dateTimeLiteralExpression = 284
    RULE_timeSpanLiteralExpression = 285
    RULE_booleanLiteralExpression = 286
    RULE_guidLiteralExpression = 287
    RULE_typeLiteralExpression = 288
    RULE_signedLongLiteralExpression = 289
    RULE_signedRealLiteralExpression = 290
    RULE_stringLiteralExpression = 291
    RULE_dynamicLiteralExpression = 292
    RULE_jsonValue = 293
    RULE_jsonObject = 294
    RULE_jsonPair = 295
    RULE_jsonArray = 296
    RULE_jsonBoolean = 297
    RULE_jsonDateTime = 298
    RULE_jsonGuid = 299
    RULE_jsonNull = 300
    RULE_jsonString = 301
    RULE_jsonTimeSpan = 302
    RULE_jsonLong = 303
    RULE_jsonReal = 304

    ruleNames =  [ "top", "query", "statement", "aliasDatabaseStatement", 
                   "letStatement", "letVariableDeclaration", "letFunctionDeclaration", 
                   "letViewDeclaration", "letViewParameterList", "letMaterializeDeclaration", 
                   "letEntityGroupDeclaration", "letFunctionParameterList", 
                   "scalarParameter", "scalarParameterDefault", "tabularParameter", 
                   "tabularParameterOpenSchema", "tabularParameterRowSchema", 
                   "tabularParameterRowSchemaColumnDeclaration", "letFunctionBody", 
                   "letFunctionBodyStatement", "declarePatternStatement", 
                   "declarePatternDefinition", "declarePatternParameterList", 
                   "declarePatternParameter", "declarePatternPathParameter", 
                   "declarePatternRule", "declarePatternRuleArgumentList", 
                   "declarePatternRulePathArgument", "declarePatternRuleArgument", 
                   "declarePatternBody", "restrictAccessStatement", "restrictAccessStatementEntity", 
                   "setStatement", "setStatementOptionValue", "declareQueryParametersStatement", 
                   "declareQueryParametersStatementParameter", "queryStatement", 
                   "expression", "pipeExpression", "pipedOperator", "pipeSubExpression", 
                   "beforePipeExpression", "afterPipeOperator", "beforeOrAfterPipeOperator", 
                   "forkPipeOperator", "asOperator", "assertSchemaOperator", 
                   "consumeOperator", "countOperator", "countOperatorAsClause", 
                   "distinctOperator", "distinctOperatorStarTarget", "distinctOperatorColumnListTarget", 
                   "evaluateOperator", "evaluateOperatorSchemaClause", "extendOperator", 
                   "executeAndCacheOperator", "facetByOperator", "facetByOperatorWithOperatorClause", 
                   "facetByOperatorWithExpressionClause", "findOperator", 
                   "findOperatorParametersWhereClause", "findOperatorInClause", 
                   "findOperatorProjectClause", "findOperatorProjectExpression", 
                   "findOperatorColumnExpression", "findOperatorOptionalColumnType", 
                   "findOperatorPackExpression", "findOperatorProjectSmartClause", 
                   "findOperatorProjectAwayClause", "findOperatorProjectAwayStar", 
                   "findOperatorProjectAwayColumnList", "findOperatorSource", 
                   "findOperatorSourceEntityExpression", "forkOperator", 
                   "forkOperatorFork", "forkOperatorExpressionName", "forkOperatorExpression", 
                   "forkOperatorPipedOperator", "getSchemaOperator", "graphMarkComponentsOperator", 
                   "graphMatchOperator", "graphMatchPattern", "graphMatchPatternNode", 
                   "graphMatchPatternUnnamedEdge", "graphMatchPatternNamedEdge", 
                   "graphMatchPatternRange", "graphMatchWhereClause", "graphMatchProjectClause", 
                   "graphMergeOperator", "graphToTableOperator", "graphToTableOutput", 
                   "graphToTableAsClause", "graphShortestPathsOperator", 
                   "invokeOperator", "joinOperator", "joinOperatorOnClause", 
                   "joinOperatorWhereClause", "lookupOperator", "macroExpandOperator", 
                   "macroExpandEntityGroup", "entityGroupExpression", "makeGraphOperator", 
                   "makeGraphIdClause", "makeGraphTablesAndKeysClause", 
                   "makeGraphPartitionedByClause", "makeSeriesOperator", 
                   "makeSeriesOperatorOnClause", "makeSeriesOperatorAggregation", 
                   "makeSeriesOperatorExpressionDefaultClause", "makeSeriesOperatorInRangeClause", 
                   "makeSeriesOperatorFromToStepClause", "makeSeriesOperatorByClause", 
                   "mvapplyOperator", "mvapplyOperatorLimitClause", "mvapplyOperatorIdClause", 
                   "mvapplyOperatorExpression", "mvapplyOperatorExpressionToClause", 
                   "mvexpandOperator", "mvexpandOperatorExpression", "parseOperator", 
                   "parseOperatorKindClause", "parseOperatorFlagsClause", 
                   "parseOperatorNameAndOptionalType", "parseOperatorPattern", 
                   "parseOperatorPatternSegment", "parseWhereOperator", 
                   "parseKvOperator", "parseKvWithClause", "partitionOperator", 
                   "partitionOperatorInClause", "partitionOperatorSubExpressionBody", 
                   "partitionOperatorFullExpressionBody", "partitionByOperator", 
                   "partitionByOperatorIdClause", "printOperator", "projectAwayOperator", 
                   "projectKeepOperator", "projectOperator", "projectRenameOperator", 
                   "projectReorderOperator", "projectReorderExpression", 
                   "reduceByOperator", "reduceByWithClause", "renderOperator", 
                   "renderOperatorWithClause", "renderOperatorLegacyPropertyList", 
                   "renderOperatorProperty", "renderPropertyNameList", "renderOperatorLegacyProperty", 
                   "sampleDistinctOperator", "sampleOperator", "scanOperator", 
                   "scanOperatorOrderByClause", "scanOperatorPartitionByClause", 
                   "scanOperatorDeclareClause", "scanOperatorStep", "scanOperatorStepOutputClause", 
                   "scanOperatorBody", "scanOperatorAssignment", "searchOperator", 
                   "searchOperatorStarAndExpression", "searchOperatorInClause", 
                   "serializeOperator", "sortOperator", "orderedExpression", 
                   "sortOrdering", "summarizeOperator", "summarizeOperatorByClause", 
                   "summarizeOperatorLegacyBinClause", "takeOperator", "topOperator", 
                   "topHittersOperator", "topHittersOperatorByClause", "topNestedOperator", 
                   "topNestedOperatorPart", "topNestedOperatorWithOthersClause", 
                   "unionOperator", "unionOperatorExpression", "whereOperator", 
                   "contextualSubExpression", "contextualPipeExpression", 
                   "contextualPipeExpressionPipedOperator", "strictQueryOperatorParameter", 
                   "relaxedQueryOperatorParameter", "queryOperatorProperty", 
                   "namedExpression", "namedExpressionNameClause", "namedExpressionNameList", 
                   "scopedFunctionCallExpression", "unnamedExpression", 
                   "logicalOrExpression", "logicalOrOperation", "logicalAndExpression", 
                   "logicalAndOperation", "equalityExpression", "equalsEqualityExpression", 
                   "listEqualityExpression", "betweenEqualityExpression", 
                   "starEqualityExpression", "relationalExpression", "additiveExpression", 
                   "additiveOperation", "multiplicativeExpression", "multiplicativeOperation", 
                   "stringOperatorExpression", "stringBinaryOperatorExpression", 
                   "stringBinaryOperation", "stringBinaryOperator", "stringStarOperatorExpression", 
                   "invocationExpression", "functionCallOrPathExpression", 
                   "functionCallOrPathRoot", "functionCallOrPathPathExpression", 
                   "functionCallOrPathOperation", "functionalCallOrPathPathOperation", 
                   "functionCallOrPathElementOperation", "legacyFunctionCallOrPathElementOperation", 
                   "toScalarExpression", "toTableExpression", "noOptimizationParameter", 
                   "dotCompositeFunctionCallExpression", "dotCompositeFunctionCallOperation", 
                   "functionCallExpression", "namedFunctionCallExpression", 
                   "argumentExpression", "countExpression", "starExpression", 
                   "primaryExpression", "nameReferenceWithDataScope", "dataScopeClause", 
                   "parenthesizedExpression", "rangeExpression", "entityExpression", 
                   "entityPathOrElementExpression", "entityPathOrElementOperator", 
                   "entityPathOperator", "entityElementOperator", "legacyEntityPathElementOperator", 
                   "entityName", "entityNameReference", "atSignName", "extendedPathName", 
                   "wildcardedEntityExpression", "wildcardedPathExpression", 
                   "wildcardedPathName", "contextualDataTableExpression", 
                   "dataTableExpression", "rowSchema", "rowSchemaColumnDeclaration", 
                   "externalDataExpression", "externalDataWithClause", "externalDataWithClauseProperty", 
                   "materializedViewCombineExpression", "materializeViewCombineBaseClause", 
                   "materializedViewCombineDeltaClause", "materializedViewCombineAggregationsClause", 
                   "scalarType", "extendedScalarType", "parameterName", 
                   "simpleNameReference", "extendedNameReference", "wildcardedNameReference", 
                   "simpleOrWildcardedNameReference", "identifierName", 
                   "keywordName", "extendedKeywordName", "escapedName", 
                   "identifierOrKeywordName", "identifierOrKeywordOrEscapedName", 
                   "identifierOrExtendedKeywordOrEscapedName", "identifierOrExtendedKeywordName", 
                   "wildcardedName", "wildcardedNamePrefix", "wildcardedNameSegment", 
                   "literalExpression", "unsignedLiteralExpression", "numberLikeLiteralExpression", 
                   "numericLiteralExpression", "signedLiteralExpression", 
                   "longLiteralExpression", "intLiteralExpression", "realLiteralExpression", 
                   "decimalLiteralExpression", "dateTimeLiteralExpression", 
                   "timeSpanLiteralExpression", "booleanLiteralExpression", 
                   "guidLiteralExpression", "typeLiteralExpression", "signedLongLiteralExpression", 
                   "signedRealLiteralExpression", "stringLiteralExpression", 
                   "dynamicLiteralExpression", "jsonValue", "jsonObject", 
                   "jsonPair", "jsonArray", "jsonBoolean", "jsonDateTime", 
                   "jsonGuid", "jsonNull", "jsonString", "jsonTimeSpan", 
                   "jsonLong", "jsonReal" ]

    EOF = Token.EOF
    ASTERISK=1
    ATSIGN=2
    BAR=3
    CLOSEBRACE=4
    CLOSEBRACKET=5
    CLOSEBRACKET_DASH=6
    CLOSEBRACKET_DASH_GREATERTHAN=7
    CLOSEPAREN=8
    COMMA=9
    COLON=10
    DASH=11
    DASHDASH=12
    DASHDASH_GREATERTHAN=13
    DASH_OPENBRACKET=14
    DOT=15
    DOTDOT=16
    EQUAL=17
    EQUALEQUAL=18
    EQUALTILDE=19
    EXCLAIMATIONPOINT_EQUAL=20
    EXCLAIMATIONPOINT_TILDE=21
    GREATERTHAN=22
    GREATERTHAN_EQUAL=23
    LESSTHAN=24
    LESSTHAN_DASHDASH=25
    LESSTHAN_DASH_OPENBRACKET=26
    LESSTHAN_EQUAL=27
    LESSTHAN_GREATERTHAN=28
    OPENBRACE=29
    OPENBRACKET=30
    OPENPAREN=31
    PERCENTSIGN=32
    PLUS=33
    SEMICOLON=34
    SLASH=35
    EQUAL_GREATERTHAN=36
    CHART3D_=37
    ACCESS=38
    ACCUMULATE=39
    AGGREGATIONS=40
    ALIAS=41
    ALL=42
    AND=43
    ANOMALYCHART=44
    ANOMALYCOLUMNS=45
    AREACHART=46
    AS=47
    ASC=48
    ASSERTSCHEMA=49
    AXES=50
    BAGEXPANSION=51
    BARCHART=52
    BASE=53
    BETWEEN=54
    BIN=55
    BIN_LEGACY=56
    BY=57
    CARD=58
    CLUSTER=59
    COLUMNCHART=60
    CONSUME=61
    CONTAINS=62
    CONTAINSCS=63
    CONTAINS_CS=64
    CONTEXTUAL_DATATABLE=65
    COUNT=66
    CROSSCLUSTER__=67
    CROSSDB__=68
    DATABASE=69
    DATASCOPE=70
    DATATABLE=71
    DECLARE=72
    DECODEBLOCKS=73
    DEFAULT=74
    DELTA=75
    DESC=76
    DISTINCT=77
    EDGES=78
    ENDSWITH=79
    ENDSWITH_CS=80
    ENTITYGROUP=81
    EVALUATE=82
    EXECUTE=83
    EXECUTE_AND_CACHE=84
    EXPANDOUTPUT=85
    EXTEND=86
    EXTERNALDATA=87
    EXTERNAL_DATA=88
    FACET=89
    FILTER=90
    FIND=91
    FIRST=92
    FLAGS=93
    FORK=94
    FROM=95
    GETSCHEMA=96
    GRANNYASC=97
    GRANNYDESC=98
    GRAPHMARKCOMPONENTS=99
    GRAPHMATCH=100
    GRAPHMERGE=101
    GRAPHSHORTESTPATHS=102
    GRAPHTOTABLE=103
    HAS=104
    HAS_ALL=105
    HAS_ANY=106
    HAS_CS=107
    HASPREFIX=108
    HASPREFIX_CS=109
    HASSUFFIX=110
    HASSUFFIX_CS=111
    HIDDEN_=112
    HINT_CONCURRENCY=113
    HINT_DISTRIBUTION=114
    HINT_MATERIALIZED=115
    HINT_NUM_PARTITIONS=116
    HINT_PASS_FILTERS=117
    HINT_PASS_FILTERS_COLUMN=118
    HINT_PROGRESSIVE_TOP=119
    HINT_REMOTE=120
    HINT_SUFFLEKEY=121
    HINT_SPREAD=122
    HINT_STRATEGY=123
    HOT=124
    HOTCACHE=125
    HOTDATA=126
    HOTINDEX=127
    ID=128
    ID__=129
    IN=130
    IN_CI=131
    INTO=132
    INVOKE=133
    ISFUZZY=134
    ISFUZZY__=135
    JOIN=136
    KIND=137
    LADDERCHART=138
    LAST=139
    LEGEND=140
    LET=141
    LIKE=142
    LIKECS=143
    LIMIT=144
    LINEAR=145
    LINECHART=146
    LIST=147
    LOOKUP=148
    LOG=149
    MACROEXPAND=150
    MAKEGRAPH=151
    MAKESERIES=152
    MAP=153
    MATCHES_REGEX=154
    MATERIALIZE=155
    MATERIALIZED_VIEW_COMBINE=156
    MV_APPLY=157
    MV_EXPAND=158
    MVAPPLY=159
    MVEXPAND=160
    NODES=161
    NONE=162
    NOOPTIMIZATION=163
    NOT_BETWEEN=164
    NOT_CONTAINS=165
    NOT_CONTAINS_CS=166
    NOT_ENDSWITH_CS=167
    NOT_ENDSWITH=168
    NOT_HAS=169
    NOT_HAS_CS=170
    NOT_HASPREFIX=171
    NOT_HASPREFIX_CS=172
    NOT_HASSUFFIX=173
    NOT_HASSUFFIX_CS=174
    NOT_IN=175
    NOT_IN_CI=176
    NOT_STARTSWITH=177
    NOT_STARTSWITH_CS=178
    NOTCONTAINS=179
    NOTCONTAINSCS=180
    NOTLIKE=181
    NOTLIKECS=182
    NULL=183
    NULLS=184
    OF=185
    ON=186
    OPTIONAL=187
    OR=188
    ORDER=189
    OTHERS=190
    OUTPUT=191
    PACK=192
    PANELS=193
    PARSE=194
    PARSEKV=195
    PARSEWHERE=196
    PARTITION=197
    PARTITIONBY=198
    PARTITIONEDBY=199
    PATTERN=200
    PACKEDCOLUMN__=201
    PIECHART=202
    PIVOTCHART=203
    PLUGIN=204
    PRINT=205
    PROJECT=206
    PROJECTAWAY=207
    PROJECTAWAY_=208
    PROJECTKEEP=209
    PROJECTRENAME=210
    PROJECTREORDER=211
    PROJECTSMART=212
    QUERYPARAMETERS=213
    RANGE=214
    REDUCE=215
    REGEX=216
    RELAXED=217
    RENDER=218
    REPLACE=219
    RESTRICT=220
    SAMPLE=221
    SAMPLE_DISTINCT=222
    SCAN=223
    SCATTERCHART=224
    SEARCH=225
    SERIALIZE=226
    SERIES=227
    SET=228
    SIMPLE=229
    SORT=230
    SOURCECOLUMNINDEX__=231
    STACKED=232
    STACKED100=233
    STACKEDAREACHART=234
    STARTSWITH=235
    STARTSWITH_CS=236
    STEP=237
    SUMMARIZE=238
    TABLE=239
    TAKE=240
    THRESHOLD=241
    TIMECHART=242
    TIMELINE=243
    TIMEPIVOT=244
    TITLE=245
    TO=246
    TOP=247
    TOP_HITTERS=248
    TOP_NESTED=249
    TOSCALAR=250
    TOTABLE=251
    TREEMAP=252
    TYPEOF=253
    UNION=254
    UNSTACKED=255
    UUID=256
    VIEW=257
    VISIBLE=258
    WHERE=259
    WITH=260
    WITHNOSOURCE__=261
    WITHSOURCE=262
    WITH_ITEM_INDEX=263
    WITH_MATCH_ID=264
    WITH_NODE_ID=265
    WITH_SOURCE=266
    WITH_STEP_NAME=267
    XAXIS=268
    XCOLUMN=269
    XMAX=270
    XMIN=271
    XTITLE=272
    YAXIS=273
    YCOLUMNS=274
    YMAX=275
    YMIN=276
    YSPLIT=277
    YTITLE=278
    BOOL=279
    BOOLEAN=280
    DATE=281
    DATETIME=282
    DECIMAL=283
    DOUBLE=284
    DYNAMIC=285
    FLOAT=286
    GUID=287
    INT=288
    INT8=289
    INT16=290
    INT32=291
    INT64=292
    LONG=293
    STRING=294
    REAL=295
    TIME=296
    TIMESPAN=297
    UINT=298
    UINT8=299
    UINT16=300
    UINT32=301
    UINT64=302
    ULONG=303
    UNIQUEID=304
    LONGLITERAL=305
    INTLITERAL=306
    REALLITERAL=307
    DECIMALLITERAL=308
    STRINGLITERAL=309
    BOOLEANLITERAL=310
    DATETIMELITERAL=311
    TIMESPANLITERAL=312
    TYPELITERAL=313
    RAWGUIDLITERAL=314
    GUIDLITERAL=315
    IDENTIFIER=316
    WHITESPACE=317
    COMMENT=318

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self):
            return self.getTypedRuleContext(KqlParser.QueryContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_top

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop" ):
                listener.enterTop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop" ):
                listener.exitTop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop" ):
                return visitor.visitTop(self)
            else:
                return visitor.visitChildren(self)




    def top(self):

        localctx = KqlParser.TopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_top)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._statement = None # StatementContext
            self.Statements = list() # of StatementContexts

        def EOF(self):
            return self.getToken(KqlParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(KqlParser.StatementContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.SEMICOLON)
            else:
                return self.getToken(KqlParser.SEMICOLON, i)

        def getRuleIndex(self):
            return KqlParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = KqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            localctx._statement = self.statement()
            localctx.Statements.append(localctx._statement)
            self.state = 617
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 613
                    self.match(KqlParser.SEMICOLON)
                    self.state = 614
                    localctx._statement = self.statement()
                    localctx.Statements.append(localctx._statement) 
                self.state = 619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 620
                self.match(KqlParser.SEMICOLON)


            self.state = 623
            self.match(KqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.AliasDatabase = None # AliasDatabaseStatementContext
            self.DeclarePattern = None # DeclarePatternStatementContext
            self.DeclareQueryParameters = None # DeclareQueryParametersStatementContext
            self.Let = None # LetStatementContext
            self.Query = None # QueryStatementContext
            self.RestrictAccess = None # RestrictAccessStatementContext
            self.Set = None # SetStatementContext

        def aliasDatabaseStatement(self):
            return self.getTypedRuleContext(KqlParser.AliasDatabaseStatementContext,0)


        def declarePatternStatement(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternStatementContext,0)


        def declareQueryParametersStatement(self):
            return self.getTypedRuleContext(KqlParser.DeclareQueryParametersStatementContext,0)


        def letStatement(self):
            return self.getTypedRuleContext(KqlParser.LetStatementContext,0)


        def queryStatement(self):
            return self.getTypedRuleContext(KqlParser.QueryStatementContext,0)


        def restrictAccessStatement(self):
            return self.getTypedRuleContext(KqlParser.RestrictAccessStatementContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(KqlParser.SetStatementContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = KqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        try:
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                localctx.AliasDatabase = self.aliasDatabaseStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                localctx.DeclarePattern = self.declarePatternStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 627
                localctx.DeclareQueryParameters = self.declareQueryParametersStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 628
                localctx.Let = self.letStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 629
                localctx.Query = self.queryStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 630
                localctx.RestrictAccess = self.restrictAccessStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 631
                localctx.Set = self.setStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasDatabaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.Expression = None # UnnamedExpressionContext

        def ALIAS(self):
            return self.getToken(KqlParser.ALIAS, 0)

        def DATABASE(self):
            return self.getToken(KqlParser.DATABASE, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_aliasDatabaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasDatabaseStatement" ):
                listener.enterAliasDatabaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasDatabaseStatement" ):
                listener.exitAliasDatabaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasDatabaseStatement" ):
                return visitor.visitAliasDatabaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def aliasDatabaseStatement(self):

        localctx = KqlParser.AliasDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_aliasDatabaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(KqlParser.ALIAS)
            self.state = 635
            self.match(KqlParser.DATABASE)
            self.state = 636
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 637
            self.match(KqlParser.EQUAL)
            self.state = 638
            localctx.Expression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Function = None # LetFunctionDeclarationContext
            self.View = None # LetViewDeclarationContext
            self.Variable = None # LetVariableDeclarationContext
            self.Materialized = None # LetMaterializeDeclarationContext
            self.EntityGroup = None # LetEntityGroupDeclarationContext

        def letFunctionDeclaration(self):
            return self.getTypedRuleContext(KqlParser.LetFunctionDeclarationContext,0)


        def letViewDeclaration(self):
            return self.getTypedRuleContext(KqlParser.LetViewDeclarationContext,0)


        def letVariableDeclaration(self):
            return self.getTypedRuleContext(KqlParser.LetVariableDeclarationContext,0)


        def letMaterializeDeclaration(self):
            return self.getTypedRuleContext(KqlParser.LetMaterializeDeclarationContext,0)


        def letEntityGroupDeclaration(self):
            return self.getTypedRuleContext(KqlParser.LetEntityGroupDeclarationContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStatement" ):
                listener.enterLetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStatement" ):
                listener.exitLetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStatement" ):
                return visitor.visitLetStatement(self)
            else:
                return visitor.visitChildren(self)




    def letStatement(self):

        localctx = KqlParser.LetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_letStatement)
        try:
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 640
                localctx.Function = self.letFunctionDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 641
                localctx.View = self.letViewDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 642
                localctx.Variable = self.letVariableDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 643
                localctx.Materialized = self.letMaterializeDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 644
                localctx.EntityGroup = self.letEntityGroupDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.Expression = None # ExpressionContext

        def LET(self):
            return self.getToken(KqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetVariableDeclaration" ):
                listener.enterLetVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetVariableDeclaration" ):
                listener.exitLetVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetVariableDeclaration" ):
                return visitor.visitLetVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def letVariableDeclaration(self):

        localctx = KqlParser.LetVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_letVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(KqlParser.LET)
            self.state = 648
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 649
            self.match(KqlParser.EQUAL)
            self.state = 650
            localctx.Expression = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetFunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.ParameterList = None # LetFunctionParameterListContext
            self.Body = None # LetFunctionBodyContext

        def LET(self):
            return self.getToken(KqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def letFunctionBody(self):
            return self.getTypedRuleContext(KqlParser.LetFunctionBodyContext,0)


        def letFunctionParameterList(self):
            return self.getTypedRuleContext(KqlParser.LetFunctionParameterListContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letFunctionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetFunctionDeclaration" ):
                listener.enterLetFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetFunctionDeclaration" ):
                listener.exitLetFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetFunctionDeclaration" ):
                return visitor.visitLetFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def letFunctionDeclaration(self):

        localctx = KqlParser.LetFunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_letFunctionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(KqlParser.LET)
            self.state = 653
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 654
            self.match(KqlParser.EQUAL)
            self.state = 655
            self.match(KqlParser.OPENPAREN)
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121216) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 8358751552889101161) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 7196752211023416333) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -1443165259434554279) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 288230376692775943) != 0):
                self.state = 656
                localctx.ParameterList = self.letFunctionParameterList()


            self.state = 659
            self.match(KqlParser.CLOSEPAREN)
            self.state = 660
            localctx.Body = self.letFunctionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetViewDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.ParameterList = None # LetViewParameterListContext
            self.Body = None # LetFunctionBodyContext

        def LET(self):
            return self.getToken(KqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def VIEW(self):
            return self.getToken(KqlParser.VIEW, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def letFunctionBody(self):
            return self.getTypedRuleContext(KqlParser.LetFunctionBodyContext,0)


        def letViewParameterList(self):
            return self.getTypedRuleContext(KqlParser.LetViewParameterListContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letViewDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetViewDeclaration" ):
                listener.enterLetViewDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetViewDeclaration" ):
                listener.exitLetViewDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetViewDeclaration" ):
                return visitor.visitLetViewDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def letViewDeclaration(self):

        localctx = KqlParser.LetViewDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_letViewDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(KqlParser.LET)
            self.state = 663
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 664
            self.match(KqlParser.EQUAL)
            self.state = 665
            self.match(KqlParser.VIEW)
            self.state = 666
            self.match(KqlParser.OPENPAREN)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121216) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 8358751552889101161) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 7196752211023416333) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -1443165259434554279) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 288230376692775943) != 0):
                self.state = 667
                localctx.ParameterList = self.letViewParameterList()


            self.state = 670
            self.match(KqlParser.CLOSEPAREN)
            self.state = 671
            localctx.Body = self.letFunctionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetViewParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._scalarParameter = None # ScalarParameterContext
            self.Parameters = list() # of ScalarParameterContexts

        def scalarParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ScalarParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.ScalarParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_letViewParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetViewParameterList" ):
                listener.enterLetViewParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetViewParameterList" ):
                listener.exitLetViewParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetViewParameterList" ):
                return visitor.visitLetViewParameterList(self)
            else:
                return visitor.visitChildren(self)




    def letViewParameterList(self):

        localctx = KqlParser.LetViewParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_letViewParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            localctx._scalarParameter = self.scalarParameter()
            localctx.Parameters.append(localctx._scalarParameter)
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 674
                self.match(KqlParser.COMMA)
                self.state = 675
                localctx._scalarParameter = self.scalarParameter()
                localctx.Parameters.append(localctx._scalarParameter)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetMaterializeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.Expression = None # PipeExpressionContext

        def LET(self):
            return self.getToken(KqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def MATERIALIZE(self):
            return self.getToken(KqlParser.MATERIALIZE, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def pipeExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letMaterializeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetMaterializeDeclaration" ):
                listener.enterLetMaterializeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetMaterializeDeclaration" ):
                listener.exitLetMaterializeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetMaterializeDeclaration" ):
                return visitor.visitLetMaterializeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def letMaterializeDeclaration(self):

        localctx = KqlParser.LetMaterializeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_letMaterializeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(KqlParser.LET)
            self.state = 682
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 683
            self.match(KqlParser.EQUAL)
            self.state = 684
            self.match(KqlParser.MATERIALIZE)
            self.state = 685
            self.match(KqlParser.OPENPAREN)
            self.state = 686
            localctx.Expression = self.pipeExpression()
            self.state = 687
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetEntityGroupDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def LET(self):
            return self.getToken(KqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def entityGroupExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityGroupExpressionContext,0)


        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letEntityGroupDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetEntityGroupDeclaration" ):
                listener.enterLetEntityGroupDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetEntityGroupDeclaration" ):
                listener.exitLetEntityGroupDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetEntityGroupDeclaration" ):
                return visitor.visitLetEntityGroupDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def letEntityGroupDeclaration(self):

        localctx = KqlParser.LetEntityGroupDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_letEntityGroupDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(KqlParser.LET)
            self.state = 690
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 691
            self.match(KqlParser.EQUAL)
            self.state = 692
            self.entityGroupExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetFunctionParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._tabularParameter = None # TabularParameterContext
            self.TabularParameters = list() # of TabularParameterContexts
            self._scalarParameter = None # ScalarParameterContext
            self.ScalarParameters = list() # of ScalarParameterContexts

        def tabularParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.TabularParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.TabularParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def scalarParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ScalarParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.ScalarParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_letFunctionParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetFunctionParameterList" ):
                listener.enterLetFunctionParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetFunctionParameterList" ):
                listener.exitLetFunctionParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetFunctionParameterList" ):
                return visitor.visitLetFunctionParameterList(self)
            else:
                return visitor.visitChildren(self)




    def letFunctionParameterList(self):

        localctx = KqlParser.LetFunctionParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_letFunctionParameterList)
        try:
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 694
                localctx._tabularParameter = self.tabularParameter()
                localctx.TabularParameters.append(localctx._tabularParameter)

                self.state = 695
                self.match(KqlParser.COMMA)
                self.state = 696
                localctx._tabularParameter = self.tabularParameter()
                localctx.TabularParameters.append(localctx._tabularParameter)

                self.state = 698
                self.match(KqlParser.COMMA)
                self.state = 699
                localctx._scalarParameter = self.scalarParameter()
                localctx.ScalarParameters.append(localctx._scalarParameter)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                localctx._scalarParameter = self.scalarParameter()
                localctx.ScalarParameters.append(localctx._scalarParameter)

                self.state = 702
                self.match(KqlParser.COMMA)
                self.state = 703
                localctx._scalarParameter = self.scalarParameter()
                localctx.ScalarParameters.append(localctx._scalarParameter)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext
            self.Default = None # ScalarParameterDefaultContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(KqlParser.ScalarTypeContext,0)


        def scalarParameterDefault(self):
            return self.getTypedRuleContext(KqlParser.ScalarParameterDefaultContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_scalarParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarParameter" ):
                listener.enterScalarParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarParameter" ):
                listener.exitScalarParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarParameter" ):
                return visitor.visitScalarParameter(self)
            else:
                return visitor.visitChildren(self)




    def scalarParameter(self):

        localctx = KqlParser.ScalarParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_scalarParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            localctx.Name = self.parameterName()
            self.state = 708
            self.match(KqlParser.COLON)
            self.state = 709
            localctx.Type = self.scalarType()
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 710
                localctx.Default = self.scalarParameterDefault()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarParameterDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Value = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def literalExpression(self):
            return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_scalarParameterDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarParameterDefault" ):
                listener.enterScalarParameterDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarParameterDefault" ):
                listener.exitScalarParameterDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarParameterDefault" ):
                return visitor.visitScalarParameterDefault(self)
            else:
                return visitor.visitChildren(self)




    def scalarParameterDefault(self):

        localctx = KqlParser.ScalarParameterDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_scalarParameterDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(KqlParser.EQUAL)
            self.state = 714
            localctx.Value = self.literalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabularParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.OpenSchema = None # TabularParameterOpenSchemaContext
            self.RowSchema = None # TabularParameterRowSchemaContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def tabularParameterOpenSchema(self):
            return self.getTypedRuleContext(KqlParser.TabularParameterOpenSchemaContext,0)


        def tabularParameterRowSchema(self):
            return self.getTypedRuleContext(KqlParser.TabularParameterRowSchemaContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_tabularParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabularParameter" ):
                listener.enterTabularParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabularParameter" ):
                listener.exitTabularParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabularParameter" ):
                return visitor.visitTabularParameter(self)
            else:
                return visitor.visitChildren(self)




    def tabularParameter(self):

        localctx = KqlParser.TabularParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_tabularParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            localctx.Name = self.parameterName()
            self.state = 717
            self.match(KqlParser.COLON)
            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 718
                localctx.OpenSchema = self.tabularParameterOpenSchema()
                pass

            elif la_ == 2:
                self.state = 719
                localctx.RowSchema = self.tabularParameterRowSchema()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabularParameterOpenSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_tabularParameterOpenSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabularParameterOpenSchema" ):
                listener.enterTabularParameterOpenSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabularParameterOpenSchema" ):
                listener.exitTabularParameterOpenSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabularParameterOpenSchema" ):
                return visitor.visitTabularParameterOpenSchema(self)
            else:
                return visitor.visitChildren(self)




    def tabularParameterOpenSchema(self):

        localctx = KqlParser.TabularParameterOpenSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_tabularParameterOpenSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(KqlParser.OPENPAREN)
            self.state = 723
            self.match(KqlParser.ASTERISK)
            self.state = 724
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabularParameterRowSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._tabularParameterRowSchemaColumnDeclaration = None # TabularParameterRowSchemaColumnDeclarationContext
            self.Columns = list() # of TabularParameterRowSchemaColumnDeclarationContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def tabularParameterRowSchemaColumnDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.TabularParameterRowSchemaColumnDeclarationContext)
            else:
                return self.getTypedRuleContext(KqlParser.TabularParameterRowSchemaColumnDeclarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_tabularParameterRowSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabularParameterRowSchema" ):
                listener.enterTabularParameterRowSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabularParameterRowSchema" ):
                listener.exitTabularParameterRowSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabularParameterRowSchema" ):
                return visitor.visitTabularParameterRowSchema(self)
            else:
                return visitor.visitChildren(self)




    def tabularParameterRowSchema(self):

        localctx = KqlParser.TabularParameterRowSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_tabularParameterRowSchema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(KqlParser.OPENPAREN)
            self.state = 727
            localctx._tabularParameterRowSchemaColumnDeclaration = self.tabularParameterRowSchemaColumnDeclaration()
            localctx.Columns.append(localctx._tabularParameterRowSchemaColumnDeclaration)
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 728
                self.match(KqlParser.COMMA)
                self.state = 729
                localctx._tabularParameterRowSchemaColumnDeclaration = self.tabularParameterRowSchemaColumnDeclaration()
                localctx.Columns.append(localctx._tabularParameterRowSchemaColumnDeclaration)
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 735
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabularParameterRowSchemaColumnDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(KqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_tabularParameterRowSchemaColumnDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabularParameterRowSchemaColumnDeclaration" ):
                listener.enterTabularParameterRowSchemaColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabularParameterRowSchemaColumnDeclaration" ):
                listener.exitTabularParameterRowSchemaColumnDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTabularParameterRowSchemaColumnDeclaration" ):
                return visitor.visitTabularParameterRowSchemaColumnDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def tabularParameterRowSchemaColumnDeclaration(self):

        localctx = KqlParser.TabularParameterRowSchemaColumnDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_tabularParameterRowSchemaColumnDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            localctx.Name = self.parameterName()
            self.state = 738
            self.match(KqlParser.COLON)
            self.state = 739
            localctx.Type = self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetFunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._letFunctionBodyStatement = None # LetFunctionBodyStatementContext
            self.Statements = list() # of LetFunctionBodyStatementContexts
            self.Expression = None # ExpressionContext

        def OPENBRACE(self):
            return self.getToken(KqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(KqlParser.CLOSEBRACE, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.SEMICOLON)
            else:
                return self.getToken(KqlParser.SEMICOLON, i)

        def letFunctionBodyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.LetFunctionBodyStatementContext)
            else:
                return self.getTypedRuleContext(KqlParser.LetFunctionBodyStatementContext,i)


        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letFunctionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetFunctionBody" ):
                listener.enterLetFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetFunctionBody" ):
                listener.exitLetFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetFunctionBody" ):
                return visitor.visitLetFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def letFunctionBody(self):

        localctx = KqlParser.LetFunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_letFunctionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(KqlParser.OPENBRACE)
            self.state = 747
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 742
                    localctx._letFunctionBodyStatement = self.letFunctionBodyStatement()
                    localctx.Statements.append(localctx._letFunctionBodyStatement)
                    self.state = 743
                    self.match(KqlParser.SEMICOLON) 
                self.state = 749
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 622630631754434562) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1729241517714430253) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 1790180853509759745) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & -4656703218566889077) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 492443770949631) != 0):
                self.state = 750
                localctx.Expression = self.expression()


            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 753
                self.match(KqlParser.SEMICOLON)


            self.state = 756
            self.match(KqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetFunctionBodyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Let = None # LetStatementContext
            self.DeclareQueryParameters = None # DeclareQueryParametersStatementContext

        def letStatement(self):
            return self.getTypedRuleContext(KqlParser.LetStatementContext,0)


        def declareQueryParametersStatement(self):
            return self.getTypedRuleContext(KqlParser.DeclareQueryParametersStatementContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letFunctionBodyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetFunctionBodyStatement" ):
                listener.enterLetFunctionBodyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetFunctionBodyStatement" ):
                listener.exitLetFunctionBodyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetFunctionBodyStatement" ):
                return visitor.visitLetFunctionBodyStatement(self)
            else:
                return visitor.visitChildren(self)




    def letFunctionBodyStatement(self):

        localctx = KqlParser.LetFunctionBodyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_letFunctionBodyStatement)
        try:
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                localctx.Let = self.letStatement()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 759
                localctx.DeclareQueryParameters = self.declareQueryParametersStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # SimpleNameReferenceContext
            self.Definition = None # DeclarePatternDefinitionContext

        def DECLARE(self):
            return self.getToken(KqlParser.DECLARE, 0)

        def PATTERN(self):
            return self.getToken(KqlParser.PATTERN, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def declarePatternDefinition(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternDefinitionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternStatement" ):
                listener.enterDeclarePatternStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternStatement" ):
                listener.exitDeclarePatternStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternStatement" ):
                return visitor.visitDeclarePatternStatement(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternStatement(self):

        localctx = KqlParser.DeclarePatternStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_declarePatternStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(KqlParser.DECLARE)
            self.state = 763
            self.match(KqlParser.PATTERN)
            self.state = 764
            localctx.Name = self.simpleNameReference()
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 765
                localctx.Definition = self.declarePatternDefinition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ParameterList = None # DeclarePatternParameterListContext
            self.Path = None # DeclarePatternPathParameterContext
            self._declarePatternRule = None # DeclarePatternRuleContext
            self.Rules = list() # of DeclarePatternRuleContexts

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def OPENBRACE(self):
            return self.getToken(KqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(KqlParser.CLOSEBRACE, 0)

        def declarePatternParameterList(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternParameterListContext,0)


        def declarePatternPathParameter(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternPathParameterContext,0)


        def declarePatternRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.DeclarePatternRuleContext)
            else:
                return self.getTypedRuleContext(KqlParser.DeclarePatternRuleContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternDefinition" ):
                listener.enterDeclarePatternDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternDefinition" ):
                listener.exitDeclarePatternDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternDefinition" ):
                return visitor.visitDeclarePatternDefinition(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternDefinition(self):

        localctx = KqlParser.DeclarePatternDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_declarePatternDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(KqlParser.EQUAL)
            self.state = 769
            localctx.ParameterList = self.declarePatternParameterList()
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 770
                localctx.Path = self.declarePatternPathParameter()


            self.state = 773
            self.match(KqlParser.OPENBRACE)
            self.state = 775 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 774
                localctx._declarePatternRule = self.declarePatternRule()
                localctx.Rules.append(localctx._declarePatternRule)
                self.state = 777 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==31):
                    break

            self.state = 779
            self.match(KqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._declarePatternParameter = None # DeclarePatternParameterContext
            self.Parameters = list() # of DeclarePatternParameterContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def declarePatternParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.DeclarePatternParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.DeclarePatternParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternParameterList" ):
                listener.enterDeclarePatternParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternParameterList" ):
                listener.exitDeclarePatternParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternParameterList" ):
                return visitor.visitDeclarePatternParameterList(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternParameterList(self):

        localctx = KqlParser.DeclarePatternParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_declarePatternParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(KqlParser.OPENPAREN)
            self.state = 782
            localctx._declarePatternParameter = self.declarePatternParameter()
            localctx.Parameters.append(localctx._declarePatternParameter)
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 783
                self.match(KqlParser.COMMA)
                self.state = 784
                localctx._declarePatternParameter = self.declarePatternParameter()
                localctx.Parameters.append(localctx._declarePatternParameter)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 790
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(KqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternParameter" ):
                listener.enterDeclarePatternParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternParameter" ):
                listener.exitDeclarePatternParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternParameter" ):
                return visitor.visitDeclarePatternParameter(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternParameter(self):

        localctx = KqlParser.DeclarePatternParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_declarePatternParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            localctx.Name = self.parameterName()
            self.state = 793
            self.match(KqlParser.COLON)
            self.state = 794
            localctx.Type = self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternPathParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Parameter = None # DeclarePatternParameterContext

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def declarePatternParameter(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternParameterContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternPathParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternPathParameter" ):
                listener.enterDeclarePatternPathParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternPathParameter" ):
                listener.exitDeclarePatternPathParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternPathParameter" ):
                return visitor.visitDeclarePatternPathParameter(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternPathParameter(self):

        localctx = KqlParser.DeclarePatternPathParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_declarePatternPathParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(KqlParser.OPENBRACKET)
            self.state = 797
            localctx.Parameter = self.declarePatternParameter()
            self.state = 798
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ArgumentList = None # DeclarePatternRuleArgumentListContext
            self.PathArgument = None # DeclarePatternRulePathArgumentContext
            self.Body = None # DeclarePatternBodyContext
            self.TrailingSemicolon = None # Token

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def declarePatternRuleArgumentList(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternRuleArgumentListContext,0)


        def declarePatternBody(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternBodyContext,0)


        def declarePatternRulePathArgument(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternRulePathArgumentContext,0)


        def SEMICOLON(self):
            return self.getToken(KqlParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternRule" ):
                listener.enterDeclarePatternRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternRule" ):
                listener.exitDeclarePatternRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternRule" ):
                return visitor.visitDeclarePatternRule(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternRule(self):

        localctx = KqlParser.DeclarePatternRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declarePatternRule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            localctx.ArgumentList = self.declarePatternRuleArgumentList()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 801
                localctx.PathArgument = self.declarePatternRulePathArgument()


            self.state = 804
            self.match(KqlParser.EQUAL)
            self.state = 805
            localctx.Body = self.declarePatternBody()
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 806
                localctx.TrailingSemicolon = self.match(KqlParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternRuleArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._declarePatternRuleArgument = None # DeclarePatternRuleArgumentContext
            self.Arguments = list() # of DeclarePatternRuleArgumentContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def declarePatternRuleArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.DeclarePatternRuleArgumentContext)
            else:
                return self.getTypedRuleContext(KqlParser.DeclarePatternRuleArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternRuleArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternRuleArgumentList" ):
                listener.enterDeclarePatternRuleArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternRuleArgumentList" ):
                listener.exitDeclarePatternRuleArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternRuleArgumentList" ):
                return visitor.visitDeclarePatternRuleArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternRuleArgumentList(self):

        localctx = KqlParser.DeclarePatternRuleArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declarePatternRuleArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(KqlParser.OPENPAREN)
            self.state = 810
            localctx._declarePatternRuleArgument = self.declarePatternRuleArgument()
            localctx.Arguments.append(localctx._declarePatternRuleArgument)
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 811
                self.match(KqlParser.COMMA)
                self.state = 812
                localctx._declarePatternRuleArgument = self.declarePatternRuleArgument()
                localctx.Arguments.append(localctx._declarePatternRuleArgument)
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 818
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternRulePathArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # DeclarePatternRuleArgumentContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def declarePatternRuleArgument(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternRuleArgumentContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternRulePathArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternRulePathArgument" ):
                listener.enterDeclarePatternRulePathArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternRulePathArgument" ):
                listener.exitDeclarePatternRulePathArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternRulePathArgument" ):
                return visitor.visitDeclarePatternRulePathArgument(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternRulePathArgument(self):

        localctx = KqlParser.DeclarePatternRulePathArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declarePatternRulePathArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(KqlParser.DOT)
            self.state = 821
            self.match(KqlParser.OPENBRACKET)
            self.state = 822
            localctx.Expression = self.declarePatternRuleArgument()
            self.state = 823
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternRuleArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternRuleArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternRuleArgument" ):
                listener.enterDeclarePatternRuleArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternRuleArgument" ):
                listener.exitDeclarePatternRuleArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternRuleArgument" ):
                return visitor.visitDeclarePatternRuleArgument(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternRuleArgument(self):

        localctx = KqlParser.DeclarePatternRuleArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declarePatternRuleArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.stringLiteralExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._letFunctionBodyStatement = None # LetFunctionBodyStatementContext
            self.Statements = list() # of LetFunctionBodyStatementContexts
            self.Expression = None # ExpressionContext

        def OPENBRACE(self):
            return self.getToken(KqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(KqlParser.CLOSEBRACE, 0)

        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.SEMICOLON)
            else:
                return self.getToken(KqlParser.SEMICOLON, i)

        def letFunctionBodyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.LetFunctionBodyStatementContext)
            else:
                return self.getTypedRuleContext(KqlParser.LetFunctionBodyStatementContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternBody" ):
                listener.enterDeclarePatternBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternBody" ):
                listener.exitDeclarePatternBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarePatternBody" ):
                return visitor.visitDeclarePatternBody(self)
            else:
                return visitor.visitChildren(self)




    def declarePatternBody(self):

        localctx = KqlParser.DeclarePatternBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declarePatternBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(KqlParser.OPENBRACE)
            self.state = 833
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 828
                    localctx._letFunctionBodyStatement = self.letFunctionBodyStatement()
                    localctx.Statements.append(localctx._letFunctionBodyStatement)
                    self.state = 829
                    self.match(KqlParser.SEMICOLON) 
                self.state = 835
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

            self.state = 836
            localctx.Expression = self.expression()
            self.state = 837
            self.match(KqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestrictAccessStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._restrictAccessStatementEntity = None # RestrictAccessStatementEntityContext
            self.Entities = list() # of RestrictAccessStatementEntityContexts

        def RESTRICT(self):
            return self.getToken(KqlParser.RESTRICT, 0)

        def ACCESS(self):
            return self.getToken(KqlParser.ACCESS, 0)

        def TO(self):
            return self.getToken(KqlParser.TO, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def restrictAccessStatementEntity(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RestrictAccessStatementEntityContext)
            else:
                return self.getTypedRuleContext(KqlParser.RestrictAccessStatementEntityContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_restrictAccessStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrictAccessStatement" ):
                listener.enterRestrictAccessStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrictAccessStatement" ):
                listener.exitRestrictAccessStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestrictAccessStatement" ):
                return visitor.visitRestrictAccessStatement(self)
            else:
                return visitor.visitChildren(self)




    def restrictAccessStatement(self):

        localctx = KqlParser.RestrictAccessStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restrictAccessStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(KqlParser.RESTRICT)
            self.state = 840
            self.match(KqlParser.ACCESS)
            self.state = 841
            self.match(KqlParser.TO)
            self.state = 842
            self.match(KqlParser.OPENPAREN)
            self.state = 843
            localctx._restrictAccessStatementEntity = self.restrictAccessStatementEntity()
            localctx.Entities.append(localctx._restrictAccessStatementEntity)
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 844
                self.match(KqlParser.COMMA)
                self.state = 845
                localctx._restrictAccessStatementEntity = self.restrictAccessStatementEntity()
                localctx.Entities.append(localctx._restrictAccessStatementEntity)
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 851
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestrictAccessStatementEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SimpleName = None # SimpleNameReferenceContext
            self.WildcardedEntity = None # WildcardedEntityExpressionContext

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def wildcardedEntityExpression(self):
            return self.getTypedRuleContext(KqlParser.WildcardedEntityExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_restrictAccessStatementEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrictAccessStatementEntity" ):
                listener.enterRestrictAccessStatementEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrictAccessStatementEntity" ):
                listener.exitRestrictAccessStatementEntity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestrictAccessStatementEntity" ):
                return visitor.visitRestrictAccessStatementEntity(self)
            else:
                return visitor.visitChildren(self)




    def restrictAccessStatementEntity(self):

        localctx = KqlParser.RestrictAccessStatementEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_restrictAccessStatementEntity)
        try:
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                localctx.SimpleName = self.simpleNameReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                localctx.WildcardedEntity = self.wildcardedEntityExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordNameContext
            self.Value = None # SetStatementOptionValueContext

        def SET(self):
            return self.getToken(KqlParser.SET, 0)

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordNameContext,0)


        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def setStatementOptionValue(self):
            return self.getTypedRuleContext(KqlParser.SetStatementOptionValueContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStatement" ):
                return visitor.visitSetStatement(self)
            else:
                return visitor.visitChildren(self)




    def setStatement(self):

        localctx = KqlParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(KqlParser.SET)
            self.state = 858
            localctx.Name = self.identifierOrKeywordName()
            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 859
                self.match(KqlParser.EQUAL)
                self.state = 860
                localctx.Value = self.setStatementOptionValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementOptionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordNameContext
            self.Literal = None # LiteralExpressionContext

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordNameContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_setStatementOptionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatementOptionValue" ):
                listener.enterSetStatementOptionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatementOptionValue" ):
                listener.exitSetStatementOptionValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetStatementOptionValue" ):
                return visitor.visitSetStatementOptionValue(self)
            else:
                return visitor.visitChildren(self)




    def setStatementOptionValue(self):

        localctx = KqlParser.SetStatementOptionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_setStatementOptionValue)
        try:
            self.state = 865
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 316]:
                self.enterOuterAlt(localctx, 1)
                self.state = 863
                localctx.Name = self.identifierOrKeywordName()
                pass
            elif token in [11, 33, 285, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315]:
                self.enterOuterAlt(localctx, 2)
                self.state = 864
                localctx.Literal = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareQueryParametersStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._declareQueryParametersStatementParameter = None # DeclareQueryParametersStatementParameterContext
            self.Parameters = list() # of DeclareQueryParametersStatementParameterContexts

        def DECLARE(self):
            return self.getToken(KqlParser.DECLARE, 0)

        def QUERYPARAMETERS(self):
            return self.getToken(KqlParser.QUERYPARAMETERS, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def declareQueryParametersStatementParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.DeclareQueryParametersStatementParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.DeclareQueryParametersStatementParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_declareQueryParametersStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareQueryParametersStatement" ):
                listener.enterDeclareQueryParametersStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareQueryParametersStatement" ):
                listener.exitDeclareQueryParametersStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareQueryParametersStatement" ):
                return visitor.visitDeclareQueryParametersStatement(self)
            else:
                return visitor.visitChildren(self)




    def declareQueryParametersStatement(self):

        localctx = KqlParser.DeclareQueryParametersStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_declareQueryParametersStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(KqlParser.DECLARE)
            self.state = 868
            self.match(KqlParser.QUERYPARAMETERS)
            self.state = 869
            self.match(KqlParser.OPENPAREN)
            self.state = 870
            localctx._declareQueryParametersStatementParameter = self.declareQueryParametersStatementParameter()
            localctx.Parameters.append(localctx._declareQueryParametersStatementParameter)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 871
                self.match(KqlParser.COMMA)
                self.state = 872
                localctx._declareQueryParametersStatementParameter = self.declareQueryParametersStatementParameter()
                localctx.Parameters.append(localctx._declareQueryParametersStatementParameter)
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 878
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareQueryParametersStatementParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext
            self.Default = None # ScalarParameterDefaultContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(KqlParser.ScalarTypeContext,0)


        def scalarParameterDefault(self):
            return self.getTypedRuleContext(KqlParser.ScalarParameterDefaultContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_declareQueryParametersStatementParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareQueryParametersStatementParameter" ):
                listener.enterDeclareQueryParametersStatementParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareQueryParametersStatementParameter" ):
                listener.exitDeclareQueryParametersStatementParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareQueryParametersStatementParameter" ):
                return visitor.visitDeclareQueryParametersStatementParameter(self)
            else:
                return visitor.visitChildren(self)




    def declareQueryParametersStatementParameter(self):

        localctx = KqlParser.DeclareQueryParametersStatementParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_declareQueryParametersStatementParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            localctx.Name = self.parameterName()
            self.state = 881
            self.match(KqlParser.COLON)
            self.state = 882
            localctx.Type = self.scalarType()
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 883
                localctx.Default = self.scalarParameterDefault()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_queryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryStatement" ):
                listener.enterQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryStatement" ):
                listener.exitQueryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryStatement" ):
                return visitor.visitQueryStatement(self)
            else:
                return visitor.visitChildren(self)




    def queryStatement(self):

        localctx = KqlParser.QueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_queryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            localctx.Expression = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pipeExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = KqlParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.pipeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PipeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # BeforePipeExpressionContext
            self._pipedOperator = None # PipedOperatorContext
            self.PipedOperators = list() # of PipedOperatorContexts

        def beforePipeExpression(self):
            return self.getTypedRuleContext(KqlParser.BeforePipeExpressionContext,0)


        def pipedOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.PipedOperatorContext)
            else:
                return self.getTypedRuleContext(KqlParser.PipedOperatorContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_pipeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPipeExpression" ):
                listener.enterPipeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPipeExpression" ):
                listener.exitPipeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPipeExpression" ):
                return visitor.visitPipeExpression(self)
            else:
                return visitor.visitChildren(self)




    def pipeExpression(self):

        localctx = KqlParser.PipeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pipeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            localctx.Expression = self.beforePipeExpression()
            self.state = 894
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 891
                    localctx._pipedOperator = self.pipedOperator()
                    localctx.PipedOperators.append(localctx._pipedOperator) 
                self.state = 896
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PipedOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # AfterPipeOperatorContext

        def BAR(self):
            return self.getToken(KqlParser.BAR, 0)

        def afterPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.AfterPipeOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_pipedOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPipedOperator" ):
                listener.enterPipedOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPipedOperator" ):
                listener.exitPipedOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPipedOperator" ):
                return visitor.visitPipedOperator(self)
            else:
                return visitor.visitChildren(self)




    def pipedOperator(self):

        localctx = KqlParser.PipedOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pipedOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(KqlParser.BAR)
            self.state = 898
            localctx.Operator = self.afterPipeOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PipeSubExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # AfterPipeOperatorContext
            self._pipedOperator = None # PipedOperatorContext
            self.PipedOperators = list() # of PipedOperatorContexts

        def afterPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.AfterPipeOperatorContext,0)


        def pipedOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.PipedOperatorContext)
            else:
                return self.getTypedRuleContext(KqlParser.PipedOperatorContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_pipeSubExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPipeSubExpression" ):
                listener.enterPipeSubExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPipeSubExpression" ):
                listener.exitPipeSubExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPipeSubExpression" ):
                return visitor.visitPipeSubExpression(self)
            else:
                return visitor.visitChildren(self)




    def pipeSubExpression(self):

        localctx = KqlParser.PipeSubExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_pipeSubExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            localctx.Expression = self.afterPipeOperator()
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 901
                localctx._pipedOperator = self.pipedOperator()
                localctx.PipedOperators.append(localctx._pipedOperator)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeforePipeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def beforeOrAfterPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.BeforeOrAfterPipeOperatorContext,0)


        def printOperator(self):
            return self.getTypedRuleContext(KqlParser.PrintOperatorContext,0)


        def macroExpandOperator(self):
            return self.getTypedRuleContext(KqlParser.MacroExpandOperatorContext,0)


        def rangeExpression(self):
            return self.getTypedRuleContext(KqlParser.RangeExpressionContext,0)


        def scopedFunctionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.ScopedFunctionCallExpressionContext,0)


        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_beforePipeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeforePipeExpression" ):
                listener.enterBeforePipeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeforePipeExpression" ):
                listener.exitBeforePipeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeforePipeExpression" ):
                return visitor.visitBeforePipeExpression(self)
            else:
                return visitor.visitChildren(self)




    def beforePipeExpression(self):

        localctx = KqlParser.BeforePipeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_beforePipeExpression)
        try:
            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                self.beforeOrAfterPipeOperator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 908
                self.printOperator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 909
                self.macroExpandOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 910
                self.rangeExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 911
                self.scopedFunctionCallExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 912
                self.unnamedExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AfterPipeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asOperator(self):
            return self.getTypedRuleContext(KqlParser.AsOperatorContext,0)


        def assertSchemaOperator(self):
            return self.getTypedRuleContext(KqlParser.AssertSchemaOperatorContext,0)


        def consumeOperator(self):
            return self.getTypedRuleContext(KqlParser.ConsumeOperatorContext,0)


        def countOperator(self):
            return self.getTypedRuleContext(KqlParser.CountOperatorContext,0)


        def distinctOperator(self):
            return self.getTypedRuleContext(KqlParser.DistinctOperatorContext,0)


        def executeAndCacheOperator(self):
            return self.getTypedRuleContext(KqlParser.ExecuteAndCacheOperatorContext,0)


        def extendOperator(self):
            return self.getTypedRuleContext(KqlParser.ExtendOperatorContext,0)


        def facetByOperator(self):
            return self.getTypedRuleContext(KqlParser.FacetByOperatorContext,0)


        def findOperator(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorContext,0)


        def forkOperator(self):
            return self.getTypedRuleContext(KqlParser.ForkOperatorContext,0)


        def getSchemaOperator(self):
            return self.getTypedRuleContext(KqlParser.GetSchemaOperatorContext,0)


        def graphMarkComponentsOperator(self):
            return self.getTypedRuleContext(KqlParser.GraphMarkComponentsOperatorContext,0)


        def graphMatchOperator(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchOperatorContext,0)


        def graphMergeOperator(self):
            return self.getTypedRuleContext(KqlParser.GraphMergeOperatorContext,0)


        def graphShortestPathsOperator(self):
            return self.getTypedRuleContext(KqlParser.GraphShortestPathsOperatorContext,0)


        def graphToTableOperator(self):
            return self.getTypedRuleContext(KqlParser.GraphToTableOperatorContext,0)


        def invokeOperator(self):
            return self.getTypedRuleContext(KqlParser.InvokeOperatorContext,0)


        def joinOperator(self):
            return self.getTypedRuleContext(KqlParser.JoinOperatorContext,0)


        def lookupOperator(self):
            return self.getTypedRuleContext(KqlParser.LookupOperatorContext,0)


        def makeGraphOperator(self):
            return self.getTypedRuleContext(KqlParser.MakeGraphOperatorContext,0)


        def makeSeriesOperator(self):
            return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorContext,0)


        def mvexpandOperator(self):
            return self.getTypedRuleContext(KqlParser.MvexpandOperatorContext,0)


        def mvapplyOperator(self):
            return self.getTypedRuleContext(KqlParser.MvapplyOperatorContext,0)


        def evaluateOperator(self):
            return self.getTypedRuleContext(KqlParser.EvaluateOperatorContext,0)


        def parseOperator(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorContext,0)


        def parseKvOperator(self):
            return self.getTypedRuleContext(KqlParser.ParseKvOperatorContext,0)


        def parseWhereOperator(self):
            return self.getTypedRuleContext(KqlParser.ParseWhereOperatorContext,0)


        def partitionOperator(self):
            return self.getTypedRuleContext(KqlParser.PartitionOperatorContext,0)


        def partitionByOperator(self):
            return self.getTypedRuleContext(KqlParser.PartitionByOperatorContext,0)


        def projectOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectOperatorContext,0)


        def projectAwayOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectAwayOperatorContext,0)


        def projectRenameOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectRenameOperatorContext,0)


        def projectReorderOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectReorderOperatorContext,0)


        def projectKeepOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectKeepOperatorContext,0)


        def reduceByOperator(self):
            return self.getTypedRuleContext(KqlParser.ReduceByOperatorContext,0)


        def renderOperator(self):
            return self.getTypedRuleContext(KqlParser.RenderOperatorContext,0)


        def sampleOperator(self):
            return self.getTypedRuleContext(KqlParser.SampleOperatorContext,0)


        def sampleDistinctOperator(self):
            return self.getTypedRuleContext(KqlParser.SampleDistinctOperatorContext,0)


        def scanOperator(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorContext,0)


        def searchOperator(self):
            return self.getTypedRuleContext(KqlParser.SearchOperatorContext,0)


        def serializeOperator(self):
            return self.getTypedRuleContext(KqlParser.SerializeOperatorContext,0)


        def sortOperator(self):
            return self.getTypedRuleContext(KqlParser.SortOperatorContext,0)


        def summarizeOperator(self):
            return self.getTypedRuleContext(KqlParser.SummarizeOperatorContext,0)


        def takeOperator(self):
            return self.getTypedRuleContext(KqlParser.TakeOperatorContext,0)


        def topHittersOperator(self):
            return self.getTypedRuleContext(KqlParser.TopHittersOperatorContext,0)


        def topOperator(self):
            return self.getTypedRuleContext(KqlParser.TopOperatorContext,0)


        def topNestedOperator(self):
            return self.getTypedRuleContext(KqlParser.TopNestedOperatorContext,0)


        def unionOperator(self):
            return self.getTypedRuleContext(KqlParser.UnionOperatorContext,0)


        def whereOperator(self):
            return self.getTypedRuleContext(KqlParser.WhereOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_afterPipeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAfterPipeOperator" ):
                listener.enterAfterPipeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAfterPipeOperator" ):
                listener.exitAfterPipeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAfterPipeOperator" ):
                return visitor.visitAfterPipeOperator(self)
            else:
                return visitor.visitChildren(self)




    def afterPipeOperator(self):

        localctx = KqlParser.AfterPipeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_afterPipeOperator)
        try:
            self.state = 964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.asOperator()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.assertSchemaOperator()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.consumeOperator()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 4)
                self.state = 918
                self.countOperator()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 5)
                self.state = 919
                self.distinctOperator()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 6)
                self.state = 920
                self.executeAndCacheOperator()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 7)
                self.state = 921
                self.extendOperator()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 8)
                self.state = 922
                self.facetByOperator()
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 9)
                self.state = 923
                self.findOperator()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 10)
                self.state = 924
                self.forkOperator()
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 11)
                self.state = 925
                self.getSchemaOperator()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 12)
                self.state = 926
                self.graphMarkComponentsOperator()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 13)
                self.state = 927
                self.graphMatchOperator()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 14)
                self.state = 928
                self.graphMergeOperator()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 15)
                self.state = 929
                self.graphShortestPathsOperator()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 16)
                self.state = 930
                self.graphToTableOperator()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 17)
                self.state = 931
                self.invokeOperator()
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 18)
                self.state = 932
                self.joinOperator()
                pass
            elif token in [148]:
                self.enterOuterAlt(localctx, 19)
                self.state = 933
                self.lookupOperator()
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 20)
                self.state = 934
                self.makeGraphOperator()
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 21)
                self.state = 935
                self.makeSeriesOperator()
                pass
            elif token in [158, 160]:
                self.enterOuterAlt(localctx, 22)
                self.state = 936
                self.mvexpandOperator()
                pass
            elif token in [157, 159]:
                self.enterOuterAlt(localctx, 23)
                self.state = 937
                self.mvapplyOperator()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 24)
                self.state = 938
                self.evaluateOperator()
                pass
            elif token in [194]:
                self.enterOuterAlt(localctx, 25)
                self.state = 939
                self.parseOperator()
                pass
            elif token in [195]:
                self.enterOuterAlt(localctx, 26)
                self.state = 940
                self.parseKvOperator()
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 27)
                self.state = 941
                self.parseWhereOperator()
                pass
            elif token in [197]:
                self.enterOuterAlt(localctx, 28)
                self.state = 942
                self.partitionOperator()
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 29)
                self.state = 943
                self.partitionByOperator()
                pass
            elif token in [206]:
                self.enterOuterAlt(localctx, 30)
                self.state = 944
                self.projectOperator()
                pass
            elif token in [207]:
                self.enterOuterAlt(localctx, 31)
                self.state = 945
                self.projectAwayOperator()
                pass
            elif token in [210]:
                self.enterOuterAlt(localctx, 32)
                self.state = 946
                self.projectRenameOperator()
                pass
            elif token in [211]:
                self.enterOuterAlt(localctx, 33)
                self.state = 947
                self.projectReorderOperator()
                pass
            elif token in [209]:
                self.enterOuterAlt(localctx, 34)
                self.state = 948
                self.projectKeepOperator()
                pass
            elif token in [215]:
                self.enterOuterAlt(localctx, 35)
                self.state = 949
                self.reduceByOperator()
                pass
            elif token in [218]:
                self.enterOuterAlt(localctx, 36)
                self.state = 950
                self.renderOperator()
                pass
            elif token in [221]:
                self.enterOuterAlt(localctx, 37)
                self.state = 951
                self.sampleOperator()
                pass
            elif token in [222]:
                self.enterOuterAlt(localctx, 38)
                self.state = 952
                self.sampleDistinctOperator()
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 39)
                self.state = 953
                self.scanOperator()
                pass
            elif token in [225]:
                self.enterOuterAlt(localctx, 40)
                self.state = 954
                self.searchOperator()
                pass
            elif token in [226]:
                self.enterOuterAlt(localctx, 41)
                self.state = 955
                self.serializeOperator()
                pass
            elif token in [189, 230]:
                self.enterOuterAlt(localctx, 42)
                self.state = 956
                self.sortOperator()
                pass
            elif token in [238]:
                self.enterOuterAlt(localctx, 43)
                self.state = 957
                self.summarizeOperator()
                pass
            elif token in [144, 240]:
                self.enterOuterAlt(localctx, 44)
                self.state = 958
                self.takeOperator()
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 45)
                self.state = 959
                self.topHittersOperator()
                pass
            elif token in [247]:
                self.enterOuterAlt(localctx, 46)
                self.state = 960
                self.topOperator()
                pass
            elif token in [249]:
                self.enterOuterAlt(localctx, 47)
                self.state = 961
                self.topNestedOperator()
                pass
            elif token in [254]:
                self.enterOuterAlt(localctx, 48)
                self.state = 962
                self.unionOperator()
                pass
            elif token in [90, 259]:
                self.enterOuterAlt(localctx, 49)
                self.state = 963
                self.whereOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeforeOrAfterPipeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def findOperator(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorContext,0)


        def searchOperator(self):
            return self.getTypedRuleContext(KqlParser.SearchOperatorContext,0)


        def unionOperator(self):
            return self.getTypedRuleContext(KqlParser.UnionOperatorContext,0)


        def evaluateOperator(self):
            return self.getTypedRuleContext(KqlParser.EvaluateOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_beforeOrAfterPipeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeforeOrAfterPipeOperator" ):
                listener.enterBeforeOrAfterPipeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeforeOrAfterPipeOperator" ):
                listener.exitBeforeOrAfterPipeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeforeOrAfterPipeOperator" ):
                return visitor.visitBeforeOrAfterPipeOperator(self)
            else:
                return visitor.visitChildren(self)




    def beforeOrAfterPipeOperator(self):

        localctx = KqlParser.BeforeOrAfterPipeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_beforeOrAfterPipeOperator)
        try:
            self.state = 970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 966
                self.findOperator()
                pass
            elif token in [225]:
                self.enterOuterAlt(localctx, 2)
                self.state = 967
                self.searchOperator()
                pass
            elif token in [254]:
                self.enterOuterAlt(localctx, 3)
                self.state = 968
                self.unionOperator()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 4)
                self.state = 969
                self.evaluateOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkPipeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def countOperator(self):
            return self.getTypedRuleContext(KqlParser.CountOperatorContext,0)


        def extendOperator(self):
            return self.getTypedRuleContext(KqlParser.ExtendOperatorContext,0)


        def whereOperator(self):
            return self.getTypedRuleContext(KqlParser.WhereOperatorContext,0)


        def parseOperator(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorContext,0)


        def parseWhereOperator(self):
            return self.getTypedRuleContext(KqlParser.ParseWhereOperatorContext,0)


        def takeOperator(self):
            return self.getTypedRuleContext(KqlParser.TakeOperatorContext,0)


        def topNestedOperator(self):
            return self.getTypedRuleContext(KqlParser.TopNestedOperatorContext,0)


        def projectOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectOperatorContext,0)


        def projectAwayOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectAwayOperatorContext,0)


        def projectRenameOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectRenameOperatorContext,0)


        def projectReorderOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectReorderOperatorContext,0)


        def projectKeepOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectKeepOperatorContext,0)


        def summarizeOperator(self):
            return self.getTypedRuleContext(KqlParser.SummarizeOperatorContext,0)


        def distinctOperator(self):
            return self.getTypedRuleContext(KqlParser.DistinctOperatorContext,0)


        def topHittersOperator(self):
            return self.getTypedRuleContext(KqlParser.TopHittersOperatorContext,0)


        def topOperator(self):
            return self.getTypedRuleContext(KqlParser.TopOperatorContext,0)


        def sortOperator(self):
            return self.getTypedRuleContext(KqlParser.SortOperatorContext,0)


        def mvexpandOperator(self):
            return self.getTypedRuleContext(KqlParser.MvexpandOperatorContext,0)


        def reduceByOperator(self):
            return self.getTypedRuleContext(KqlParser.ReduceByOperatorContext,0)


        def sampleOperator(self):
            return self.getTypedRuleContext(KqlParser.SampleOperatorContext,0)


        def sampleDistinctOperator(self):
            return self.getTypedRuleContext(KqlParser.SampleDistinctOperatorContext,0)


        def asOperator(self):
            return self.getTypedRuleContext(KqlParser.AsOperatorContext,0)


        def invokeOperator(self):
            return self.getTypedRuleContext(KqlParser.InvokeOperatorContext,0)


        def executeAndCacheOperator(self):
            return self.getTypedRuleContext(KqlParser.ExecuteAndCacheOperatorContext,0)


        def scanOperator(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_forkPipeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkPipeOperator" ):
                listener.enterForkPipeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkPipeOperator" ):
                listener.exitForkPipeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForkPipeOperator" ):
                return visitor.visitForkPipeOperator(self)
            else:
                return visitor.visitChildren(self)




    def forkPipeOperator(self):

        localctx = KqlParser.ForkPipeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_forkPipeOperator)
        try:
            self.state = 997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.countOperator()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 973
                self.extendOperator()
                pass
            elif token in [90, 259]:
                self.enterOuterAlt(localctx, 3)
                self.state = 974
                self.whereOperator()
                pass
            elif token in [194]:
                self.enterOuterAlt(localctx, 4)
                self.state = 975
                self.parseOperator()
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 5)
                self.state = 976
                self.parseWhereOperator()
                pass
            elif token in [144, 240]:
                self.enterOuterAlt(localctx, 6)
                self.state = 977
                self.takeOperator()
                pass
            elif token in [249]:
                self.enterOuterAlt(localctx, 7)
                self.state = 978
                self.topNestedOperator()
                pass
            elif token in [206]:
                self.enterOuterAlt(localctx, 8)
                self.state = 979
                self.projectOperator()
                pass
            elif token in [207]:
                self.enterOuterAlt(localctx, 9)
                self.state = 980
                self.projectAwayOperator()
                pass
            elif token in [210]:
                self.enterOuterAlt(localctx, 10)
                self.state = 981
                self.projectRenameOperator()
                pass
            elif token in [211]:
                self.enterOuterAlt(localctx, 11)
                self.state = 982
                self.projectReorderOperator()
                pass
            elif token in [209]:
                self.enterOuterAlt(localctx, 12)
                self.state = 983
                self.projectKeepOperator()
                pass
            elif token in [238]:
                self.enterOuterAlt(localctx, 13)
                self.state = 984
                self.summarizeOperator()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 14)
                self.state = 985
                self.distinctOperator()
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 15)
                self.state = 986
                self.topHittersOperator()
                pass
            elif token in [247]:
                self.enterOuterAlt(localctx, 16)
                self.state = 987
                self.topOperator()
                pass
            elif token in [189, 230]:
                self.enterOuterAlt(localctx, 17)
                self.state = 988
                self.sortOperator()
                pass
            elif token in [158, 160]:
                self.enterOuterAlt(localctx, 18)
                self.state = 989
                self.mvexpandOperator()
                pass
            elif token in [215]:
                self.enterOuterAlt(localctx, 19)
                self.state = 990
                self.reduceByOperator()
                pass
            elif token in [221]:
                self.enterOuterAlt(localctx, 20)
                self.state = 991
                self.sampleOperator()
                pass
            elif token in [222]:
                self.enterOuterAlt(localctx, 21)
                self.state = 992
                self.sampleDistinctOperator()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 22)
                self.state = 993
                self.asOperator()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 23)
                self.state = 994
                self.invokeOperator()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 24)
                self.state = 995
                self.executeAndCacheOperator()
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 25)
                self.state = 996
                self.scanOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def AS(self):
            return self.getToken(KqlParser.AS, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_asOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsOperator" ):
                listener.enterAsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsOperator" ):
                listener.exitAsOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsOperator" ):
                return visitor.visitAsOperator(self)
            else:
                return visitor.visitChildren(self)




    def asOperator(self):

        localctx = KqlParser.AsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_asOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(KqlParser.AS)
            self.state = 1003
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1000
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1005
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 1006
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertSchemaOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Schema = None # RowSchemaContext

        def ASSERTSCHEMA(self):
            return self.getToken(KqlParser.ASSERTSCHEMA, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(KqlParser.RowSchemaContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_assertSchemaOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertSchemaOperator" ):
                listener.enterAssertSchemaOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertSchemaOperator" ):
                listener.exitAssertSchemaOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertSchemaOperator" ):
                return visitor.visitAssertSchemaOperator(self)
            else:
                return visitor.visitChildren(self)




    def assertSchemaOperator(self):

        localctx = KqlParser.AssertSchemaOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_assertSchemaOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(KqlParser.ASSERTSCHEMA)
            self.state = 1009
            localctx.Schema = self.rowSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConsumeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts

        def CONSUME(self):
            return self.getToken(KqlParser.CONSUME, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_consumeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConsumeOperator" ):
                listener.enterConsumeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConsumeOperator" ):
                listener.exitConsumeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConsumeOperator" ):
                return visitor.visitConsumeOperator(self)
            else:
                return visitor.visitChildren(self)




    def consumeOperator(self):

        localctx = KqlParser.ConsumeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_consumeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(KqlParser.CONSUME)
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0):
                self.state = 1012
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts

        def COUNT(self):
            return self.getToken(KqlParser.COUNT, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_countOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountOperator" ):
                listener.enterCountOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountOperator" ):
                listener.exitCountOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCountOperator" ):
                return visitor.visitCountOperator(self)
            else:
                return visitor.visitChildren(self)




    def countOperator(self):

        localctx = KqlParser.CountOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_countOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(KqlParser.COUNT)
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0):
                self.state = 1019
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountOperatorAsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierNameContext

        def AS(self):
            return self.getToken(KqlParser.AS, 0)

        def identifierName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_countOperatorAsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountOperatorAsClause" ):
                listener.enterCountOperatorAsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountOperatorAsClause" ):
                listener.exitCountOperatorAsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCountOperatorAsClause" ):
                return visitor.visitCountOperatorAsClause(self)
            else:
                return visitor.visitChildren(self)




    def countOperatorAsClause(self):

        localctx = KqlParser.CountOperatorAsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_countOperatorAsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(KqlParser.AS)
            self.state = 1026
            localctx.Name = self.identifierName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinctOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Star = None # DistinctOperatorStarTargetContext
            self.ColumnList = None # DistinctOperatorColumnListTargetContext

        def DISTINCT(self):
            return self.getToken(KqlParser.DISTINCT, 0)

        def distinctOperatorStarTarget(self):
            return self.getTypedRuleContext(KqlParser.DistinctOperatorStarTargetContext,0)


        def distinctOperatorColumnListTarget(self):
            return self.getTypedRuleContext(KqlParser.DistinctOperatorColumnListTargetContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_distinctOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctOperator" ):
                listener.enterDistinctOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctOperator" ):
                listener.exitDistinctOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinctOperator" ):
                return visitor.visitDistinctOperator(self)
            else:
                return visitor.visitChildren(self)




    def distinctOperator(self):

        localctx = KqlParser.DistinctOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_distinctOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(KqlParser.DISTINCT)
            self.state = 1032
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1029
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1034
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 1035
                localctx.Star = self.distinctOperatorStarTarget()
                pass

            elif la_ == 2:
                self.state = 1036
                localctx.ColumnList = self.distinctOperatorColumnListTarget()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinctOperatorStarTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_distinctOperatorStarTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctOperatorStarTarget" ):
                listener.enterDistinctOperatorStarTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctOperatorStarTarget" ):
                listener.exitDistinctOperatorStarTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinctOperatorStarTarget" ):
                return visitor.visitDistinctOperatorStarTarget(self)
            else:
                return visitor.visitChildren(self)




    def distinctOperatorStarTarget(self):

        localctx = KqlParser.DistinctOperatorStarTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_distinctOperatorStarTarget)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(KqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinctOperatorColumnListTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unnamedExpression = None # UnnamedExpressionContext
            self.Expressions = list() # of UnnamedExpressionContexts

        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_distinctOperatorColumnListTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctOperatorColumnListTarget" ):
                listener.enterDistinctOperatorColumnListTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctOperatorColumnListTarget" ):
                listener.exitDistinctOperatorColumnListTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinctOperatorColumnListTarget" ):
                return visitor.visitDistinctOperatorColumnListTarget(self)
            else:
                return visitor.visitChildren(self)




    def distinctOperatorColumnListTarget(self):

        localctx = KqlParser.DistinctOperatorColumnListTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_distinctOperatorColumnListTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            localctx._unnamedExpression = self.unnamedExpression()
            localctx.Expressions.append(localctx._unnamedExpression)
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1042
                self.match(KqlParser.COMMA)
                self.state = 1043
                localctx._unnamedExpression = self.unnamedExpression()
                localctx.Expressions.append(localctx._unnamedExpression)
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.PlugInCall = None # FunctionCallExpressionContext
            self.SchemaClause = None # EvaluateOperatorSchemaClauseContext

        def EVALUATE(self):
            return self.getToken(KqlParser.EVALUATE, 0)

        def functionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallExpressionContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def evaluateOperatorSchemaClause(self):
            return self.getTypedRuleContext(KqlParser.EvaluateOperatorSchemaClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_evaluateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateOperator" ):
                listener.enterEvaluateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateOperator" ):
                listener.exitEvaluateOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateOperator" ):
                return visitor.visitEvaluateOperator(self)
            else:
                return visitor.visitChildren(self)




    def evaluateOperator(self):

        localctx = KqlParser.EvaluateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_evaluateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(KqlParser.EVALUATE)
            self.state = 1053
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1050
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

            self.state = 1056
            localctx.PlugInCall = self.functionCallExpression()
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1057
                localctx.SchemaClause = self.evaluateOperatorSchemaClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateOperatorSchemaClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Schema = None # RowSchemaContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(KqlParser.RowSchemaContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_evaluateOperatorSchemaClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateOperatorSchemaClause" ):
                listener.enterEvaluateOperatorSchemaClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateOperatorSchemaClause" ):
                listener.exitEvaluateOperatorSchemaClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateOperatorSchemaClause" ):
                return visitor.visitEvaluateOperatorSchemaClause(self)
            else:
                return visitor.visitChildren(self)




    def evaluateOperatorSchemaClause(self):

        localctx = KqlParser.EvaluateOperatorSchemaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_evaluateOperatorSchemaClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(KqlParser.COLON)
            self.state = 1061
            localctx.Schema = self.rowSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def EXTEND(self):
            return self.getToken(KqlParser.EXTEND, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_extendOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendOperator" ):
                listener.enterExtendOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendOperator" ):
                listener.exitExtendOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendOperator" ):
                return visitor.visitExtendOperator(self)
            else:
                return visitor.visitChildren(self)




    def extendOperator(self):

        localctx = KqlParser.ExtendOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_extendOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(KqlParser.EXTEND)
            self.state = 1064
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1065
                self.match(KqlParser.COMMA)
                self.state = 1066
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteAndCacheOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE_AND_CACHE(self):
            return self.getToken(KqlParser.EXECUTE_AND_CACHE, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_executeAndCacheOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteAndCacheOperator" ):
                listener.enterExecuteAndCacheOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteAndCacheOperator" ):
                listener.exitExecuteAndCacheOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteAndCacheOperator" ):
                return visitor.visitExecuteAndCacheOperator(self)
            else:
                return visitor.visitChildren(self)




    def executeAndCacheOperator(self):

        localctx = KqlParser.ExecuteAndCacheOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_executeAndCacheOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(KqlParser.EXECUTE_AND_CACHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FacetByOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._entityExpression = None # EntityExpressionContext
            self.Entities = list() # of EntityExpressionContexts
            self.WithOperatorClause = None # FacetByOperatorWithOperatorClauseContext
            self.WithExpressionClause = None # FacetByOperatorWithExpressionClauseContext

        def FACET(self):
            return self.getToken(KqlParser.FACET, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def entityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.EntityExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.EntityExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def facetByOperatorWithOperatorClause(self):
            return self.getTypedRuleContext(KqlParser.FacetByOperatorWithOperatorClauseContext,0)


        def facetByOperatorWithExpressionClause(self):
            return self.getTypedRuleContext(KqlParser.FacetByOperatorWithExpressionClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_facetByOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFacetByOperator" ):
                listener.enterFacetByOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFacetByOperator" ):
                listener.exitFacetByOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFacetByOperator" ):
                return visitor.visitFacetByOperator(self)
            else:
                return visitor.visitChildren(self)




    def facetByOperator(self):

        localctx = KqlParser.FacetByOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_facetByOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.match(KqlParser.FACET)
            self.state = 1075
            self.match(KqlParser.BY)
            self.state = 1076
            localctx._entityExpression = self.entityExpression()
            localctx.Entities.append(localctx._entityExpression)
            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1077
                self.match(KqlParser.COMMA)
                self.state = 1078
                localctx._entityExpression = self.entityExpression()
                localctx.Entities.append(localctx._entityExpression)
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 1084
                localctx.WithOperatorClause = self.facetByOperatorWithOperatorClause()

            elif la_ == 2:
                self.state = 1085
                localctx.WithExpressionClause = self.facetByOperatorWithExpressionClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FacetByOperatorWithOperatorClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # ForkPipeOperatorContext

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def forkPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.ForkPipeOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_facetByOperatorWithOperatorClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFacetByOperatorWithOperatorClause" ):
                listener.enterFacetByOperatorWithOperatorClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFacetByOperatorWithOperatorClause" ):
                listener.exitFacetByOperatorWithOperatorClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFacetByOperatorWithOperatorClause" ):
                return visitor.visitFacetByOperatorWithOperatorClause(self)
            else:
                return visitor.visitChildren(self)




    def facetByOperatorWithOperatorClause(self):

        localctx = KqlParser.FacetByOperatorWithOperatorClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_facetByOperatorWithOperatorClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(KqlParser.WITH)
            self.state = 1089
            localctx.Operator = self.forkPipeOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FacetByOperatorWithExpressionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ForkOperatorExpressionContext

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def forkOperatorExpression(self):
            return self.getTypedRuleContext(KqlParser.ForkOperatorExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_facetByOperatorWithExpressionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFacetByOperatorWithExpressionClause" ):
                listener.enterFacetByOperatorWithExpressionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFacetByOperatorWithExpressionClause" ):
                listener.exitFacetByOperatorWithExpressionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFacetByOperatorWithExpressionClause" ):
                return visitor.visitFacetByOperatorWithExpressionClause(self)
            else:
                return visitor.visitChildren(self)




    def facetByOperatorWithExpressionClause(self):

        localctx = KqlParser.FacetByOperatorWithExpressionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_facetByOperatorWithExpressionClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(KqlParser.WITH)
            self.state = 1092
            self.match(KqlParser.OPENPAREN)
            self.state = 1093
            localctx.Expression = self.forkOperatorExpression()
            self.state = 1094
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.DataScopeClause = None # DataScopeClauseContext
            self.ParameterWhereClause = None # FindOperatorParametersWhereClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.ProjectClause = None # FindOperatorProjectClauseContext
            self.ProjectSmartClause = None # FindOperatorProjectSmartClauseContext
            self.ProjectAwayClause = None # FindOperatorProjectAwayClauseContext

        def FIND(self):
            return self.getToken(KqlParser.FIND, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def dataScopeClause(self):
            return self.getTypedRuleContext(KqlParser.DataScopeClauseContext,0)


        def findOperatorParametersWhereClause(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorParametersWhereClauseContext,0)


        def findOperatorProjectClause(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorProjectClauseContext,0)


        def findOperatorProjectSmartClause(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorProjectSmartClauseContext,0)


        def findOperatorProjectAwayClause(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorProjectAwayClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperator" ):
                listener.enterFindOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperator" ):
                listener.exitFindOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperator" ):
                return visitor.visitFindOperator(self)
            else:
                return visitor.visitChildren(self)




    def findOperator(self):

        localctx = KqlParser.FindOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_findOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(KqlParser.FIND)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 1097
                localctx.DataScopeClause = self.dataScopeClause()


            self.state = 1101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 1100
                localctx.ParameterWhereClause = self.findOperatorParametersWhereClause()


            self.state = 1103
            localctx.Expression = self.unnamedExpression()
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 1104
                localctx.ProjectClause = self.findOperatorProjectClause()

            elif la_ == 2:
                self.state = 1105
                localctx.ProjectSmartClause = self.findOperatorProjectSmartClause()


            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208:
                self.state = 1108
                localctx.ProjectAwayClause = self.findOperatorProjectAwayClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorParametersWhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.InClause = None # FindOperatorInClauseContext

        def WHERE(self):
            return self.getToken(KqlParser.WHERE, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def findOperatorInClause(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorInClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorParametersWhereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorParametersWhereClause" ):
                listener.enterFindOperatorParametersWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorParametersWhereClause" ):
                listener.exitFindOperatorParametersWhereClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorParametersWhereClause" ):
                return visitor.visitFindOperatorParametersWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorParametersWhereClause(self):

        localctx = KqlParser.FindOperatorParametersWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_findOperatorParametersWhereClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0):
                self.state = 1111
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 1117
                localctx.InClause = self.findOperatorInClause()


            self.state = 1120
            self.match(KqlParser.WHERE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorInClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._findOperatorSource = None # FindOperatorSourceContext
            self.Expressions = list() # of FindOperatorSourceContexts

        def IN(self):
            return self.getToken(KqlParser.IN, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def findOperatorSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.FindOperatorSourceContext)
            else:
                return self.getTypedRuleContext(KqlParser.FindOperatorSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorInClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorInClause" ):
                listener.enterFindOperatorInClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorInClause" ):
                listener.exitFindOperatorInClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorInClause" ):
                return visitor.visitFindOperatorInClause(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorInClause(self):

        localctx = KqlParser.FindOperatorInClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_findOperatorInClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(KqlParser.IN)
            self.state = 1123
            self.match(KqlParser.OPENPAREN)
            self.state = 1124
            localctx._findOperatorSource = self.findOperatorSource()
            localctx.Expressions.append(localctx._findOperatorSource)
            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1125
                self.match(KqlParser.COMMA)
                self.state = 1126
                localctx._findOperatorSource = self.findOperatorSource()
                localctx.Expressions.append(localctx._findOperatorSource)
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1132
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._findOperatorProjectExpression = None # FindOperatorProjectExpressionContext
            self.Expressions = list() # of FindOperatorProjectExpressionContexts

        def PROJECT(self):
            return self.getToken(KqlParser.PROJECT, 0)

        def findOperatorProjectExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.FindOperatorProjectExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.FindOperatorProjectExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorProjectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectClause" ):
                listener.enterFindOperatorProjectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectClause" ):
                listener.exitFindOperatorProjectClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorProjectClause" ):
                return visitor.visitFindOperatorProjectClause(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorProjectClause(self):

        localctx = KqlParser.FindOperatorProjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_findOperatorProjectClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(KqlParser.PROJECT)
            self.state = 1135
            localctx._findOperatorProjectExpression = self.findOperatorProjectExpression()
            localctx.Expressions.append(localctx._findOperatorProjectExpression)
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1136
                self.match(KqlParser.COMMA)
                self.state = 1137
                localctx._findOperatorProjectExpression = self.findOperatorProjectExpression()
                localctx.Expressions.append(localctx._findOperatorProjectExpression)
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Column = None # FindOperatorColumnExpressionContext
            self.Pack = None # FindOperatorPackExpressionContext

        def findOperatorColumnExpression(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorColumnExpressionContext,0)


        def findOperatorPackExpression(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorPackExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorProjectExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectExpression" ):
                listener.enterFindOperatorProjectExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectExpression" ):
                listener.exitFindOperatorProjectExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorProjectExpression" ):
                return visitor.visitFindOperatorProjectExpression(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorProjectExpression(self):

        localctx = KqlParser.FindOperatorProjectExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_findOperatorProjectExpression)
        try:
            self.state = 1145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1143
                localctx.Column = self.findOperatorColumnExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1144
                localctx.Pack = self.findOperatorPackExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorColumnExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.OptionalType = None # FindOperatorOptionalColumnTypeContext

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def findOperatorOptionalColumnType(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorOptionalColumnTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorColumnExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorColumnExpression" ):
                listener.enterFindOperatorColumnExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorColumnExpression" ):
                listener.exitFindOperatorColumnExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorColumnExpression" ):
                return visitor.visitFindOperatorColumnExpression(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorColumnExpression(self):

        localctx = KqlParser.FindOperatorColumnExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_findOperatorColumnExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            localctx.Name = self.parameterName()
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1148
                localctx.OptionalType = self.findOperatorOptionalColumnType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorOptionalColumnTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Type = None # ExtendedScalarTypeContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def extendedScalarType(self):
            return self.getTypedRuleContext(KqlParser.ExtendedScalarTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorOptionalColumnType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorOptionalColumnType" ):
                listener.enterFindOperatorOptionalColumnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorOptionalColumnType" ):
                listener.exitFindOperatorOptionalColumnType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorOptionalColumnType" ):
                return visitor.visitFindOperatorOptionalColumnType(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorOptionalColumnType(self):

        localctx = KqlParser.FindOperatorOptionalColumnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_findOperatorOptionalColumnType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(KqlParser.COLON)
            self.state = 1152
            localctx.Type = self.extendedScalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorPackExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACK(self):
            return self.getToken(KqlParser.PACK, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorPackExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorPackExpression" ):
                listener.enterFindOperatorPackExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorPackExpression" ):
                listener.exitFindOperatorPackExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorPackExpression" ):
                return visitor.visitFindOperatorPackExpression(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorPackExpression(self):

        localctx = KqlParser.FindOperatorPackExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_findOperatorPackExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(KqlParser.PACK)
            self.state = 1155
            self.match(KqlParser.OPENPAREN)
            self.state = 1156
            self.match(KqlParser.ASTERISK)
            self.state = 1157
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectSmartClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROJECTSMART(self):
            return self.getToken(KqlParser.PROJECTSMART, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorProjectSmartClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectSmartClause" ):
                listener.enterFindOperatorProjectSmartClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectSmartClause" ):
                listener.exitFindOperatorProjectSmartClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorProjectSmartClause" ):
                return visitor.visitFindOperatorProjectSmartClause(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorProjectSmartClause(self):

        localctx = KqlParser.FindOperatorProjectSmartClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_findOperatorProjectSmartClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self.match(KqlParser.PROJECTSMART)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectAwayClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Star = None # FindOperatorProjectAwayStarContext
            self.ColumnList = None # FindOperatorProjectAwayColumnListContext

        def PROJECTAWAY_(self):
            return self.getToken(KqlParser.PROJECTAWAY_, 0)

        def findOperatorProjectAwayStar(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorProjectAwayStarContext,0)


        def findOperatorProjectAwayColumnList(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorProjectAwayColumnListContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorProjectAwayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectAwayClause" ):
                listener.enterFindOperatorProjectAwayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectAwayClause" ):
                listener.exitFindOperatorProjectAwayClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorProjectAwayClause" ):
                return visitor.visitFindOperatorProjectAwayClause(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorProjectAwayClause(self):

        localctx = KqlParser.FindOperatorProjectAwayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_findOperatorProjectAwayClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(KqlParser.PROJECTAWAY_)
            self.state = 1164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.state = 1162
                localctx.Star = self.findOperatorProjectAwayStar()
                pass
            elif token in [30, 38, 39, 40, 41, 42, 47, 50, 53, 55, 57, 59, 61, 62, 66, 69, 71, 72, 74, 75, 77, 78, 82, 83, 86, 87, 89, 90, 91, 94, 95, 104, 112, 124, 126, 127, 128, 130, 132, 133, 140, 141, 144, 145, 147, 148, 149, 153, 155, 161, 162, 183, 184, 185, 186, 187, 191, 192, 194, 197, 198, 200, 204, 205, 213, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 232, 233, 237, 238, 240, 241, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 316]:
                self.state = 1163
                localctx.ColumnList = self.findOperatorProjectAwayColumnList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectAwayStarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorProjectAwayStar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectAwayStar" ):
                listener.enterFindOperatorProjectAwayStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectAwayStar" ):
                listener.exitFindOperatorProjectAwayStar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorProjectAwayStar" ):
                return visitor.visitFindOperatorProjectAwayStar(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorProjectAwayStar(self):

        localctx = KqlParser.FindOperatorProjectAwayStarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_findOperatorProjectAwayStar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(KqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectAwayColumnListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._findOperatorColumnExpression = None # FindOperatorColumnExpressionContext
            self.Columns = list() # of FindOperatorColumnExpressionContexts

        def findOperatorColumnExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.FindOperatorColumnExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.FindOperatorColumnExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorProjectAwayColumnList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectAwayColumnList" ):
                listener.enterFindOperatorProjectAwayColumnList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectAwayColumnList" ):
                listener.exitFindOperatorProjectAwayColumnList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorProjectAwayColumnList" ):
                return visitor.visitFindOperatorProjectAwayColumnList(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorProjectAwayColumnList(self):

        localctx = KqlParser.FindOperatorProjectAwayColumnListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_findOperatorProjectAwayColumnList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            localctx._findOperatorColumnExpression = self.findOperatorColumnExpression()
            localctx.Columns.append(localctx._findOperatorColumnExpression)
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1169
                self.match(KqlParser.COMMA)
                self.state = 1170
                localctx._findOperatorColumnExpression = self.findOperatorColumnExpression()
                localctx.Columns.append(localctx._findOperatorColumnExpression)
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Entity = None # FindOperatorSourceEntityExpressionContext
            self.WildcardedEntity = None # WildcardedEntityExpressionContext

        def findOperatorSourceEntityExpression(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorSourceEntityExpressionContext,0)


        def wildcardedEntityExpression(self):
            return self.getTypedRuleContext(KqlParser.WildcardedEntityExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorSource" ):
                listener.enterFindOperatorSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorSource" ):
                listener.exitFindOperatorSource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorSource" ):
                return visitor.visitFindOperatorSource(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorSource(self):

        localctx = KqlParser.FindOperatorSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_findOperatorSource)
        try:
            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1176
                localctx.Entity = self.findOperatorSourceEntityExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1177
                localctx.WildcardedEntity = self.wildcardedEntityExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorSourceEntityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Entity = None # EntityNameReferenceContext
            self._asOperator = None # AsOperatorContext
            self.AsOperators = list() # of AsOperatorContexts

        def entityNameReference(self):
            return self.getTypedRuleContext(KqlParser.EntityNameReferenceContext,0)


        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.BAR)
            else:
                return self.getToken(KqlParser.BAR, i)

        def asOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.AsOperatorContext)
            else:
                return self.getTypedRuleContext(KqlParser.AsOperatorContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorSourceEntityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorSourceEntityExpression" ):
                listener.enterFindOperatorSourceEntityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorSourceEntityExpression" ):
                listener.exitFindOperatorSourceEntityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindOperatorSourceEntityExpression" ):
                return visitor.visitFindOperatorSourceEntityExpression(self)
            else:
                return visitor.visitChildren(self)




    def findOperatorSourceEntityExpression(self):

        localctx = KqlParser.FindOperatorSourceEntityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_findOperatorSourceEntityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            localctx.Entity = self.entityNameReference()
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1181
                self.match(KqlParser.BAR)
                self.state = 1182
                localctx._asOperator = self.asOperator()
                localctx.AsOperators.append(localctx._asOperator)
                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORK(self):
            return self.getToken(KqlParser.FORK, 0)

        def forkOperatorFork(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ForkOperatorForkContext)
            else:
                return self.getTypedRuleContext(KqlParser.ForkOperatorForkContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_forkOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperator" ):
                listener.enterForkOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperator" ):
                listener.exitForkOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForkOperator" ):
                return visitor.visitForkOperator(self)
            else:
                return visitor.visitChildren(self)




    def forkOperator(self):

        localctx = KqlParser.ForkOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_forkOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.match(KqlParser.FORK)
            self.state = 1190 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1189
                self.forkOperatorFork()
                self.state = 1192 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 622630623164497920) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -8178528127110061463) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 1592259962793370531) != 0) or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & 106397688039329281) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 281474977239039) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorForkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ForkOperatorExpressionNameContext
            self.Expression = None # ForkOperatorExpressionContext

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def forkOperatorExpression(self):
            return self.getTypedRuleContext(KqlParser.ForkOperatorExpressionContext,0)


        def forkOperatorExpressionName(self):
            return self.getTypedRuleContext(KqlParser.ForkOperatorExpressionNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_forkOperatorFork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperatorFork" ):
                listener.enterForkOperatorFork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperatorFork" ):
                listener.exitForkOperatorFork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForkOperatorFork" ):
                return visitor.visitForkOperatorFork(self)
            else:
                return visitor.visitChildren(self)




    def forkOperatorFork(self):

        localctx = KqlParser.ForkOperatorForkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_forkOperatorFork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 622630621017014272) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -8178528127110061463) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 1592259962793370531) != 0) or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & 106397688039329281) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 281474977239039) != 0):
                self.state = 1194
                localctx.Name = self.forkOperatorExpressionName()


            self.state = 1197
            self.match(KqlParser.OPENPAREN)
            self.state = 1198
            localctx.Expression = self.forkOperatorExpression()
            self.state = 1199
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorExpressionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_forkOperatorExpressionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperatorExpressionName" ):
                listener.enterForkOperatorExpressionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperatorExpressionName" ):
                listener.exitForkOperatorExpressionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForkOperatorExpressionName" ):
                return visitor.visitForkOperatorExpressionName(self)
            else:
                return visitor.visitChildren(self)




    def forkOperatorExpressionName(self):

        localctx = KqlParser.ForkOperatorExpressionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_forkOperatorExpressionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 1202
            self.match(KqlParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # ForkPipeOperatorContext
            self._forkOperatorPipedOperator = None # ForkOperatorPipedOperatorContext
            self.PipedOperators = list() # of ForkOperatorPipedOperatorContexts

        def forkPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.ForkPipeOperatorContext,0)


        def forkOperatorPipedOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ForkOperatorPipedOperatorContext)
            else:
                return self.getTypedRuleContext(KqlParser.ForkOperatorPipedOperatorContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_forkOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperatorExpression" ):
                listener.enterForkOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperatorExpression" ):
                listener.exitForkOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForkOperatorExpression" ):
                return visitor.visitForkOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def forkOperatorExpression(self):

        localctx = KqlParser.ForkOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_forkOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            localctx.Operator = self.forkPipeOperator()
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1205
                localctx._forkOperatorPipedOperator = self.forkOperatorPipedOperator()
                localctx.PipedOperators.append(localctx._forkOperatorPipedOperator)
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorPipedOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # ForkPipeOperatorContext

        def BAR(self):
            return self.getToken(KqlParser.BAR, 0)

        def forkPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.ForkPipeOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_forkOperatorPipedOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperatorPipedOperator" ):
                listener.enterForkOperatorPipedOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperatorPipedOperator" ):
                listener.exitForkOperatorPipedOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForkOperatorPipedOperator" ):
                return visitor.visitForkOperatorPipedOperator(self)
            else:
                return visitor.visitChildren(self)




    def forkOperatorPipedOperator(self):

        localctx = KqlParser.ForkOperatorPipedOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_forkOperatorPipedOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(KqlParser.BAR)
            self.state = 1212
            localctx.Operator = self.forkPipeOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetSchemaOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GETSCHEMA(self):
            return self.getToken(KqlParser.GETSCHEMA, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_getSchemaOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetSchemaOperator" ):
                listener.enterGetSchemaOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetSchemaOperator" ):
                listener.exitGetSchemaOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetSchemaOperator" ):
                return visitor.visitGetSchemaOperator(self)
            else:
                return visitor.visitChildren(self)




    def getSchemaOperator(self):

        localctx = KqlParser.GetSchemaOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_getSchemaOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(KqlParser.GETSCHEMA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMarkComponentsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parametems = list() # of RelaxedQueryOperatorParameterContexts

        def GRAPHMARKCOMPONENTS(self):
            return self.getToken(KqlParser.GRAPHMARKCOMPONENTS, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMarkComponentsOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMarkComponentsOperator" ):
                listener.enterGraphMarkComponentsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMarkComponentsOperator" ):
                listener.exitGraphMarkComponentsOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMarkComponentsOperator" ):
                return visitor.visitGraphMarkComponentsOperator(self)
            else:
                return visitor.visitChildren(self)




    def graphMarkComponentsOperator(self):

        localctx = KqlParser.GraphMarkComponentsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_graphMarkComponentsOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(KqlParser.GRAPHMARKCOMPONENTS)
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0):
                self.state = 1217
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parametems.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._graphMatchPattern = None # GraphMatchPatternContext
            self.Patterns = list() # of GraphMatchPatternContexts
            self.WhereClause = None # GraphMatchWhereClauseContext
            self.ProjectClause = None # GraphMatchProjectClauseContext

        def GRAPHMATCH(self):
            return self.getToken(KqlParser.GRAPHMATCH, 0)

        def graphMatchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.GraphMatchPatternContext)
            else:
                return self.getTypedRuleContext(KqlParser.GraphMatchPatternContext,i)


        def COMMA(self):
            return self.getToken(KqlParser.COMMA, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def graphMatchWhereClause(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchWhereClauseContext,0)


        def graphMatchProjectClause(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchProjectClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchOperator" ):
                listener.enterGraphMatchOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchOperator" ):
                listener.exitGraphMatchOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchOperator" ):
                return visitor.visitGraphMatchOperator(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchOperator(self):

        localctx = KqlParser.GraphMatchOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_graphMatchOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(KqlParser.GRAPHMATCH)
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0):
                self.state = 1224
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1229
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1230
            localctx._graphMatchPattern = self.graphMatchPattern()
            localctx.Patterns.append(localctx._graphMatchPattern)

            self.state = 1231
            self.match(KqlParser.COMMA)
            self.state = 1232
            localctx._graphMatchPattern = self.graphMatchPattern()
            localctx.Patterns.append(localctx._graphMatchPattern)
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==259:
                self.state = 1234
                localctx.WhereClause = self.graphMatchWhereClause()


            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 1237
                localctx.ProjectClause = self.graphMatchProjectClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Node = None # GraphMatchPatternNodeContext
            self.UnnamedEdge = None # GraphMatchPatternUnnamedEdgeContext
            self.NamedEdge = None # GraphMatchPatternNamedEdgeContext

        def graphMatchPatternNode(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchPatternNodeContext,0)


        def graphMatchPatternUnnamedEdge(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchPatternUnnamedEdgeContext,0)


        def graphMatchPatternNamedEdge(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchPatternNamedEdgeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPattern" ):
                listener.enterGraphMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPattern" ):
                listener.exitGraphMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchPattern" ):
                return visitor.visitGraphMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchPattern(self):

        localctx = KqlParser.GraphMatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_graphMatchPattern)
        try:
            self.state = 1243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1240
                localctx.Node = self.graphMatchPatternNode()
                pass
            elif token in [12, 13, 25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                localctx.UnnamedEdge = self.graphMatchPatternUnnamedEdge()
                pass
            elif token in [14, 26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1242
                localctx.NamedEdge = self.graphMatchPatternNamedEdge()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchPatternNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPatternNode" ):
                listener.enterGraphMatchPatternNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPatternNode" ):
                listener.exitGraphMatchPatternNode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchPatternNode" ):
                return visitor.visitGraphMatchPatternNode(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchPatternNode(self):

        localctx = KqlParser.GraphMatchPatternNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_graphMatchPatternNode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(KqlParser.OPENPAREN)
            self.state = 1246
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 1247
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternUnnamedEdgeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Direction = None # Token

        def DASHDASH_GREATERTHAN(self):
            return self.getToken(KqlParser.DASHDASH_GREATERTHAN, 0)

        def LESSTHAN_DASHDASH(self):
            return self.getToken(KqlParser.LESSTHAN_DASHDASH, 0)

        def DASHDASH(self):
            return self.getToken(KqlParser.DASHDASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchPatternUnnamedEdge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPatternUnnamedEdge" ):
                listener.enterGraphMatchPatternUnnamedEdge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPatternUnnamedEdge" ):
                listener.exitGraphMatchPatternUnnamedEdge(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchPatternUnnamedEdge" ):
                return visitor.visitGraphMatchPatternUnnamedEdge(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchPatternUnnamedEdge(self):

        localctx = KqlParser.GraphMatchPatternUnnamedEdgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_graphMatchPatternUnnamedEdge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            localctx.Direction = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 33566720) != 0)):
                localctx.Direction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternNamedEdgeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpenBracket = None # Token
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.Range = None # GraphMatchPatternRangeContext
            self.CloseBracket = None # Token

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def DASH_OPENBRACKET(self):
            return self.getToken(KqlParser.DASH_OPENBRACKET, 0)

        def LESSTHAN_DASH_OPENBRACKET(self):
            return self.getToken(KqlParser.LESSTHAN_DASH_OPENBRACKET, 0)

        def CLOSEBRACKET_DASH_GREATERTHAN(self):
            return self.getToken(KqlParser.CLOSEBRACKET_DASH_GREATERTHAN, 0)

        def CLOSEBRACKET_DASH(self):
            return self.getToken(KqlParser.CLOSEBRACKET_DASH, 0)

        def graphMatchPatternRange(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchPatternRangeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchPatternNamedEdge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPatternNamedEdge" ):
                listener.enterGraphMatchPatternNamedEdge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPatternNamedEdge" ):
                listener.exitGraphMatchPatternNamedEdge(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchPatternNamedEdge" ):
                return visitor.visitGraphMatchPatternNamedEdge(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchPatternNamedEdge(self):

        localctx = KqlParser.GraphMatchPatternNamedEdgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_graphMatchPatternNamedEdge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            localctx.OpenBracket = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==14 or _la==26):
                localctx.OpenBracket = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1252
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 1253
                localctx.Range = self.graphMatchPatternRange()


            self.state = 1256
            localctx.CloseBracket = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==6 or _la==7):
                localctx.CloseBracket = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LowerBound = None # InvocationExpressionContext
            self.UpperBound = None # InvocationExpressionContext

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def DOTDOT(self):
            return self.getToken(KqlParser.DOTDOT, 0)

        def invocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.InvocationExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchPatternRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPatternRange" ):
                listener.enterGraphMatchPatternRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPatternRange" ):
                listener.exitGraphMatchPatternRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchPatternRange" ):
                return visitor.visitGraphMatchPatternRange(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchPatternRange(self):

        localctx = KqlParser.GraphMatchPatternRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_graphMatchPatternRange)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(KqlParser.ASTERISK)
            self.state = 1259
            localctx.LowerBound = self.invocationExpression()
            self.state = 1260
            self.match(KqlParser.DOTDOT)
            self.state = 1261
            localctx.UpperBound = self.invocationExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchWhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def WHERE(self):
            return self.getToken(KqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchWhereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchWhereClause" ):
                listener.enterGraphMatchWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchWhereClause" ):
                listener.exitGraphMatchWhereClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchWhereClause" ):
                return visitor.visitGraphMatchWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchWhereClause(self):

        localctx = KqlParser.GraphMatchWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_graphMatchWhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self.match(KqlParser.WHERE)
            self.state = 1264
            localctx.Expression = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchProjectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def PROJECT(self):
            return self.getToken(KqlParser.PROJECT, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchProjectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchProjectClause" ):
                listener.enterGraphMatchProjectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchProjectClause" ):
                listener.exitGraphMatchProjectClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMatchProjectClause" ):
                return visitor.visitGraphMatchProjectClause(self)
            else:
                return visitor.visitChildren(self)




    def graphMatchProjectClause(self):

        localctx = KqlParser.GraphMatchProjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_graphMatchProjectClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(KqlParser.PROJECT)
            self.state = 1267
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1268
                self.match(KqlParser.COMMA)
                self.state = 1269
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMergeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Graph = None # InvocationExpressionContext
            self.OnClause = None # JoinOperatorOnClauseContext

        def GRAPHMERGE(self):
            return self.getToken(KqlParser.GRAPHMERGE, 0)

        def invocationExpression(self):
            return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,0)


        def joinOperatorOnClause(self):
            return self.getTypedRuleContext(KqlParser.JoinOperatorOnClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMergeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMergeOperator" ):
                listener.enterGraphMergeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMergeOperator" ):
                listener.exitGraphMergeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphMergeOperator" ):
                return visitor.visitGraphMergeOperator(self)
            else:
                return visitor.visitChildren(self)




    def graphMergeOperator(self):

        localctx = KqlParser.GraphMergeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_graphMergeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(KqlParser.GRAPHMERGE)
            self.state = 1276
            localctx.Graph = self.invocationExpression()
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==186:
                self.state = 1277
                localctx.OnClause = self.joinOperatorOnClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphToTableOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._graphToTableOutput = None # GraphToTableOutputContext
            self.Outputs = list() # of GraphToTableOutputContexts

        def GRAPHTOTABLE(self):
            return self.getToken(KqlParser.GRAPHTOTABLE, 0)

        def graphToTableOutput(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.GraphToTableOutputContext)
            else:
                return self.getTypedRuleContext(KqlParser.GraphToTableOutputContext,i)


        def COMMA(self):
            return self.getToken(KqlParser.COMMA, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_graphToTableOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphToTableOperator" ):
                listener.enterGraphToTableOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphToTableOperator" ):
                listener.exitGraphToTableOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphToTableOperator" ):
                return visitor.visitGraphToTableOperator(self)
            else:
                return visitor.visitChildren(self)




    def graphToTableOperator(self):

        localctx = KqlParser.GraphToTableOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_graphToTableOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(KqlParser.GRAPHTOTABLE)
            self.state = 1281
            localctx._graphToTableOutput = self.graphToTableOutput()
            localctx.Outputs.append(localctx._graphToTableOutput)

            self.state = 1282
            self.match(KqlParser.COMMA)
            self.state = 1283
            localctx._graphToTableOutput = self.graphToTableOutput()
            localctx.Outputs.append(localctx._graphToTableOutput)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphToTableOutputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self.AsClause = None # GraphToTableAsClauseContext
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts

        def NODES(self):
            return self.getToken(KqlParser.NODES, 0)

        def EDGES(self):
            return self.getToken(KqlParser.EDGES, 0)

        def graphToTableAsClause(self):
            return self.getTypedRuleContext(KqlParser.GraphToTableAsClauseContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_graphToTableOutput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphToTableOutput" ):
                listener.enterGraphToTableOutput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphToTableOutput" ):
                listener.exitGraphToTableOutput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphToTableOutput" ):
                return visitor.visitGraphToTableOutput(self)
            else:
                return visitor.visitChildren(self)




    def graphToTableOutput(self):

        localctx = KqlParser.GraphToTableOutputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_graphToTableOutput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==78 or _la==161):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1286
                localctx.AsClause = self.graphToTableAsClause()


            self.state = 1292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0):
                self.state = 1289
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphToTableAsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def AS(self):
            return self.getToken(KqlParser.AS, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphToTableAsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphToTableAsClause" ):
                listener.enterGraphToTableAsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphToTableAsClause" ):
                listener.exitGraphToTableAsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphToTableAsClause" ):
                return visitor.visitGraphToTableAsClause(self)
            else:
                return visitor.visitChildren(self)




    def graphToTableAsClause(self):

        localctx = KqlParser.GraphToTableAsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_graphToTableAsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(KqlParser.AS)
            self.state = 1296
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphShortestPathsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._graphMatchPattern = None # GraphMatchPatternContext
            self.Patterns = list() # of GraphMatchPatternContexts
            self.WhereClause = None # GraphMatchWhereClauseContext
            self.ProjectClause = None # GraphMatchProjectClauseContext

        def GRAPHSHORTESTPATHS(self):
            return self.getToken(KqlParser.GRAPHSHORTESTPATHS, 0)

        def graphMatchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.GraphMatchPatternContext)
            else:
                return self.getTypedRuleContext(KqlParser.GraphMatchPatternContext,i)


        def COMMA(self):
            return self.getToken(KqlParser.COMMA, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def graphMatchWhereClause(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchWhereClauseContext,0)


        def graphMatchProjectClause(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchProjectClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphShortestPathsOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphShortestPathsOperator" ):
                listener.enterGraphShortestPathsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphShortestPathsOperator" ):
                listener.exitGraphShortestPathsOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGraphShortestPathsOperator" ):
                return visitor.visitGraphShortestPathsOperator(self)
            else:
                return visitor.visitChildren(self)




    def graphShortestPathsOperator(self):

        localctx = KqlParser.GraphShortestPathsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_graphShortestPathsOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.match(KqlParser.GRAPHSHORTESTPATHS)
            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0):
                self.state = 1299
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1305
            localctx._graphMatchPattern = self.graphMatchPattern()
            localctx.Patterns.append(localctx._graphMatchPattern)

            self.state = 1306
            self.match(KqlParser.COMMA)
            self.state = 1307
            localctx._graphMatchPattern = self.graphMatchPattern()
            localctx.Patterns.append(localctx._graphMatchPattern)
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==259:
                self.state = 1309
                localctx.WhereClause = self.graphMatchWhereClause()


            self.state = 1313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 1312
                localctx.ProjectClause = self.graphMatchProjectClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvokeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FunctionCall = None # DotCompositeFunctionCallExpressionContext

        def INVOKE(self):
            return self.getToken(KqlParser.INVOKE, 0)

        def dotCompositeFunctionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.DotCompositeFunctionCallExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_invokeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvokeOperator" ):
                listener.enterInvokeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvokeOperator" ):
                listener.exitInvokeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvokeOperator" ):
                return visitor.visitInvokeOperator(self)
            else:
                return visitor.visitChildren(self)




    def invokeOperator(self):

        localctx = KqlParser.InvokeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_invokeOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.match(KqlParser.INVOKE)
            self.state = 1316
            localctx.FunctionCall = self.dotCompositeFunctionCallExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Table = None # UnnamedExpressionContext
            self.OnClause = None # JoinOperatorOnClauseContext
            self.WhereClause = None # JoinOperatorWhereClauseContext

        def JOIN(self):
            return self.getToken(KqlParser.JOIN, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def joinOperatorOnClause(self):
            return self.getTypedRuleContext(KqlParser.JoinOperatorOnClauseContext,0)


        def joinOperatorWhereClause(self):
            return self.getTypedRuleContext(KqlParser.JoinOperatorWhereClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_joinOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOperator" ):
                listener.enterJoinOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOperator" ):
                listener.exitJoinOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOperator" ):
                return visitor.visitJoinOperator(self)
            else:
                return visitor.visitChildren(self)




    def joinOperator(self):

        localctx = KqlParser.JoinOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_joinOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1318
            self.match(KqlParser.JOIN)
            self.state = 1322
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1319
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 1325
            localctx.Table = self.unnamedExpression()
            self.state = 1328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [186]:
                self.state = 1326
                localctx.OnClause = self.joinOperatorOnClause()
                pass
            elif token in [259]:
                self.state = 1327
                localctx.WhereClause = self.joinOperatorWhereClause()
                pass
            elif token in [-1, 3, 4, 8, 34, 206]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOperatorOnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unnamedExpression = None # UnnamedExpressionContext
            self.Expressions = list() # of UnnamedExpressionContexts

        def ON(self):
            return self.getToken(KqlParser.ON, 0)

        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_joinOperatorOnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOperatorOnClause" ):
                listener.enterJoinOperatorOnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOperatorOnClause" ):
                listener.exitJoinOperatorOnClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOperatorOnClause" ):
                return visitor.visitJoinOperatorOnClause(self)
            else:
                return visitor.visitChildren(self)




    def joinOperatorOnClause(self):

        localctx = KqlParser.JoinOperatorOnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_joinOperatorOnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.match(KqlParser.ON)
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 622630631754434562) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1729241517781539117) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 1790180853509497601) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & -4800818406911180661) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 492443770949631) != 0):
                self.state = 1331
                localctx._unnamedExpression = self.unnamedExpression()
                localctx.Expressions.append(localctx._unnamedExpression)
                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1332
                    self.match(KqlParser.COMMA)
                    self.state = 1333
                    localctx._unnamedExpression = self.unnamedExpression()
                    localctx.Expressions.append(localctx._unnamedExpression)
                    self.state = 1338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOperatorWhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Predicate = None # UnnamedExpressionContext

        def WHERE(self):
            return self.getToken(KqlParser.WHERE, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_joinOperatorWhereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOperatorWhereClause" ):
                listener.enterJoinOperatorWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOperatorWhereClause" ):
                listener.exitJoinOperatorWhereClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOperatorWhereClause" ):
                return visitor.visitJoinOperatorWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def joinOperatorWhereClause(self):

        localctx = KqlParser.JoinOperatorWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_joinOperatorWhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(KqlParser.WHERE)
            self.state = 1342
            localctx.Predicate = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LookupOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Table = None # UnnamedExpressionContext
            self.OnClause = None # JoinOperatorOnClauseContext

        def LOOKUP(self):
            return self.getToken(KqlParser.LOOKUP, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def joinOperatorOnClause(self):
            return self.getTypedRuleContext(KqlParser.JoinOperatorOnClauseContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_lookupOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLookupOperator" ):
                listener.enterLookupOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLookupOperator" ):
                listener.exitLookupOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLookupOperator" ):
                return visitor.visitLookupOperator(self)
            else:
                return visitor.visitChildren(self)




    def lookupOperator(self):

        localctx = KqlParser.LookupOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_lookupOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.match(KqlParser.LOOKUP)
            self.state = 1348
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1345
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

            self.state = 1351
            localctx.Table = self.unnamedExpression()
            self.state = 1352
            localctx.OnClause = self.joinOperatorOnClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroExpandOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.EntityGroup = None # MacroExpandEntityGroupContext
            self.ScopeName = None # IdentifierOrKeywordOrEscapedNameContext
            self._statement = None # StatementContext
            self.Statements = list() # of StatementContexts

        def MACROEXPAND(self):
            return self.getToken(KqlParser.MACROEXPAND, 0)

        def AS(self):
            return self.getToken(KqlParser.AS, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def macroExpandEntityGroup(self):
            return self.getTypedRuleContext(KqlParser.MacroExpandEntityGroupContext,0)


        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(KqlParser.StatementContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.SEMICOLON)
            else:
                return self.getToken(KqlParser.SEMICOLON, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_macroExpandOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroExpandOperator" ):
                listener.enterMacroExpandOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroExpandOperator" ):
                listener.exitMacroExpandOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroExpandOperator" ):
                return visitor.visitMacroExpandOperator(self)
            else:
                return visitor.visitChildren(self)




    def macroExpandOperator(self):

        localctx = KqlParser.MacroExpandOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_macroExpandOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.match(KqlParser.MACROEXPAND)
            self.state = 1358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1355
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

            self.state = 1361
            localctx.EntityGroup = self.macroExpandEntityGroup()
            self.state = 1362
            self.match(KqlParser.AS)
            self.state = 1363
            localctx.ScopeName = self.identifierOrKeywordOrEscapedName()
            self.state = 1364
            self.match(KqlParser.OPENPAREN)
            self.state = 1365
            localctx._statement = self.statement()
            localctx.Statements.append(localctx._statement)
            self.state = 1370
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1366
                    self.match(KqlParser.SEMICOLON)
                    self.state = 1367
                    localctx._statement = self.statement()
                    localctx.Statements.append(localctx._statement) 
                self.state = 1372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 1373
                self.match(KqlParser.SEMICOLON)


            self.state = 1376
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroExpandEntityGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.EntityGroup = None # EntityGroupExpressionContext
            self.Name = None # SimpleNameReferenceContext
            self.Entity = None # EntityExpressionContext

        def entityGroupExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityGroupExpressionContext,0)


        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def entityExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_macroExpandEntityGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroExpandEntityGroup" ):
                listener.enterMacroExpandEntityGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroExpandEntityGroup" ):
                listener.exitMacroExpandEntityGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroExpandEntityGroup" ):
                return visitor.visitMacroExpandEntityGroup(self)
            else:
                return visitor.visitChildren(self)




    def macroExpandEntityGroup(self):

        localctx = KqlParser.MacroExpandEntityGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_macroExpandEntityGroup)
        try:
            self.state = 1381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                localctx.EntityGroup = self.entityGroupExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1379
                localctx.Name = self.simpleNameReference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1380
                localctx.Entity = self.entityExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityGroupExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unnamedExpression = None # UnnamedExpressionContext
            self.Expressions = list() # of UnnamedExpressionContexts

        def ENTITYGROUP(self):
            return self.getToken(KqlParser.ENTITYGROUP, 0)

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_entityGroupExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityGroupExpression" ):
                listener.enterEntityGroupExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityGroupExpression" ):
                listener.exitEntityGroupExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityGroupExpression" ):
                return visitor.visitEntityGroupExpression(self)
            else:
                return visitor.visitChildren(self)




    def entityGroupExpression(self):

        localctx = KqlParser.EntityGroupExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_entityGroupExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.match(KqlParser.ENTITYGROUP)
            self.state = 1384
            self.match(KqlParser.OPENBRACKET)
            self.state = 1385
            localctx._unnamedExpression = self.unnamedExpression()
            localctx.Expressions.append(localctx._unnamedExpression)
            self.state = 1390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1386
                self.match(KqlParser.COMMA)
                self.state = 1387
                localctx._unnamedExpression = self.unnamedExpression()
                localctx.Expressions.append(localctx._unnamedExpression)
                self.state = 1392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1393
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeGraphOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.SourceColumn = None # SimpleNameReferenceContext
            self.Direction = None # Token
            self.TargetColumn = None # SimpleNameReferenceContext
            self.IdClause = None # MakeGraphIdClauseContext
            self.TablesAndKeysClause = None # MakeGraphTablesAndKeysClauseContext
            self.PartitionedByClause = None # MakeGraphPartitionedByClauseContext

        def MAKEGRAPH(self):
            return self.getToken(KqlParser.MAKEGRAPH, 0)

        def simpleNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.SimpleNameReferenceContext)
            else:
                return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,i)


        def DASHDASH_GREATERTHAN(self):
            return self.getToken(KqlParser.DASHDASH_GREATERTHAN, 0)

        def DASHDASH(self):
            return self.getToken(KqlParser.DASHDASH, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def makeGraphIdClause(self):
            return self.getTypedRuleContext(KqlParser.MakeGraphIdClauseContext,0)


        def makeGraphTablesAndKeysClause(self):
            return self.getTypedRuleContext(KqlParser.MakeGraphTablesAndKeysClauseContext,0)


        def makeGraphPartitionedByClause(self):
            return self.getTypedRuleContext(KqlParser.MakeGraphPartitionedByClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeGraphOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeGraphOperator" ):
                listener.enterMakeGraphOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeGraphOperator" ):
                listener.exitMakeGraphOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeGraphOperator" ):
                return visitor.visitMakeGraphOperator(self)
            else:
                return visitor.visitChildren(self)




    def makeGraphOperator(self):

        localctx = KqlParser.MakeGraphOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_makeGraphOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.match(KqlParser.MAKEGRAPH)
            self.state = 1399
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1396
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

            self.state = 1402
            localctx.SourceColumn = self.simpleNameReference()
            self.state = 1403
            localctx.Direction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==12 or _la==13):
                localctx.Direction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1404
            localctx.TargetColumn = self.simpleNameReference()
            self.state = 1407
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [265]:
                self.state = 1405
                localctx.IdClause = self.makeGraphIdClause()
                pass
            elif token in [260]:
                self.state = 1406
                localctx.TablesAndKeysClause = self.makeGraphTablesAndKeysClause()
                pass
            elif token in [-1, 3, 4, 8, 34, 199, 206]:
                pass
            else:
                pass
            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==199:
                self.state = 1409
                localctx.PartitionedByClause = self.makeGraphPartitionedByClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeGraphIdClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def WITH_NODE_ID(self):
            return self.getToken(KqlParser.WITH_NODE_ID, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeGraphIdClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeGraphIdClause" ):
                listener.enterMakeGraphIdClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeGraphIdClause" ):
                listener.exitMakeGraphIdClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeGraphIdClause" ):
                return visitor.visitMakeGraphIdClause(self)
            else:
                return visitor.visitChildren(self)




    def makeGraphIdClause(self):

        localctx = KqlParser.MakeGraphIdClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_makeGraphIdClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.match(KqlParser.WITH_NODE_ID)
            self.state = 1413
            self.match(KqlParser.EQUAL)
            self.state = 1414
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeGraphTablesAndKeysClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Table = None # InvocationExpressionContext
            self.Column = None # SimpleNameReferenceContext

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def ON(self):
            return self.getToken(KqlParser.ON, 0)

        def invocationExpression(self):
            return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,0)


        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeGraphTablesAndKeysClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeGraphTablesAndKeysClause" ):
                listener.enterMakeGraphTablesAndKeysClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeGraphTablesAndKeysClause" ):
                listener.exitMakeGraphTablesAndKeysClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeGraphTablesAndKeysClause" ):
                return visitor.visitMakeGraphTablesAndKeysClause(self)
            else:
                return visitor.visitChildren(self)




    def makeGraphTablesAndKeysClause(self):

        localctx = KqlParser.MakeGraphTablesAndKeysClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_makeGraphTablesAndKeysClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.match(KqlParser.WITH)
            self.state = 1417
            localctx.Table = self.invocationExpression()
            self.state = 1418
            self.match(KqlParser.ON)
            self.state = 1419
            localctx.Column = self.simpleNameReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeGraphPartitionedByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Entity = None # EntityPathOrElementExpressionContext
            self.SubQuery = None # ContextualSubExpressionContext

        def PARTITIONEDBY(self):
            return self.getToken(KqlParser.PARTITIONEDBY, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def entityPathOrElementExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityPathOrElementExpressionContext,0)


        def contextualSubExpression(self):
            return self.getTypedRuleContext(KqlParser.ContextualSubExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeGraphPartitionedByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeGraphPartitionedByClause" ):
                listener.enterMakeGraphPartitionedByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeGraphPartitionedByClause" ):
                listener.exitMakeGraphPartitionedByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeGraphPartitionedByClause" ):
                return visitor.visitMakeGraphPartitionedByClause(self)
            else:
                return visitor.visitChildren(self)




    def makeGraphPartitionedByClause(self):

        localctx = KqlParser.MakeGraphPartitionedByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_makeGraphPartitionedByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.match(KqlParser.PARTITIONEDBY)
            self.state = 1422
            localctx.Entity = self.entityPathOrElementExpression()
            self.state = 1423
            self.match(KqlParser.OPENPAREN)
            self.state = 1424
            localctx.SubQuery = self.contextualSubExpression()
            self.state = 1425
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._makeSeriesOperatorAggregation = None # MakeSeriesOperatorAggregationContext
            self.Aggregations = list() # of MakeSeriesOperatorAggregationContexts
            self.OnClause = None # MakeSeriesOperatorOnClauseContext
            self.InRangeClause = None # MakeSeriesOperatorInRangeClauseContext
            self.FromToStepClause = None # MakeSeriesOperatorFromToStepClauseContext
            self.ByClause = None # MakeSeriesOperatorByClauseContext

        def MAKESERIES(self):
            return self.getToken(KqlParser.MAKESERIES, 0)

        def makeSeriesOperatorAggregation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.MakeSeriesOperatorAggregationContext)
            else:
                return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorAggregationContext,i)


        def makeSeriesOperatorOnClause(self):
            return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorOnClauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def makeSeriesOperatorInRangeClause(self):
            return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorInRangeClauseContext,0)


        def makeSeriesOperatorFromToStepClause(self):
            return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorFromToStepClauseContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def makeSeriesOperatorByClause(self):
            return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorByClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperator" ):
                listener.enterMakeSeriesOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperator" ):
                listener.exitMakeSeriesOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperator" ):
                return visitor.visitMakeSeriesOperator(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperator(self):

        localctx = KqlParser.MakeSeriesOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_makeSeriesOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.match(KqlParser.MAKESERIES)
            self.state = 1431
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1428
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 1434
            localctx._makeSeriesOperatorAggregation = self.makeSeriesOperatorAggregation()
            localctx.Aggregations.append(localctx._makeSeriesOperatorAggregation)
            self.state = 1439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1435
                self.match(KqlParser.COMMA)
                self.state = 1436
                localctx._makeSeriesOperatorAggregation = self.makeSeriesOperatorAggregation()
                localctx.Aggregations.append(localctx._makeSeriesOperatorAggregation)
                self.state = 1441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1442
            localctx.OnClause = self.makeSeriesOperatorOnClause()
            self.state = 1445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.state = 1443
                localctx.InRangeClause = self.makeSeriesOperatorInRangeClause()
                pass
            elif token in [95, 237, 246]:
                self.state = 1444
                localctx.FromToStepClause = self.makeSeriesOperatorFromToStepClause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 1447
                localctx.ByClause = self.makeSeriesOperatorByClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorOnClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext

        def ON(self):
            return self.getToken(KqlParser.ON, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperatorOnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorOnClause" ):
                listener.enterMakeSeriesOperatorOnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorOnClause" ):
                listener.exitMakeSeriesOperatorOnClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperatorOnClause" ):
                return visitor.visitMakeSeriesOperatorOnClause(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperatorOnClause(self):

        localctx = KqlParser.MakeSeriesOperatorOnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_makeSeriesOperatorOnClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self.match(KqlParser.ON)
            self.state = 1451
            localctx.Expression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorAggregationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.Default = None # MakeSeriesOperatorExpressionDefaultClauseContext

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def makeSeriesOperatorExpressionDefaultClause(self):
            return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorExpressionDefaultClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperatorAggregation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorAggregation" ):
                listener.enterMakeSeriesOperatorAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorAggregation" ):
                listener.exitMakeSeriesOperatorAggregation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperatorAggregation" ):
                return visitor.visitMakeSeriesOperatorAggregation(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperatorAggregation(self):

        localctx = KqlParser.MakeSeriesOperatorAggregationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_makeSeriesOperatorAggregation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            localctx.Expression = self.namedExpression()
            self.state = 1455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 1454
                localctx.Default = self.makeSeriesOperatorExpressionDefaultClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorExpressionDefaultClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Value = None # NamedExpressionContext

        def DEFAULT(self):
            return self.getToken(KqlParser.DEFAULT, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperatorExpressionDefaultClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorExpressionDefaultClause" ):
                listener.enterMakeSeriesOperatorExpressionDefaultClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorExpressionDefaultClause" ):
                listener.exitMakeSeriesOperatorExpressionDefaultClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperatorExpressionDefaultClause" ):
                return visitor.visitMakeSeriesOperatorExpressionDefaultClause(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperatorExpressionDefaultClause(self):

        localctx = KqlParser.MakeSeriesOperatorExpressionDefaultClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_makeSeriesOperatorExpressionDefaultClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self.match(KqlParser.DEFAULT)
            self.state = 1458
            self.match(KqlParser.EQUAL)
            self.state = 1459
            localctx.Value = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorInRangeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FromExpression = None # NamedExpressionContext
            self.ToComma = None # Token
            self.ToExpression = None # NamedExpressionContext
            self.StepComma = None # Token
            self.StepExpression = None # NamedExpressionContext

        def IN(self):
            return self.getToken(KqlParser.IN, 0)

        def RANGE(self):
            return self.getToken(KqlParser.RANGE, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperatorInRangeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorInRangeClause" ):
                listener.enterMakeSeriesOperatorInRangeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorInRangeClause" ):
                listener.exitMakeSeriesOperatorInRangeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperatorInRangeClause" ):
                return visitor.visitMakeSeriesOperatorInRangeClause(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperatorInRangeClause(self):

        localctx = KqlParser.MakeSeriesOperatorInRangeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_makeSeriesOperatorInRangeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.match(KqlParser.IN)
            self.state = 1462
            self.match(KqlParser.RANGE)
            self.state = 1463
            self.match(KqlParser.OPENPAREN)
            self.state = 1464
            localctx.FromExpression = self.namedExpression()
            self.state = 1465
            localctx.ToComma = self.match(KqlParser.COMMA)
            self.state = 1466
            localctx.ToExpression = self.namedExpression()
            self.state = 1467
            localctx.StepComma = self.match(KqlParser.COMMA)
            self.state = 1468
            localctx.StepExpression = self.namedExpression()
            self.state = 1469
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorFromToStepClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FromExpression = None # NamedExpressionContext
            self.ToExpression = None # NamedExpressionContext
            self.StepExpression = None # NamedExpressionContext

        def STEP(self):
            return self.getToken(KqlParser.STEP, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def FROM(self):
            return self.getToken(KqlParser.FROM, 0)

        def TO(self):
            return self.getToken(KqlParser.TO, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperatorFromToStepClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorFromToStepClause" ):
                listener.enterMakeSeriesOperatorFromToStepClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorFromToStepClause" ):
                listener.exitMakeSeriesOperatorFromToStepClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperatorFromToStepClause" ):
                return visitor.visitMakeSeriesOperatorFromToStepClause(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperatorFromToStepClause(self):

        localctx = KqlParser.MakeSeriesOperatorFromToStepClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_makeSeriesOperatorFromToStepClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 1471
                self.match(KqlParser.FROM)
                self.state = 1472
                localctx.FromExpression = self.namedExpression()


            self.state = 1477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==246:
                self.state = 1475
                self.match(KqlParser.TO)
                self.state = 1476
                localctx.ToExpression = self.namedExpression()


            self.state = 1479
            self.match(KqlParser.STEP)
            self.state = 1480
            localctx.StepExpression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperatorByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorByClause" ):
                listener.enterMakeSeriesOperatorByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorByClause" ):
                listener.exitMakeSeriesOperatorByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMakeSeriesOperatorByClause" ):
                return visitor.visitMakeSeriesOperatorByClause(self)
            else:
                return visitor.visitChildren(self)




    def makeSeriesOperatorByClause(self):

        localctx = KqlParser.MakeSeriesOperatorByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_makeSeriesOperatorByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.match(KqlParser.BY)
            self.state = 1483
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1484
                self.match(KqlParser.COMMA)
                self.state = 1485
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self._mvapplyOperatorExpression = None # MvapplyOperatorExpressionContext
            self.Expressions = list() # of MvapplyOperatorExpressionContexts
            self.LimitClause = None # MvapplyOperatorLimitClauseContext
            self.IdClause = None # MvapplyOperatorIdClauseContext
            self.OnExpression = None # ContextualSubExpressionContext

        def ON(self):
            return self.getToken(KqlParser.ON, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def mvapplyOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.MvapplyOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.MvapplyOperatorExpressionContext,i)


        def contextualSubExpression(self):
            return self.getTypedRuleContext(KqlParser.ContextualSubExpressionContext,0)


        def MVAPPLY(self):
            return self.getToken(KqlParser.MVAPPLY, 0)

        def MV_APPLY(self):
            return self.getToken(KqlParser.MV_APPLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def mvapplyOperatorLimitClause(self):
            return self.getTypedRuleContext(KqlParser.MvapplyOperatorLimitClauseContext,0)


        def mvapplyOperatorIdClause(self):
            return self.getTypedRuleContext(KqlParser.MvapplyOperatorIdClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_mvapplyOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperator" ):
                listener.enterMvapplyOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperator" ):
                listener.exitMvapplyOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvapplyOperator" ):
                return visitor.visitMvapplyOperator(self)
            else:
                return visitor.visitChildren(self)




    def mvapplyOperator(self):

        localctx = KqlParser.MvapplyOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_mvapplyOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==157 or _la==159):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or _la==266 or _la==267:
                self.state = 1492
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1497
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1498
            localctx._mvapplyOperatorExpression = self.mvapplyOperatorExpression()
            localctx.Expressions.append(localctx._mvapplyOperatorExpression)
            self.state = 1503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1499
                self.match(KqlParser.COMMA)
                self.state = 1500
                localctx._mvapplyOperatorExpression = self.mvapplyOperatorExpression()
                localctx.Expressions.append(localctx._mvapplyOperatorExpression)
                self.state = 1505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 1506
                localctx.LimitClause = self.mvapplyOperatorLimitClause()


            self.state = 1510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 1509
                localctx.IdClause = self.mvapplyOperatorIdClause()


            self.state = 1512
            self.match(KqlParser.ON)
            self.state = 1513
            self.match(KqlParser.OPENPAREN)
            self.state = 1514
            localctx.OnExpression = self.contextualSubExpression()
            self.state = 1515
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorLimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LimitValue = None # Token

        def LIMIT(self):
            return self.getToken(KqlParser.LIMIT, 0)

        def LONGLITERAL(self):
            return self.getToken(KqlParser.LONGLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_mvapplyOperatorLimitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperatorLimitClause" ):
                listener.enterMvapplyOperatorLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperatorLimitClause" ):
                listener.exitMvapplyOperatorLimitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvapplyOperatorLimitClause" ):
                return visitor.visitMvapplyOperatorLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def mvapplyOperatorLimitClause(self):

        localctx = KqlParser.MvapplyOperatorLimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_mvapplyOperatorLimitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(KqlParser.LIMIT)
            self.state = 1518
            localctx.LimitValue = self.match(KqlParser.LONGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorIdClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.IdValue = None # Token

        def ID(self):
            return self.getToken(KqlParser.ID, 0)

        def GUIDLITERAL(self):
            return self.getToken(KqlParser.GUIDLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_mvapplyOperatorIdClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperatorIdClause" ):
                listener.enterMvapplyOperatorIdClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperatorIdClause" ):
                listener.exitMvapplyOperatorIdClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvapplyOperatorIdClause" ):
                return visitor.visitMvapplyOperatorIdClause(self)
            else:
                return visitor.visitChildren(self)




    def mvapplyOperatorIdClause(self):

        localctx = KqlParser.MvapplyOperatorIdClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_mvapplyOperatorIdClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.match(KqlParser.ID)
            self.state = 1521
            localctx.IdValue = self.match(KqlParser.GUIDLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.ToClause = None # MvapplyOperatorExpressionToClauseContext

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def mvapplyOperatorExpressionToClause(self):
            return self.getTypedRuleContext(KqlParser.MvapplyOperatorExpressionToClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_mvapplyOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperatorExpression" ):
                listener.enterMvapplyOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperatorExpression" ):
                listener.exitMvapplyOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvapplyOperatorExpression" ):
                return visitor.visitMvapplyOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def mvapplyOperatorExpression(self):

        localctx = KqlParser.MvapplyOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_mvapplyOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            localctx.Expression = self.namedExpression()
            self.state = 1525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==246:
                self.state = 1524
                localctx.ToClause = self.mvapplyOperatorExpressionToClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorExpressionToClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Type = None # Token

        def TO(self):
            return self.getToken(KqlParser.TO, 0)

        def TYPELITERAL(self):
            return self.getToken(KqlParser.TYPELITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_mvapplyOperatorExpressionToClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperatorExpressionToClause" ):
                listener.enterMvapplyOperatorExpressionToClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperatorExpressionToClause" ):
                listener.exitMvapplyOperatorExpressionToClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvapplyOperatorExpressionToClause" ):
                return visitor.visitMvapplyOperatorExpressionToClause(self)
            else:
                return visitor.visitChildren(self)




    def mvapplyOperatorExpressionToClause(self):

        localctx = KqlParser.MvapplyOperatorExpressionToClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_mvapplyOperatorExpressionToClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(KqlParser.TO)
            self.state = 1528
            localctx.Type = self.match(KqlParser.TYPELITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvexpandOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self._mvexpandOperatorExpression = None # MvexpandOperatorExpressionContext
            self.Expressions = list() # of MvexpandOperatorExpressionContexts
            self.LimitClause = None # MvapplyOperatorLimitClauseContext

        def mvexpandOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.MvexpandOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.MvexpandOperatorExpressionContext,i)


        def MVEXPAND(self):
            return self.getToken(KqlParser.MVEXPAND, 0)

        def MV_EXPAND(self):
            return self.getToken(KqlParser.MV_EXPAND, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def mvapplyOperatorLimitClause(self):
            return self.getTypedRuleContext(KqlParser.MvapplyOperatorLimitClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_mvexpandOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvexpandOperator" ):
                listener.enterMvexpandOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvexpandOperator" ):
                listener.exitMvexpandOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvexpandOperator" ):
                return visitor.visitMvexpandOperator(self)
            else:
                return visitor.visitChildren(self)




    def mvexpandOperator(self):

        localctx = KqlParser.MvexpandOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_mvexpandOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==158 or _la==160):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or _la==266 or _la==267:
                self.state = 1531
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1537
            localctx._mvexpandOperatorExpression = self.mvexpandOperatorExpression()
            localctx.Expressions.append(localctx._mvexpandOperatorExpression)
            self.state = 1542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1538
                self.match(KqlParser.COMMA)
                self.state = 1539
                localctx._mvexpandOperatorExpression = self.mvexpandOperatorExpression()
                localctx.Expressions.append(localctx._mvexpandOperatorExpression)
                self.state = 1544
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 1545
                localctx.LimitClause = self.mvapplyOperatorLimitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvexpandOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.ToClause = None # MvapplyOperatorExpressionToClauseContext

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def mvapplyOperatorExpressionToClause(self):
            return self.getTypedRuleContext(KqlParser.MvapplyOperatorExpressionToClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_mvexpandOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvexpandOperatorExpression" ):
                listener.enterMvexpandOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvexpandOperatorExpression" ):
                listener.exitMvexpandOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMvexpandOperatorExpression" ):
                return visitor.visitMvexpandOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def mvexpandOperatorExpression(self):

        localctx = KqlParser.MvexpandOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_mvexpandOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            localctx.Expression = self.namedExpression()
            self.state = 1550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==246:
                self.state = 1549
                localctx.ToClause = self.mvapplyOperatorExpressionToClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.KindClause = None # ParseOperatorKindClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.Pattern = None # ParseOperatorPatternContext

        def PARSE(self):
            return self.getToken(KqlParser.PARSE, 0)

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def parseOperatorPattern(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorPatternContext,0)


        def parseOperatorKindClause(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorKindClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parseOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperator" ):
                listener.enterParseOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperator" ):
                listener.exitParseOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseOperator" ):
                return visitor.visitParseOperator(self)
            else:
                return visitor.visitChildren(self)




    def parseOperator(self):

        localctx = KqlParser.ParseOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_parseOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.match(KqlParser.PARSE)
            self.state = 1554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 1553
                localctx.KindClause = self.parseOperatorKindClause()


            self.state = 1556
            localctx.Expression = self.unnamedExpression()
            self.state = 1557
            self.match(KqlParser.WITH)
            self.state = 1558
            localctx.Pattern = self.parseOperatorPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorKindClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Kind = None # Token
            self.FlagsClause = None # ParseOperatorFlagsClauseContext

        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def SIMPLE(self):
            return self.getToken(KqlParser.SIMPLE, 0)

        def REGEX(self):
            return self.getToken(KqlParser.REGEX, 0)

        def RELAXED(self):
            return self.getToken(KqlParser.RELAXED, 0)

        def parseOperatorFlagsClause(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorFlagsClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parseOperatorKindClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorKindClause" ):
                listener.enterParseOperatorKindClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorKindClause" ):
                listener.exitParseOperatorKindClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseOperatorKindClause" ):
                return visitor.visitParseOperatorKindClause(self)
            else:
                return visitor.visitChildren(self)




    def parseOperatorKindClause(self):

        localctx = KqlParser.ParseOperatorKindClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_parseOperatorKindClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1560
            self.match(KqlParser.KIND)
            self.state = 1561
            self.match(KqlParser.EQUAL)
            self.state = 1562
            localctx.Kind = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 216)) & ~0x3f) == 0 and ((1 << (_la - 216)) & 8195) != 0)):
                localctx.Kind = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 1563
                localctx.FlagsClause = self.parseOperatorFlagsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorFlagsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Flags = None # Token

        def FLAGS(self):
            return self.getToken(KqlParser.FLAGS, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_parseOperatorFlagsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorFlagsClause" ):
                listener.enterParseOperatorFlagsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorFlagsClause" ):
                listener.exitParseOperatorFlagsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseOperatorFlagsClause" ):
                return visitor.visitParseOperatorFlagsClause(self)
            else:
                return visitor.visitChildren(self)




    def parseOperatorFlagsClause(self):

        localctx = KqlParser.ParseOperatorFlagsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_parseOperatorFlagsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.match(KqlParser.FLAGS)
            self.state = 1567
            self.match(KqlParser.EQUAL)
            self.state = 1568
            localctx.Flags = self.match(KqlParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorNameAndOptionalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # SimpleNameReferenceContext
            self.Type = None # ScalarTypeContext

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def scalarType(self):
            return self.getTypedRuleContext(KqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parseOperatorNameAndOptionalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorNameAndOptionalType" ):
                listener.enterParseOperatorNameAndOptionalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorNameAndOptionalType" ):
                listener.exitParseOperatorNameAndOptionalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseOperatorNameAndOptionalType" ):
                return visitor.visitParseOperatorNameAndOptionalType(self)
            else:
                return visitor.visitChildren(self)




    def parseOperatorNameAndOptionalType(self):

        localctx = KqlParser.ParseOperatorNameAndOptionalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_parseOperatorNameAndOptionalType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            localctx.Name = self.simpleNameReference()
            self.state = 1573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 1571
                self.match(KqlParser.COLON)
                self.state = 1572
                localctx.Type = self.scalarType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LeadingColumn = None # ParseOperatorNameAndOptionalTypeContext
            self._parseOperatorPatternSegment = None # ParseOperatorPatternSegmentContext
            self.Segments = list() # of ParseOperatorPatternSegmentContexts
            self.TrailingStar = None # Token

        def parseOperatorNameAndOptionalType(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorNameAndOptionalTypeContext,0)


        def parseOperatorPatternSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ParseOperatorPatternSegmentContext)
            else:
                return self.getTypedRuleContext(KqlParser.ParseOperatorPatternSegmentContext,i)


        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_parseOperatorPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorPattern" ):
                listener.enterParseOperatorPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorPattern" ):
                listener.exitParseOperatorPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseOperatorPattern" ):
                return visitor.visitParseOperatorPattern(self)
            else:
                return visitor.visitChildren(self)




    def parseOperatorPattern(self):

        localctx = KqlParser.ParseOperatorPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_parseOperatorPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 622630621017014272) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -8178528127110061463) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 1592259962793370531) != 0) or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & 106397688039329281) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 281474977239039) != 0):
                self.state = 1575
                localctx.LeadingColumn = self.parseOperatorNameAndOptionalType()


            self.state = 1581
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1578
                    localctx._parseOperatorPatternSegment = self.parseOperatorPatternSegment()
                    localctx.Segments.append(localctx._parseOperatorPatternSegment) 
                self.state = 1583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 1585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 1584
                localctx.TrailingStar = self.match(KqlParser.ASTERISK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorPatternSegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Text = None # StringLiteralExpressionContext
            self.Column = None # ParseOperatorNameAndOptionalTypeContext

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def parseOperatorNameAndOptionalType(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorNameAndOptionalTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parseOperatorPatternSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorPatternSegment" ):
                listener.enterParseOperatorPatternSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorPatternSegment" ):
                listener.exitParseOperatorPatternSegment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseOperatorPatternSegment" ):
                return visitor.visitParseOperatorPatternSegment(self)
            else:
                return visitor.visitChildren(self)




    def parseOperatorPatternSegment(self):

        localctx = KqlParser.ParseOperatorPatternSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_parseOperatorPatternSegment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 1587
                self.match(KqlParser.ASTERISK)


            self.state = 1590
            localctx.Text = self.stringLiteralExpression()
            self.state = 1592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 622630621017014272) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -8178528127110061463) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 1592259962793370531) != 0) or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & 106397688039329281) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 281474977239039) != 0):
                self.state = 1591
                localctx.Column = self.parseOperatorNameAndOptionalType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.KindClause = None # ParseOperatorKindClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.Pattern = None # ParseOperatorPatternContext

        def PARSEWHERE(self):
            return self.getToken(KqlParser.PARSEWHERE, 0)

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def parseOperatorPattern(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorPatternContext,0)


        def parseOperatorKindClause(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorKindClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parseWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseWhereOperator" ):
                listener.enterParseWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseWhereOperator" ):
                listener.exitParseWhereOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseWhereOperator" ):
                return visitor.visitParseWhereOperator(self)
            else:
                return visitor.visitChildren(self)




    def parseWhereOperator(self):

        localctx = KqlParser.ParseWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_parseWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.match(KqlParser.PARSEWHERE)
            self.state = 1596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 1595
                localctx.KindClause = self.parseOperatorKindClause()


            self.state = 1598
            localctx.Expression = self.unnamedExpression()
            self.state = 1599
            self.match(KqlParser.WITH)
            self.state = 1600
            localctx.Pattern = self.parseOperatorPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseKvOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expressions = None # UnnamedExpressionContext
            self.Keys = None # RowSchemaContext
            self.WithClause = None # ParseKvWithClauseContext

        def PARSEKV(self):
            return self.getToken(KqlParser.PARSEKV, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def rowSchema(self):
            return self.getTypedRuleContext(KqlParser.RowSchemaContext,0)


        def parseKvWithClause(self):
            return self.getTypedRuleContext(KqlParser.ParseKvWithClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parseKvOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseKvOperator" ):
                listener.enterParseKvOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseKvOperator" ):
                listener.exitParseKvOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseKvOperator" ):
                return visitor.visitParseKvOperator(self)
            else:
                return visitor.visitChildren(self)




    def parseKvOperator(self):

        localctx = KqlParser.ParseKvOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_parseKvOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self.match(KqlParser.PARSEKV)
            self.state = 1603
            localctx.Expressions = self.unnamedExpression()
            self.state = 1604
            localctx.Keys = self.rowSchema()
            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==260:
                self.state = 1605
                localctx.WithClause = self.parseKvWithClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseKvWithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._queryOperatorProperty = None # QueryOperatorPropertyContext
            self.Properties = list() # of QueryOperatorPropertyContexts

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def queryOperatorProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.QueryOperatorPropertyContext)
            else:
                return self.getTypedRuleContext(KqlParser.QueryOperatorPropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_parseKvWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseKvWithClause" ):
                listener.enterParseKvWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseKvWithClause" ):
                listener.exitParseKvWithClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParseKvWithClause" ):
                return visitor.visitParseKvWithClause(self)
            else:
                return visitor.visitChildren(self)




    def parseKvWithClause(self):

        localctx = KqlParser.ParseKvWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_parseKvWithClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.match(KqlParser.WITH)
            self.state = 1609
            self.match(KqlParser.OPENPAREN)
            self.state = 1610
            localctx._queryOperatorProperty = self.queryOperatorProperty()
            localctx.Properties.append(localctx._queryOperatorProperty)
            self.state = 1615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1611
                self.match(KqlParser.COMMA)
                self.state = 1612
                localctx._queryOperatorProperty = self.queryOperatorProperty()
                localctx.Properties.append(localctx._queryOperatorProperty)
                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1618
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.ByExpression = None # EntityExpressionContext
            self.InClause = None # PartitionOperatorInClauseContext
            self.SubExpressionBody = None # PartitionOperatorSubExpressionBodyContext
            self.FullExpressionBody = None # PartitionOperatorFullExpressionBodyContext

        def PARTITION(self):
            return self.getToken(KqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def entityExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityExpressionContext,0)


        def partitionOperatorSubExpressionBody(self):
            return self.getTypedRuleContext(KqlParser.PartitionOperatorSubExpressionBodyContext,0)


        def partitionOperatorFullExpressionBody(self):
            return self.getTypedRuleContext(KqlParser.PartitionOperatorFullExpressionBodyContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def partitionOperatorInClause(self):
            return self.getTypedRuleContext(KqlParser.PartitionOperatorInClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_partitionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOperator" ):
                listener.enterPartitionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOperator" ):
                listener.exitPartitionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOperator" ):
                return visitor.visitPartitionOperator(self)
            else:
                return visitor.visitChildren(self)




    def partitionOperator(self):

        localctx = KqlParser.PartitionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_partitionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.match(KqlParser.PARTITION)
            self.state = 1624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0):
                self.state = 1621
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1627
            self.match(KqlParser.BY)
            self.state = 1628
            localctx.ByExpression = self.entityExpression()
            self.state = 1630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 1629
                localctx.InClause = self.partitionOperatorInClause()


            self.state = 1634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.state = 1632
                localctx.SubExpressionBody = self.partitionOperatorSubExpressionBody()
                pass
            elif token in [29]:
                self.state = 1633
                localctx.FullExpressionBody = self.partitionOperatorFullExpressionBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOperatorInClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FunctionCall = None # FunctionCallExpressionContext
            self.Literal = None # DynamicLiteralExpressionContext

        def IN(self):
            return self.getToken(KqlParser.IN, 0)

        def functionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallExpressionContext,0)


        def dynamicLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DynamicLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_partitionOperatorInClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOperatorInClause" ):
                listener.enterPartitionOperatorInClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOperatorInClause" ):
                listener.exitPartitionOperatorInClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOperatorInClause" ):
                return visitor.visitPartitionOperatorInClause(self)
            else:
                return visitor.visitChildren(self)




    def partitionOperatorInClause(self):

        localctx = KqlParser.PartitionOperatorInClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_partitionOperatorInClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self.match(KqlParser.IN)
            self.state = 1639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 38, 40, 41, 42, 50, 53, 55, 59, 66, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 316]:
                self.state = 1637
                localctx.FunctionCall = self.functionCallExpression()
                pass
            elif token in [285]:
                self.state = 1638
                localctx.Literal = self.dynamicLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOperatorSubExpressionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SubExpression = None # PipeSubExpressionContext

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def pipeSubExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeSubExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_partitionOperatorSubExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOperatorSubExpressionBody" ):
                listener.enterPartitionOperatorSubExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOperatorSubExpressionBody" ):
                listener.exitPartitionOperatorSubExpressionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOperatorSubExpressionBody" ):
                return visitor.visitPartitionOperatorSubExpressionBody(self)
            else:
                return visitor.visitChildren(self)




    def partitionOperatorSubExpressionBody(self):

        localctx = KqlParser.PartitionOperatorSubExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_partitionOperatorSubExpressionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.match(KqlParser.OPENPAREN)
            self.state = 1642
            localctx.SubExpression = self.pipeSubExpression()
            self.state = 1643
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOperatorFullExpressionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # PipeExpressionContext

        def OPENBRACE(self):
            return self.getToken(KqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(KqlParser.CLOSEBRACE, 0)

        def pipeExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_partitionOperatorFullExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOperatorFullExpressionBody" ):
                listener.enterPartitionOperatorFullExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOperatorFullExpressionBody" ):
                listener.exitPartitionOperatorFullExpressionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOperatorFullExpressionBody" ):
                return visitor.visitPartitionOperatorFullExpressionBody(self)
            else:
                return visitor.visitChildren(self)




    def partitionOperatorFullExpressionBody(self):

        localctx = KqlParser.PartitionOperatorFullExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_partitionOperatorFullExpressionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.match(KqlParser.OPENBRACE)
            self.state = 1646
            localctx.Expression = self.pipeExpression()
            self.state = 1647
            self.match(KqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionByOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Column = None # EntityExpressionContext
            self.IdClause = None # PartitionByOperatorIdClauseContext
            self.SubExpression = None # ContextualSubExpressionContext

        def PARTITIONBY(self):
            return self.getToken(KqlParser.PARTITIONBY, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def entityExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityExpressionContext,0)


        def contextualSubExpression(self):
            return self.getTypedRuleContext(KqlParser.ContextualSubExpressionContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def partitionByOperatorIdClause(self):
            return self.getTypedRuleContext(KqlParser.PartitionByOperatorIdClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_partitionByOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionByOperator" ):
                listener.enterPartitionByOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionByOperator" ):
                listener.exitPartitionByOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionByOperator" ):
                return visitor.visitPartitionByOperator(self)
            else:
                return visitor.visitChildren(self)




    def partitionByOperator(self):

        localctx = KqlParser.PartitionByOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_partitionByOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1649
            self.match(KqlParser.PARTITIONBY)
            self.state = 1653
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1650
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1655
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

            self.state = 1656
            localctx.Column = self.entityExpression()
            self.state = 1658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 1657
                localctx.IdClause = self.partitionByOperatorIdClause()


            self.state = 1660
            self.match(KqlParser.OPENPAREN)
            self.state = 1661
            localctx.SubExpression = self.contextualSubExpression()
            self.state = 1662
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionByOperatorIdClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.IdValue = None # Token

        def ID(self):
            return self.getToken(KqlParser.ID, 0)

        def GUIDLITERAL(self):
            return self.getToken(KqlParser.GUIDLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_partitionByOperatorIdClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionByOperatorIdClause" ):
                listener.enterPartitionByOperatorIdClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionByOperatorIdClause" ):
                listener.exitPartitionByOperatorIdClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionByOperatorIdClause" ):
                return visitor.visitPartitionByOperatorIdClause(self)
            else:
                return visitor.visitChildren(self)




    def partitionByOperatorIdClause(self):

        localctx = KqlParser.PartitionByOperatorIdClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_partitionByOperatorIdClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self.match(KqlParser.ID)
            self.state = 1665
            localctx.IdValue = self.match(KqlParser.GUIDLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def PRINT(self):
            return self.getToken(KqlParser.PRINT, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_printOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintOperator" ):
                listener.enterPrintOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintOperator" ):
                listener.exitPrintOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintOperator" ):
                return visitor.visitPrintOperator(self)
            else:
                return visitor.visitChildren(self)




    def printOperator(self):

        localctx = KqlParser.PrintOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_printOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(KqlParser.PRINT)
            self.state = 1668
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1669
                self.match(KqlParser.COMMA)
                self.state = 1670
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectAwayOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._simpleOrWildcardedNameReference = None # SimpleOrWildcardedNameReferenceContext
            self.Columns = list() # of SimpleOrWildcardedNameReferenceContexts

        def PROJECTAWAY(self):
            return self.getToken(KqlParser.PROJECTAWAY, 0)

        def simpleOrWildcardedNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.SimpleOrWildcardedNameReferenceContext)
            else:
                return self.getTypedRuleContext(KqlParser.SimpleOrWildcardedNameReferenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_projectAwayOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectAwayOperator" ):
                listener.enterProjectAwayOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectAwayOperator" ):
                listener.exitProjectAwayOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectAwayOperator" ):
                return visitor.visitProjectAwayOperator(self)
            else:
                return visitor.visitChildren(self)




    def projectAwayOperator(self):

        localctx = KqlParser.ProjectAwayOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_projectAwayOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1676
            self.match(KqlParser.PROJECTAWAY)
            self.state = 1685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121218) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 8358751552889101161) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 7196752211023416333) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -1443165259434554279) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 288230376692775943) != 0):
                self.state = 1677
                localctx._simpleOrWildcardedNameReference = self.simpleOrWildcardedNameReference()
                localctx.Columns.append(localctx._simpleOrWildcardedNameReference)
                self.state = 1682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1678
                    self.match(KqlParser.COMMA)
                    self.state = 1679
                    localctx._simpleOrWildcardedNameReference = self.simpleOrWildcardedNameReference()
                    localctx.Columns.append(localctx._simpleOrWildcardedNameReference)
                    self.state = 1684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectKeepOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._simpleOrWildcardedNameReference = None # SimpleOrWildcardedNameReferenceContext
            self.Columns = list() # of SimpleOrWildcardedNameReferenceContexts

        def PROJECTKEEP(self):
            return self.getToken(KqlParser.PROJECTKEEP, 0)

        def simpleOrWildcardedNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.SimpleOrWildcardedNameReferenceContext)
            else:
                return self.getTypedRuleContext(KqlParser.SimpleOrWildcardedNameReferenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_projectKeepOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectKeepOperator" ):
                listener.enterProjectKeepOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectKeepOperator" ):
                listener.exitProjectKeepOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectKeepOperator" ):
                return visitor.visitProjectKeepOperator(self)
            else:
                return visitor.visitChildren(self)




    def projectKeepOperator(self):

        localctx = KqlParser.ProjectKeepOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_projectKeepOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self.match(KqlParser.PROJECTKEEP)
            self.state = 1688
            localctx._simpleOrWildcardedNameReference = self.simpleOrWildcardedNameReference()
            localctx.Columns.append(localctx._simpleOrWildcardedNameReference)
            self.state = 1693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1689
                self.match(KqlParser.COMMA)
                self.state = 1690
                localctx._simpleOrWildcardedNameReference = self.simpleOrWildcardedNameReference()
                localctx.Columns.append(localctx._simpleOrWildcardedNameReference)
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def PROJECT(self):
            return self.getToken(KqlParser.PROJECT, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_projectOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectOperator" ):
                listener.enterProjectOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectOperator" ):
                listener.exitProjectOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectOperator" ):
                return visitor.visitProjectOperator(self)
            else:
                return visitor.visitChildren(self)




    def projectOperator(self):

        localctx = KqlParser.ProjectOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_projectOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.match(KqlParser.PROJECT)
            self.state = 1705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416134715541506) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1729240967922960685) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 7196752211090525197) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -1443165259434554279) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 504262421452422151) != 0):
                self.state = 1697
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1698
                    self.match(KqlParser.COMMA)
                    self.state = 1699
                    localctx._namedExpression = self.namedExpression()
                    localctx.Expressions.append(localctx._namedExpression)
                    self.state = 1704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectRenameOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def PROJECTRENAME(self):
            return self.getToken(KqlParser.PROJECTRENAME, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_projectRenameOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectRenameOperator" ):
                listener.enterProjectRenameOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectRenameOperator" ):
                listener.exitProjectRenameOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectRenameOperator" ):
                return visitor.visitProjectRenameOperator(self)
            else:
                return visitor.visitChildren(self)




    def projectRenameOperator(self):

        localctx = KqlParser.ProjectRenameOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_projectRenameOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1707
            self.match(KqlParser.PROJECTRENAME)
            self.state = 1716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416134715541506) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1729240967922960685) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 7196752211090525197) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -1443165259434554279) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 504262421452422151) != 0):
                self.state = 1708
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1709
                    self.match(KqlParser.COMMA)
                    self.state = 1710
                    localctx._namedExpression = self.namedExpression()
                    localctx.Expressions.append(localctx._namedExpression)
                    self.state = 1715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectReorderOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._projectReorderExpression = None # ProjectReorderExpressionContext
            self.Expressions = list() # of ProjectReorderExpressionContexts

        def PROJECTREORDER(self):
            return self.getToken(KqlParser.PROJECTREORDER, 0)

        def projectReorderExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ProjectReorderExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.ProjectReorderExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_projectReorderOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectReorderOperator" ):
                listener.enterProjectReorderOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectReorderOperator" ):
                listener.exitProjectReorderOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectReorderOperator" ):
                return visitor.visitProjectReorderOperator(self)
            else:
                return visitor.visitChildren(self)




    def projectReorderOperator(self):

        localctx = KqlParser.ProjectReorderOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_projectReorderOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self.match(KqlParser.PROJECTREORDER)
            self.state = 1727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121218) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 8358751552889101161) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 7196752211023416333) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -1443165259434554279) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 288230376692775943) != 0):
                self.state = 1719
                localctx._projectReorderExpression = self.projectReorderExpression()
                localctx.Expressions.append(localctx._projectReorderExpression)
                self.state = 1724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1720
                    self.match(KqlParser.COMMA)
                    self.state = 1721
                    localctx._projectReorderExpression = self.projectReorderExpression()
                    localctx.Expressions.append(localctx._projectReorderExpression)
                    self.state = 1726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectReorderExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # SimpleOrWildcardedNameReferenceContext
            self.Order = None # Token

        def simpleOrWildcardedNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleOrWildcardedNameReferenceContext,0)


        def ASC(self):
            return self.getToken(KqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(KqlParser.DESC, 0)

        def GRANNYASC(self):
            return self.getToken(KqlParser.GRANNYASC, 0)

        def GRANNYDESC(self):
            return self.getToken(KqlParser.GRANNYDESC, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_projectReorderExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectReorderExpression" ):
                listener.enterProjectReorderExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectReorderExpression" ):
                listener.exitProjectReorderExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectReorderExpression" ):
                return visitor.visitProjectReorderExpression(self)
            else:
                return visitor.visitChildren(self)




    def projectReorderExpression(self):

        localctx = KqlParser.ProjectReorderExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_projectReorderExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            localctx.Expression = self.simpleOrWildcardedNameReference()
            self.state = 1731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1688850128699393) != 0):
                self.state = 1730
                localctx.Order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1688850128699393) != 0)):
                    localctx.Order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReduceByOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.ByExpression = None # NamedExpressionContext
            self.WithClause = None # ReduceByWithClauseContext

        def REDUCE(self):
            return self.getToken(KqlParser.REDUCE, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def reduceByWithClause(self):
            return self.getTypedRuleContext(KqlParser.ReduceByWithClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_reduceByOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReduceByOperator" ):
                listener.enterReduceByOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReduceByOperator" ):
                listener.exitReduceByOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReduceByOperator" ):
                return visitor.visitReduceByOperator(self)
            else:
                return visitor.visitChildren(self)




    def reduceByOperator(self):

        localctx = KqlParser.ReduceByOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_reduceByOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            self.match(KqlParser.REDUCE)
            self.state = 1737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or _la==266 or _la==267:
                self.state = 1734
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1739
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1740
            self.match(KqlParser.BY)
            self.state = 1741
            localctx.ByExpression = self.namedExpression()
            self.state = 1743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==260:
                self.state = 1742
                localctx.WithClause = self.reduceByWithClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReduceByWithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_reduceByWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReduceByWithClause" ):
                listener.enterReduceByWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReduceByWithClause" ):
                listener.exitReduceByWithClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReduceByWithClause" ):
                return visitor.visitReduceByWithClause(self)
            else:
                return visitor.visitChildren(self)




    def reduceByWithClause(self):

        localctx = KqlParser.ReduceByWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_reduceByWithClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.match(KqlParser.WITH)
            self.state = 1746
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1747
                self.match(KqlParser.COMMA)
                self.state = 1748
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.CharType = None # Token
            self.WithClause = None # RenderOperatorWithClauseContext
            self.LegacyPropertyList = None # RenderOperatorLegacyPropertyListContext

        def RENDER(self):
            return self.getToken(KqlParser.RENDER, 0)

        def TABLE(self):
            return self.getToken(KqlParser.TABLE, 0)

        def LIST(self):
            return self.getToken(KqlParser.LIST, 0)

        def BARCHART(self):
            return self.getToken(KqlParser.BARCHART, 0)

        def PIECHART(self):
            return self.getToken(KqlParser.PIECHART, 0)

        def LADDERCHART(self):
            return self.getToken(KqlParser.LADDERCHART, 0)

        def TIMECHART(self):
            return self.getToken(KqlParser.TIMECHART, 0)

        def LINECHART(self):
            return self.getToken(KqlParser.LINECHART, 0)

        def ANOMALYCHART(self):
            return self.getToken(KqlParser.ANOMALYCHART, 0)

        def PIVOTCHART(self):
            return self.getToken(KqlParser.PIVOTCHART, 0)

        def AREACHART(self):
            return self.getToken(KqlParser.AREACHART, 0)

        def STACKEDAREACHART(self):
            return self.getToken(KqlParser.STACKEDAREACHART, 0)

        def SCATTERCHART(self):
            return self.getToken(KqlParser.SCATTERCHART, 0)

        def TIMEPIVOT(self):
            return self.getToken(KqlParser.TIMEPIVOT, 0)

        def COLUMNCHART(self):
            return self.getToken(KqlParser.COLUMNCHART, 0)

        def TIMELINE(self):
            return self.getToken(KqlParser.TIMELINE, 0)

        def CHART3D_(self):
            return self.getToken(KqlParser.CHART3D_, 0)

        def CARD(self):
            return self.getToken(KqlParser.CARD, 0)

        def TREEMAP(self):
            return self.getToken(KqlParser.TREEMAP, 0)

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def renderOperatorWithClause(self):
            return self.getTypedRuleContext(KqlParser.RenderOperatorWithClauseContext,0)


        def renderOperatorLegacyPropertyList(self):
            return self.getTypedRuleContext(KqlParser.RenderOperatorLegacyPropertyListContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_renderOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperator" ):
                listener.enterRenderOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperator" ):
                listener.exitRenderOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenderOperator" ):
                return visitor.visitRenderOperator(self)
            else:
                return visitor.visitChildren(self)




    def renderOperator(self):

        localctx = KqlParser.RenderOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_renderOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.match(KqlParser.RENDER)
            self.state = 1755
            localctx.CharType = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1445743578755104768) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 769) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & 1133738226352131) != 0) or _la==316):
                localctx.CharType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1756
                localctx.WithClause = self.renderOperatorWithClause()

            elif la_ == 2:
                self.state = 1757
                localctx.LegacyPropertyList = self.renderOperatorLegacyPropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorWithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._renderOperatorProperty = None # RenderOperatorPropertyContext
            self.Properties = list() # of RenderOperatorPropertyContexts

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def renderOperatorProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RenderOperatorPropertyContext)
            else:
                return self.getTypedRuleContext(KqlParser.RenderOperatorPropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_renderOperatorWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperatorWithClause" ):
                listener.enterRenderOperatorWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperatorWithClause" ):
                listener.exitRenderOperatorWithClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenderOperatorWithClause" ):
                return visitor.visitRenderOperatorWithClause(self)
            else:
                return visitor.visitChildren(self)




    def renderOperatorWithClause(self):

        localctx = KqlParser.RenderOperatorWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_renderOperatorWithClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.match(KqlParser.WITH)
            self.state = 1761
            self.match(KqlParser.OPENPAREN)
            self.state = 1770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39 or _la==45 or _la==137 or _la==140 or ((((_la - 227)) & ~0x3f) == 0 and ((1 << (_la - 227)) & 4501400604377089) != 0):
                self.state = 1762
                localctx._renderOperatorProperty = self.renderOperatorProperty()
                localctx.Properties.append(localctx._renderOperatorProperty)
                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 1763
                    self.match(KqlParser.COMMA)
                    self.state = 1764
                    localctx._renderOperatorProperty = self.renderOperatorProperty()
                    localctx.Properties.append(localctx._renderOperatorProperty)
                    self.state = 1769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1772
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorLegacyPropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._renderOperatorLegacyProperty = None # RenderOperatorLegacyPropertyContext
            self.Properties = list() # of RenderOperatorLegacyPropertyContexts

        def renderOperatorLegacyProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RenderOperatorLegacyPropertyContext)
            else:
                return self.getTypedRuleContext(KqlParser.RenderOperatorLegacyPropertyContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_renderOperatorLegacyPropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperatorLegacyPropertyList" ):
                listener.enterRenderOperatorLegacyPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperatorLegacyPropertyList" ):
                listener.exitRenderOperatorLegacyPropertyList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenderOperatorLegacyPropertyList" ):
                return visitor.visitRenderOperatorLegacyPropertyList(self)
            else:
                return visitor.visitChildren(self)




    def renderOperatorLegacyPropertyList(self):

        localctx = KqlParser.RenderOperatorLegacyPropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_renderOperatorLegacyPropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1774
                localctx._renderOperatorLegacyProperty = self.renderOperatorLegacyProperty()
                localctx.Properties.append(localctx._renderOperatorLegacyProperty)
                self.state = 1777 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==39 or _la==57 or _la==137 or _la==245 or _la==260):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # Token
            self.ExpressionValue = None # FunctionCallOrPathExpressionContext
            self.NameValue = None # SimpleNameReferenceContext
            self.NameListValue = None # RenderPropertyNameListContext
            self.TokenValue = None # Token
            self.BoolValue = None # Token
            self.NumberValue = None # NumericLiteralExpressionContext
            self.LiteralValue = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def TITLE(self):
            return self.getToken(KqlParser.TITLE, 0)

        def functionCallOrPathExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallOrPathExpressionContext,0)


        def XCOLUMN(self):
            return self.getToken(KqlParser.XCOLUMN, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def SERIES(self):
            return self.getToken(KqlParser.SERIES, 0)

        def renderPropertyNameList(self):
            return self.getTypedRuleContext(KqlParser.RenderPropertyNameListContext,0)


        def YCOLUMNS(self):
            return self.getToken(KqlParser.YCOLUMNS, 0)

        def ANOMALYCOLUMNS(self):
            return self.getToken(KqlParser.ANOMALYCOLUMNS, 0)

        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def DEFAULT(self):
            return self.getToken(KqlParser.DEFAULT, 0)

        def UNSTACKED(self):
            return self.getToken(KqlParser.UNSTACKED, 0)

        def STACKED(self):
            return self.getToken(KqlParser.STACKED, 0)

        def STACKED100(self):
            return self.getToken(KqlParser.STACKED100, 0)

        def MAP(self):
            return self.getToken(KqlParser.MAP, 0)

        def XTITLE(self):
            return self.getToken(KqlParser.XTITLE, 0)

        def YTITLE(self):
            return self.getToken(KqlParser.YTITLE, 0)

        def XAXIS(self):
            return self.getToken(KqlParser.XAXIS, 0)

        def LINEAR(self):
            return self.getToken(KqlParser.LINEAR, 0)

        def LOG(self):
            return self.getToken(KqlParser.LOG, 0)

        def YAXIS(self):
            return self.getToken(KqlParser.YAXIS, 0)

        def LEGEND(self):
            return self.getToken(KqlParser.LEGEND, 0)

        def VISIBLE(self):
            return self.getToken(KqlParser.VISIBLE, 0)

        def HIDDEN_(self):
            return self.getToken(KqlParser.HIDDEN_, 0)

        def YSPLIT(self):
            return self.getToken(KqlParser.YSPLIT, 0)

        def NONE(self):
            return self.getToken(KqlParser.NONE, 0)

        def AXES(self):
            return self.getToken(KqlParser.AXES, 0)

        def PANELS(self):
            return self.getToken(KqlParser.PANELS, 0)

        def ACCUMULATE(self):
            return self.getToken(KqlParser.ACCUMULATE, 0)

        def BOOLEANLITERAL(self):
            return self.getToken(KqlParser.BOOLEANLITERAL, 0)

        def YMIN(self):
            return self.getToken(KqlParser.YMIN, 0)

        def numericLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.NumericLiteralExpressionContext,0)


        def YMAX(self):
            return self.getToken(KqlParser.YMAX, 0)

        def XMIN(self):
            return self.getToken(KqlParser.XMIN, 0)

        def literalExpression(self):
            return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,0)


        def XMAX(self):
            return self.getToken(KqlParser.XMAX, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_renderOperatorProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperatorProperty" ):
                listener.enterRenderOperatorProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperatorProperty" ):
                listener.exitRenderOperatorProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenderOperatorProperty" ):
                return visitor.visitRenderOperatorProperty(self)
            else:
                return visitor.visitChildren(self)




    def renderOperatorProperty(self):

        localctx = KqlParser.RenderOperatorPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_renderOperatorProperty)
        self._la = 0 # Token type
        try:
            self.state = 1830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [245]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1779
                localctx.Name = self.match(KqlParser.TITLE)
                self.state = 1780
                self.match(KqlParser.EQUAL)
                self.state = 1781
                localctx.ExpressionValue = self.functionCallOrPathExpression()
                pass
            elif token in [269]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1782
                localctx.Name = self.match(KqlParser.XCOLUMN)
                self.state = 1783
                self.match(KqlParser.EQUAL)
                self.state = 1784
                localctx.NameValue = self.simpleNameReference()
                pass
            elif token in [227]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1785
                localctx.Name = self.match(KqlParser.SERIES)
                self.state = 1786
                self.match(KqlParser.EQUAL)
                self.state = 1787
                localctx.NameListValue = self.renderPropertyNameList()
                pass
            elif token in [274]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1788
                localctx.Name = self.match(KqlParser.YCOLUMNS)
                self.state = 1789
                self.match(KqlParser.EQUAL)
                self.state = 1790
                localctx.NameListValue = self.renderPropertyNameList()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1791
                localctx.Name = self.match(KqlParser.ANOMALYCOLUMNS)
                self.state = 1792
                self.match(KqlParser.EQUAL)
                self.state = 1793
                localctx.NameListValue = self.renderPropertyNameList()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1794
                localctx.Name = self.match(KqlParser.KIND)
                self.state = 1795
                self.match(KqlParser.EQUAL)
                self.state = 1796
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==74 or _la==153 or ((((_la - 232)) & ~0x3f) == 0 and ((1 << (_la - 232)) & 8388611) != 0)):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [272]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1797
                localctx.Name = self.match(KqlParser.XTITLE)
                self.state = 1798
                self.match(KqlParser.EQUAL)
                self.state = 1799
                localctx.ExpressionValue = self.functionCallOrPathExpression()
                pass
            elif token in [278]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1800
                localctx.Name = self.match(KqlParser.YTITLE)
                self.state = 1801
                self.match(KqlParser.EQUAL)
                self.state = 1802
                localctx.ExpressionValue = self.functionCallOrPathExpression()
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1803
                localctx.Name = self.match(KqlParser.XAXIS)
                self.state = 1804
                self.match(KqlParser.EQUAL)
                self.state = 1805
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==145 or _la==149):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [273]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1806
                localctx.Name = self.match(KqlParser.YAXIS)
                self.state = 1807
                self.match(KqlParser.EQUAL)
                self.state = 1808
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==145 or _la==149):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1809
                localctx.Name = self.match(KqlParser.LEGEND)
                self.state = 1810
                self.match(KqlParser.EQUAL)
                self.state = 1811
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==112 or _la==258):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1812
                localctx.Name = self.match(KqlParser.YSPLIT)
                self.state = 1813
                self.match(KqlParser.EQUAL)
                self.state = 1814
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==50 or _la==162 or _la==193):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1815
                localctx.Name = self.match(KqlParser.ACCUMULATE)
                self.state = 1816
                self.match(KqlParser.EQUAL)
                self.state = 1817
                localctx.BoolValue = self.match(KqlParser.BOOLEANLITERAL)
                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1818
                localctx.Name = self.match(KqlParser.YMIN)
                self.state = 1819
                self.match(KqlParser.EQUAL)
                self.state = 1820
                localctx.NumberValue = self.numericLiteralExpression()
                pass
            elif token in [275]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1821
                localctx.Name = self.match(KqlParser.YMAX)
                self.state = 1822
                self.match(KqlParser.EQUAL)
                self.state = 1823
                localctx.NumberValue = self.numericLiteralExpression()
                pass
            elif token in [271]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1824
                localctx.Name = self.match(KqlParser.XMIN)
                self.state = 1825
                self.match(KqlParser.EQUAL)
                self.state = 1826
                localctx.LiteralValue = self.literalExpression()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1827
                localctx.Name = self.match(KqlParser.XMAX)
                self.state = 1828
                self.match(KqlParser.EQUAL)
                self.state = 1829
                localctx.LiteralValue = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderPropertyNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._extendedNameReference = None # ExtendedNameReferenceContext
            self.Names = list() # of ExtendedNameReferenceContexts

        def extendedNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ExtendedNameReferenceContext)
            else:
                return self.getTypedRuleContext(KqlParser.ExtendedNameReferenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_renderPropertyNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderPropertyNameList" ):
                listener.enterRenderPropertyNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderPropertyNameList" ):
                listener.exitRenderPropertyNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenderPropertyNameList" ):
                return visitor.visitRenderPropertyNameList(self)
            else:
                return visitor.visitChildren(self)




    def renderPropertyNameList(self):

        localctx = KqlParser.RenderPropertyNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_renderPropertyNameList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            localctx._extendedNameReference = self.extendedNameReference()
            localctx.Names.append(localctx._extendedNameReference)
            self.state = 1837
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1833
                    self.match(KqlParser.COMMA)
                    self.state = 1834
                    localctx._extendedNameReference = self.extendedNameReference()
                    localctx.Names.append(localctx._extendedNameReference) 
                self.state = 1839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorLegacyPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # Token
            self.StringValue = None # StringLiteralExpressionContext
            self.TokenValue = None # Token
            self.NameListValue = None # RenderPropertyNameListContext
            self.BoolValue = None # Token

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def TITLE(self):
            return self.getToken(KqlParser.TITLE, 0)

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def DEFAULT(self):
            return self.getToken(KqlParser.DEFAULT, 0)

        def UNSTACKED(self):
            return self.getToken(KqlParser.UNSTACKED, 0)

        def STACKED(self):
            return self.getToken(KqlParser.STACKED, 0)

        def STACKED100(self):
            return self.getToken(KqlParser.STACKED100, 0)

        def MAP(self):
            return self.getToken(KqlParser.MAP, 0)

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def renderPropertyNameList(self):
            return self.getTypedRuleContext(KqlParser.RenderPropertyNameListContext,0)


        def ACCUMULATE(self):
            return self.getToken(KqlParser.ACCUMULATE, 0)

        def BOOLEANLITERAL(self):
            return self.getToken(KqlParser.BOOLEANLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_renderOperatorLegacyProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperatorLegacyProperty" ):
                listener.enterRenderOperatorLegacyProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperatorLegacyProperty" ):
                listener.exitRenderOperatorLegacyProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenderOperatorLegacyProperty" ):
                return visitor.visitRenderOperatorLegacyProperty(self)
            else:
                return visitor.visitChildren(self)




    def renderOperatorLegacyProperty(self):

        localctx = KqlParser.RenderOperatorLegacyPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_renderOperatorLegacyProperty)
        self._la = 0 # Token type
        try:
            self.state = 1853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [245]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1840
                localctx.Name = self.match(KqlParser.TITLE)
                self.state = 1841
                self.match(KqlParser.EQUAL)
                self.state = 1842
                localctx.StringValue = self.stringLiteralExpression()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1843
                localctx.Name = self.match(KqlParser.KIND)
                self.state = 1844
                self.match(KqlParser.EQUAL)
                self.state = 1845
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==74 or _la==153 or ((((_la - 232)) & ~0x3f) == 0 and ((1 << (_la - 232)) & 8388611) != 0)):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [260]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1846
                localctx.Name = self.match(KqlParser.WITH)
                self.state = 1847
                localctx.StringValue = self.stringLiteralExpression()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1848
                localctx.Name = self.match(KqlParser.BY)
                self.state = 1849
                localctx.NameListValue = self.renderPropertyNameList()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1850
                localctx.Name = self.match(KqlParser.ACCUMULATE)
                self.state = 1851
                self.match(KqlParser.EQUAL)
                self.state = 1852
                localctx.BoolValue = self.match(KqlParser.BOOLEANLITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleDistinctOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Expression = None # NamedExpressionContext
            self.OfExpression = None # NamedExpressionContext

        def SAMPLE_DISTINCT(self):
            return self.getToken(KqlParser.SAMPLE_DISTINCT, 0)

        def OF(self):
            return self.getToken(KqlParser.OF, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_sampleDistinctOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleDistinctOperator" ):
                listener.enterSampleDistinctOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleDistinctOperator" ):
                listener.exitSampleDistinctOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleDistinctOperator" ):
                return visitor.visitSampleDistinctOperator(self)
            else:
                return visitor.visitChildren(self)




    def sampleDistinctOperator(self):

        localctx = KqlParser.SampleDistinctOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_sampleDistinctOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            self.match(KqlParser.SAMPLE_DISTINCT)
            self.state = 1859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or _la==266 or _la==267:
                self.state = 1856
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1862
            localctx.Expression = self.namedExpression()
            self.state = 1863
            self.match(KqlParser.OF)
            self.state = 1864
            localctx.OfExpression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Expression = None # NamedExpressionContext

        def SAMPLE(self):
            return self.getToken(KqlParser.SAMPLE, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_sampleOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleOperator" ):
                listener.enterSampleOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleOperator" ):
                listener.exitSampleOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleOperator" ):
                return visitor.visitSampleOperator(self)
            else:
                return visitor.visitChildren(self)




    def sampleOperator(self):

        localctx = KqlParser.SampleOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_sampleOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1866
            self.match(KqlParser.SAMPLE)
            self.state = 1870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or _la==266 or _la==267:
                self.state = 1867
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1873
            localctx.Expression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.OrderByClause = None # ScanOperatorOrderByClauseContext
            self.PartitionByClause = None # ScanOperatorPartitionByClauseContext
            self.DeclareClause = None # ScanOperatorDeclareClauseContext
            self._scanOperatorStep = None # ScanOperatorStepContext
            self.Steps = list() # of ScanOperatorStepContexts

        def SCAN(self):
            return self.getToken(KqlParser.SCAN, 0)

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def scanOperatorOrderByClause(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorOrderByClauseContext,0)


        def scanOperatorPartitionByClause(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorPartitionByClauseContext,0)


        def scanOperatorDeclareClause(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorDeclareClauseContext,0)


        def scanOperatorStep(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ScanOperatorStepContext)
            else:
                return self.getTypedRuleContext(KqlParser.ScanOperatorStepContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_scanOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperator" ):
                listener.enterScanOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperator" ):
                listener.exitScanOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperator" ):
                return visitor.visitScanOperator(self)
            else:
                return visitor.visitChildren(self)




    def scanOperator(self):

        localctx = KqlParser.ScanOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_scanOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            self.match(KqlParser.SCAN)
            self.state = 1879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0):
                self.state = 1876
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 1882
                localctx.OrderByClause = self.scanOperatorOrderByClause()


            self.state = 1886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==197:
                self.state = 1885
                localctx.PartitionByClause = self.scanOperatorPartitionByClause()


            self.state = 1889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 1888
                localctx.DeclareClause = self.scanOperatorDeclareClause()


            self.state = 1891
            self.match(KqlParser.WITH)
            self.state = 1892
            self.match(KqlParser.OPENPAREN)
            self.state = 1894 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1893
                localctx._scanOperatorStep = self.scanOperatorStep()
                localctx.Steps.append(localctx._scanOperatorStep)
                self.state = 1896 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==237):
                    break

            self.state = 1898
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._orderedExpression = None # OrderedExpressionContext
            self.Expressions = list() # of OrderedExpressionContexts

        def ORDER(self):
            return self.getToken(KqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def orderedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.OrderedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.OrderedExpressionContext,i)


        def COMMA(self):
            return self.getToken(KqlParser.COMMA, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorOrderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorOrderByClause" ):
                listener.enterScanOperatorOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorOrderByClause" ):
                listener.exitScanOperatorOrderByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorOrderByClause" ):
                return visitor.visitScanOperatorOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorOrderByClause(self):

        localctx = KqlParser.ScanOperatorOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_scanOperatorOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self.match(KqlParser.ORDER)
            self.state = 1901
            self.match(KqlParser.BY)
            self.state = 1902
            localctx._orderedExpression = self.orderedExpression()
            localctx.Expressions.append(localctx._orderedExpression)

            self.state = 1903
            self.match(KqlParser.COMMA)
            self.state = 1904
            localctx._orderedExpression = self.orderedExpression()
            localctx.Expressions.append(localctx._orderedExpression)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unnamedExpression = None # UnnamedExpressionContext
            self.Expressions = list() # of UnnamedExpressionContexts

        def PARTITION(self):
            return self.getToken(KqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorPartitionByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorPartitionByClause" ):
                listener.enterScanOperatorPartitionByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorPartitionByClause" ):
                listener.exitScanOperatorPartitionByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorPartitionByClause" ):
                return visitor.visitScanOperatorPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorPartitionByClause(self):

        localctx = KqlParser.ScanOperatorPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_scanOperatorPartitionByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1906
            self.match(KqlParser.PARTITION)
            self.state = 1907
            self.match(KqlParser.BY)
            self.state = 1908
            localctx._unnamedExpression = self.unnamedExpression()
            localctx.Expressions.append(localctx._unnamedExpression)
            self.state = 1913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1909
                self.match(KqlParser.COMMA)
                self.state = 1910
                localctx._unnamedExpression = self.unnamedExpression()
                localctx.Expressions.append(localctx._unnamedExpression)
                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorDeclareClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._scalarParameter = None # ScalarParameterContext
            self.Parameters = list() # of ScalarParameterContexts

        def DECLARE(self):
            return self.getToken(KqlParser.DECLARE, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def scalarParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ScalarParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.ScalarParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorDeclareClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorDeclareClause" ):
                listener.enterScanOperatorDeclareClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorDeclareClause" ):
                listener.exitScanOperatorDeclareClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorDeclareClause" ):
                return visitor.visitScanOperatorDeclareClause(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorDeclareClause(self):

        localctx = KqlParser.ScanOperatorDeclareClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_scanOperatorDeclareClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1916
            self.match(KqlParser.DECLARE)
            self.state = 1917
            self.match(KqlParser.OPENPAREN)
            self.state = 1918
            localctx._scalarParameter = self.scalarParameter()
            localctx.Parameters.append(localctx._scalarParameter)
            self.state = 1923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1919
                self.match(KqlParser.COMMA)
                self.state = 1920
                localctx._scalarParameter = self.scalarParameter()
                localctx.Parameters.append(localctx._scalarParameter)
                self.state = 1925
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1926
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorStepContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.OutputClause = None # ScanOperatorStepOutputClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.Body = None # ScanOperatorBodyContext

        def STEP(self):
            return self.getToken(KqlParser.STEP, 0)

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def SEMICOLON(self):
            return self.getToken(KqlParser.SEMICOLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def OPTIONAL(self):
            return self.getToken(KqlParser.OPTIONAL, 0)

        def scanOperatorStepOutputClause(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorStepOutputClauseContext,0)


        def scanOperatorBody(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorBodyContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorStep

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorStep" ):
                listener.enterScanOperatorStep(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorStep" ):
                listener.exitScanOperatorStep(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorStep" ):
                return visitor.visitScanOperatorStep(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorStep(self):

        localctx = KqlParser.ScanOperatorStepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_scanOperatorStep)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1928
            self.match(KqlParser.STEP)
            self.state = 1929
            localctx.Name = self.parameterName()
            self.state = 1931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==187:
                self.state = 1930
                self.match(KqlParser.OPTIONAL)


            self.state = 1934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==191:
                self.state = 1933
                localctx.OutputClause = self.scanOperatorStepOutputClause()


            self.state = 1936
            self.match(KqlParser.COLON)
            self.state = 1937
            localctx.Expression = self.unnamedExpression()
            self.state = 1939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 1938
                localctx.Body = self.scanOperatorBody()


            self.state = 1941
            self.match(KqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorStepOutputClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OutputKind = None # Token

        def OUTPUT(self):
            return self.getToken(KqlParser.OUTPUT, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def ALL(self):
            return self.getToken(KqlParser.ALL, 0)

        def LAST(self):
            return self.getToken(KqlParser.LAST, 0)

        def NONE(self):
            return self.getToken(KqlParser.NONE, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorStepOutputClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorStepOutputClause" ):
                listener.enterScanOperatorStepOutputClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorStepOutputClause" ):
                listener.exitScanOperatorStepOutputClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorStepOutputClause" ):
                return visitor.visitScanOperatorStepOutputClause(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorStepOutputClause(self):

        localctx = KqlParser.ScanOperatorStepOutputClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_scanOperatorStepOutputClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self.match(KqlParser.OUTPUT)
            self.state = 1944
            self.match(KqlParser.EQUAL)
            self.state = 1945
            localctx.OutputKind = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==42 or _la==139 or _la==162):
                localctx.OutputKind = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._scanOperatorAssignment = None # ScanOperatorAssignmentContext
            self.Assignments = list() # of ScanOperatorAssignmentContexts

        def EQUAL_GREATERTHAN(self):
            return self.getToken(KqlParser.EQUAL_GREATERTHAN, 0)

        def scanOperatorAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ScanOperatorAssignmentContext)
            else:
                return self.getTypedRuleContext(KqlParser.ScanOperatorAssignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorBody" ):
                listener.enterScanOperatorBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorBody" ):
                listener.exitScanOperatorBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorBody" ):
                return visitor.visitScanOperatorBody(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorBody(self):

        localctx = KqlParser.ScanOperatorBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_scanOperatorBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.match(KqlParser.EQUAL_GREATERTHAN)
            self.state = 1948
            localctx._scanOperatorAssignment = self.scanOperatorAssignment()
            localctx.Assignments.append(localctx._scanOperatorAssignment)
            self.state = 1953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1949
                self.match(KqlParser.COMMA)
                self.state = 1950
                localctx._scanOperatorAssignment = self.scanOperatorAssignment()
                localctx.Assignments.append(localctx._scanOperatorAssignment)
                self.state = 1955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Expression = None # UnnamedExpressionContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorAssignment" ):
                listener.enterScanOperatorAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorAssignment" ):
                listener.exitScanOperatorAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanOperatorAssignment" ):
                return visitor.visitScanOperatorAssignment(self)
            else:
                return visitor.visitChildren(self)




    def scanOperatorAssignment(self):

        localctx = KqlParser.ScanOperatorAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_scanOperatorAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1956
            localctx.Name = self.parameterName()
            self.state = 1957
            self.match(KqlParser.EQUAL)
            self.state = 1958
            localctx.Expression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.DataScope = None # DataScopeClauseContext
            self.InClause = None # SearchOperatorInClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.Star = None # StarExpressionContext
            self.StarAndExpression = None # SearchOperatorStarAndExpressionContext

        def SEARCH(self):
            return self.getToken(KqlParser.SEARCH, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def starExpression(self):
            return self.getTypedRuleContext(KqlParser.StarExpressionContext,0)


        def searchOperatorStarAndExpression(self):
            return self.getTypedRuleContext(KqlParser.SearchOperatorStarAndExpressionContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def dataScopeClause(self):
            return self.getTypedRuleContext(KqlParser.DataScopeClauseContext,0)


        def searchOperatorInClause(self):
            return self.getTypedRuleContext(KqlParser.SearchOperatorInClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_searchOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchOperator" ):
                listener.enterSearchOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchOperator" ):
                listener.exitSearchOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchOperator" ):
                return visitor.visitSearchOperator(self)
            else:
                return visitor.visitChildren(self)




    def searchOperator(self):

        localctx = KqlParser.SearchOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_searchOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1960
            self.match(KqlParser.SEARCH)
            self.state = 1964
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1961
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1966
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

            self.state = 1968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 1967
                localctx.DataScope = self.dataScopeClause()


            self.state = 1971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 1970
                localctx.InClause = self.searchOperatorInClause()


            self.state = 1976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1973
                localctx.Expression = self.unnamedExpression()
                pass

            elif la_ == 2:
                self.state = 1974
                localctx.Star = self.starExpression()
                pass

            elif la_ == 3:
                self.state = 1975
                localctx.StarAndExpression = self.searchOperatorStarAndExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchOperatorStarAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # UnnamedExpressionContext

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def AND(self):
            return self.getToken(KqlParser.AND, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_searchOperatorStarAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchOperatorStarAndExpression" ):
                listener.enterSearchOperatorStarAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchOperatorStarAndExpression" ):
                listener.exitSearchOperatorStarAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchOperatorStarAndExpression" ):
                return visitor.visitSearchOperatorStarAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def searchOperatorStarAndExpression(self):

        localctx = KqlParser.SearchOperatorStarAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_searchOperatorStarAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            self.match(KqlParser.ASTERISK)
            self.state = 1979
            self.match(KqlParser.AND)
            self.state = 1980
            localctx.Expression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchOperatorInClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._findOperatorSource = None # FindOperatorSourceContext
            self.Expressions = list() # of FindOperatorSourceContexts

        def IN(self):
            return self.getToken(KqlParser.IN, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def findOperatorSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.FindOperatorSourceContext)
            else:
                return self.getTypedRuleContext(KqlParser.FindOperatorSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_searchOperatorInClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchOperatorInClause" ):
                listener.enterSearchOperatorInClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchOperatorInClause" ):
                listener.exitSearchOperatorInClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchOperatorInClause" ):
                return visitor.visitSearchOperatorInClause(self)
            else:
                return visitor.visitChildren(self)




    def searchOperatorInClause(self):

        localctx = KqlParser.SearchOperatorInClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_searchOperatorInClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.match(KqlParser.IN)
            self.state = 1983
            self.match(KqlParser.OPENPAREN)
            self.state = 1984
            localctx._findOperatorSource = self.findOperatorSource()
            localctx.Expressions.append(localctx._findOperatorSource)
            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 1985
                self.match(KqlParser.COMMA)
                self.state = 1986
                localctx._findOperatorSource = self.findOperatorSource()
                localctx.Expressions.append(localctx._findOperatorSource)
                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1992
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SerializeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def SERIALIZE(self):
            return self.getToken(KqlParser.SERIALIZE, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_serializeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerializeOperator" ):
                listener.enterSerializeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerializeOperator" ):
                listener.exitSerializeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSerializeOperator" ):
                return visitor.visitSerializeOperator(self)
            else:
                return visitor.visitChildren(self)




    def serializeOperator(self):

        localctx = KqlParser.SerializeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_serializeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            self.match(KqlParser.SERIALIZE)
            self.state = 1998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or _la==266 or _la==267:
                self.state = 1995
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2001
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2002
                self.match(KqlParser.COMMA)
                self.state = 2003
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 2008
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._orderedExpression = None # OrderedExpressionContext
            self.Expressions = list() # of OrderedExpressionContexts

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def orderedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.OrderedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.OrderedExpressionContext,i)


        def SORT(self):
            return self.getToken(KqlParser.SORT, 0)

        def ORDER(self):
            return self.getToken(KqlParser.ORDER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_sortOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortOperator" ):
                listener.enterSortOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortOperator" ):
                listener.exitSortOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortOperator" ):
                return visitor.visitSortOperator(self)
            else:
                return visitor.visitChildren(self)




    def sortOperator(self):

        localctx = KqlParser.SortOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_sortOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==189 or _la==230):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0):
                self.state = 2010
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2016
            self.match(KqlParser.BY)
            self.state = 2017
            localctx._orderedExpression = self.orderedExpression()
            localctx.Expressions.append(localctx._orderedExpression)
            self.state = 2022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2018
                self.match(KqlParser.COMMA)
                self.state = 2019
                localctx._orderedExpression = self.orderedExpression()
                localctx.Expressions.append(localctx._orderedExpression)
                self.state = 2024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.Ordering = None # SortOrderingContext

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def sortOrdering(self):
            return self.getTypedRuleContext(KqlParser.SortOrderingContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_orderedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedExpression" ):
                listener.enterOrderedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedExpression" ):
                listener.exitOrderedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedExpression" ):
                return visitor.visitOrderedExpression(self)
            else:
                return visitor.visitChildren(self)




    def orderedExpression(self):

        localctx = KqlParser.OrderedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_orderedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2025
            localctx.Expression = self.namedExpression()
            self.state = 2026
            localctx.Ordering = self.sortOrdering()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortOrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OrderKind = None # Token
            self.NullsKind = None # Token

        def NULLS(self):
            return self.getToken(KqlParser.NULLS, 0)

        def ASC(self):
            return self.getToken(KqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(KqlParser.DESC, 0)

        def FIRST(self):
            return self.getToken(KqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(KqlParser.LAST, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_sortOrdering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortOrdering" ):
                listener.enterSortOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortOrdering" ):
                listener.exitSortOrdering(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortOrdering" ):
                return visitor.visitSortOrdering(self)
            else:
                return visitor.visitChildren(self)




    def sortOrdering(self):

        localctx = KqlParser.SortOrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_sortOrdering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or _la==76:
                self.state = 2028
                localctx.OrderKind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==48 or _la==76):
                    localctx.OrderKind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184:
                self.state = 2031
                self.match(KqlParser.NULLS)
                self.state = 2032
                localctx.NullsKind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==92 or _la==139):
                    localctx.NullsKind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SummarizeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts
            self.ByClause = None # SummarizeOperatorByClauseContext

        def SUMMARIZE(self):
            return self.getToken(KqlParser.SUMMARIZE, 0)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def summarizeOperatorByClause(self):
            return self.getTypedRuleContext(KqlParser.SummarizeOperatorByClauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_summarizeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSummarizeOperator" ):
                listener.enterSummarizeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSummarizeOperator" ):
                listener.exitSummarizeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSummarizeOperator" ):
                return visitor.visitSummarizeOperator(self)
            else:
                return visitor.visitChildren(self)




    def summarizeOperator(self):

        localctx = KqlParser.SummarizeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_summarizeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self.match(KqlParser.SUMMARIZE)
            self.state = 2039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or _la==266 or _la==267:
                self.state = 2036
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2041
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 2042
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 2047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 2043
                    self.match(KqlParser.COMMA)
                    self.state = 2044
                    localctx._namedExpression = self.namedExpression()
                    localctx.Expressions.append(localctx._namedExpression)
                    self.state = 2049
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 2052
                localctx.ByClause = self.summarizeOperatorByClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SummarizeOperatorByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts
            self.BinClause = None # SummarizeOperatorLegacyBinClauseContext

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self):
            return self.getToken(KqlParser.COMMA, 0)

        def summarizeOperatorLegacyBinClause(self):
            return self.getTypedRuleContext(KqlParser.SummarizeOperatorLegacyBinClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_summarizeOperatorByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSummarizeOperatorByClause" ):
                listener.enterSummarizeOperatorByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSummarizeOperatorByClause" ):
                listener.exitSummarizeOperatorByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSummarizeOperatorByClause" ):
                return visitor.visitSummarizeOperatorByClause(self)
            else:
                return visitor.visitChildren(self)




    def summarizeOperatorByClause(self):

        localctx = KqlParser.SummarizeOperatorByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_summarizeOperatorByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.match(KqlParser.BY)
            self.state = 2056
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)

            self.state = 2057
            self.match(KqlParser.COMMA)
            self.state = 2058
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 2060
                localctx.BinClause = self.summarizeOperatorLegacyBinClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SummarizeOperatorLegacyBinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NumberLikeLiteralExpressionContext

        def BIN(self):
            return self.getToken(KqlParser.BIN, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def numberLikeLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.NumberLikeLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_summarizeOperatorLegacyBinClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSummarizeOperatorLegacyBinClause" ):
                listener.enterSummarizeOperatorLegacyBinClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSummarizeOperatorLegacyBinClause" ):
                listener.exitSummarizeOperatorLegacyBinClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSummarizeOperatorLegacyBinClause" ):
                return visitor.visitSummarizeOperatorLegacyBinClause(self)
            else:
                return visitor.visitChildren(self)




    def summarizeOperatorLegacyBinClause(self):

        localctx = KqlParser.SummarizeOperatorLegacyBinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_summarizeOperatorLegacyBinClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.match(KqlParser.BIN)
            self.state = 2064
            self.match(KqlParser.EQUAL)
            self.state = 2065
            localctx.Expression = self.numberLikeLiteralExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Expression = None # NamedExpressionContext

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def LIMIT(self):
            return self.getToken(KqlParser.LIMIT, 0)

        def TAKE(self):
            return self.getToken(KqlParser.TAKE, 0)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_takeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTakeOperator" ):
                listener.enterTakeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTakeOperator" ):
                listener.exitTakeOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTakeOperator" ):
                return visitor.visitTakeOperator(self)
            else:
                return visitor.visitChildren(self)




    def takeOperator(self):

        localctx = KqlParser.TakeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_takeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==144 or _la==240):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or _la==266 or _la==267:
                self.state = 2068
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2074
            localctx.Expression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Expression = None # NamedExpressionContext
            self.ByExpression = None # OrderedExpressionContext

        def TOP(self):
            return self.getToken(KqlParser.TOP, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def orderedExpression(self):
            return self.getTypedRuleContext(KqlParser.OrderedExpressionContext,0)


        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_topOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopOperator" ):
                listener.enterTopOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopOperator" ):
                listener.exitTopOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopOperator" ):
                return visitor.visitTopOperator(self)
            else:
                return visitor.visitChildren(self)




    def topOperator(self):

        localctx = KqlParser.TopOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_topOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2076
            self.match(KqlParser.TOP)
            self.state = 2080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or _la==266 or _la==267:
                self.state = 2077
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2083
            localctx.Expression = self.namedExpression()
            self.state = 2084
            self.match(KqlParser.BY)
            self.state = 2085
            localctx.ByExpression = self.orderedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopHittersOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.OfExpression = None # NamedExpressionContext
            self.ByClause = None # TopHittersOperatorByClauseContext

        def TOP_HITTERS(self):
            return self.getToken(KqlParser.TOP_HITTERS, 0)

        def OF(self):
            return self.getToken(KqlParser.OF, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def topHittersOperatorByClause(self):
            return self.getTypedRuleContext(KqlParser.TopHittersOperatorByClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_topHittersOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopHittersOperator" ):
                listener.enterTopHittersOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopHittersOperator" ):
                listener.exitTopHittersOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopHittersOperator" ):
                return visitor.visitTopHittersOperator(self)
            else:
                return visitor.visitChildren(self)




    def topHittersOperator(self):

        localctx = KqlParser.TopHittersOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_topHittersOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            self.match(KqlParser.TOP_HITTERS)
            self.state = 2088
            localctx.Expression = self.namedExpression()
            self.state = 2089
            self.match(KqlParser.OF)
            self.state = 2090
            localctx.OfExpression = self.namedExpression()
            self.state = 2092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 2091
                localctx.ByClause = self.topHittersOperatorByClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopHittersOperatorByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ByExpression = None # OrderedExpressionContext

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def orderedExpression(self):
            return self.getTypedRuleContext(KqlParser.OrderedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_topHittersOperatorByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopHittersOperatorByClause" ):
                listener.enterTopHittersOperatorByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopHittersOperatorByClause" ):
                listener.exitTopHittersOperatorByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopHittersOperatorByClause" ):
                return visitor.visitTopHittersOperatorByClause(self)
            else:
                return visitor.visitChildren(self)




    def topHittersOperatorByClause(self):

        localctx = KqlParser.TopHittersOperatorByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_topHittersOperatorByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2094
            self.match(KqlParser.BY)
            self.state = 2095
            localctx.ByExpression = self.orderedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopNestedOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._topNestedOperatorPart = None # TopNestedOperatorPartContext
            self.Segments = list() # of TopNestedOperatorPartContexts

        def topNestedOperatorPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.TopNestedOperatorPartContext)
            else:
                return self.getTypedRuleContext(KqlParser.TopNestedOperatorPartContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_topNestedOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopNestedOperator" ):
                listener.enterTopNestedOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopNestedOperator" ):
                listener.exitTopNestedOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopNestedOperator" ):
                return visitor.visitTopNestedOperator(self)
            else:
                return visitor.visitChildren(self)




    def topNestedOperator(self):

        localctx = KqlParser.TopNestedOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_topNestedOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2097
            localctx._topNestedOperatorPart = self.topNestedOperatorPart()
            localctx.Segments.append(localctx._topNestedOperatorPart)
            self.state = 2102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2098
                self.match(KqlParser.COMMA)
                self.state = 2099
                localctx._topNestedOperatorPart = self.topNestedOperatorPart()
                localctx.Segments.append(localctx._topNestedOperatorPart)
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopNestedOperatorPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.OfExpression = None # NamedExpressionContext
            self.WithOthers = None # TopNestedOperatorWithOthersClauseContext
            self.ByExpression = None # OrderedExpressionContext

        def TOP_NESTED(self):
            return self.getToken(KqlParser.TOP_NESTED, 0)

        def OF(self):
            return self.getToken(KqlParser.OF, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def orderedExpression(self):
            return self.getTypedRuleContext(KqlParser.OrderedExpressionContext,0)


        def topNestedOperatorWithOthersClause(self):
            return self.getTypedRuleContext(KqlParser.TopNestedOperatorWithOthersClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_topNestedOperatorPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopNestedOperatorPart" ):
                listener.enterTopNestedOperatorPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopNestedOperatorPart" ):
                listener.exitTopNestedOperatorPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopNestedOperatorPart" ):
                return visitor.visitTopNestedOperatorPart(self)
            else:
                return visitor.visitChildren(self)




    def topNestedOperatorPart(self):

        localctx = KqlParser.TopNestedOperatorPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_topNestedOperatorPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            self.match(KqlParser.TOP_NESTED)
            self.state = 2107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 2106
                localctx.Expression = self.namedExpression()


            self.state = 2109
            self.match(KqlParser.OF)
            self.state = 2110
            localctx.OfExpression = self.namedExpression()
            self.state = 2112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==260:
                self.state = 2111
                localctx.WithOthers = self.topNestedOperatorWithOthersClause()


            self.state = 2114
            self.match(KqlParser.BY)
            self.state = 2115
            localctx.ByExpression = self.orderedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopNestedOperatorWithOthersClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def OTHERS(self):
            return self.getToken(KqlParser.OTHERS, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_topNestedOperatorWithOthersClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopNestedOperatorWithOthersClause" ):
                listener.enterTopNestedOperatorWithOthersClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopNestedOperatorWithOthersClause" ):
                listener.exitTopNestedOperatorWithOthersClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopNestedOperatorWithOthersClause" ):
                return visitor.visitTopNestedOperatorWithOthersClause(self)
            else:
                return visitor.visitChildren(self)




    def topNestedOperatorWithOthersClause(self):

        localctx = KqlParser.TopNestedOperatorWithOthersClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_topNestedOperatorWithOthersClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            self.match(KqlParser.WITH)
            self.state = 2118
            self.match(KqlParser.OTHERS)
            self.state = 2119
            self.match(KqlParser.EQUAL)
            self.state = 2120
            localctx.Expression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._unionOperatorExpression = None # UnionOperatorExpressionContext
            self.Expressions = list() # of UnionOperatorExpressionContexts

        def UNION(self):
            return self.getToken(KqlParser.UNION, 0)

        def unionOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.UnionOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.UnionOperatorExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_unionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionOperator" ):
                listener.enterUnionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionOperator" ):
                listener.exitUnionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionOperator" ):
                return visitor.visitUnionOperator(self)
            else:
                return visitor.visitChildren(self)




    def unionOperator(self):

        localctx = KqlParser.UnionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_unionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2122
            self.match(KqlParser.UNION)
            self.state = 2126
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2123
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 2128
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

            self.state = 2129
            localctx._unionOperatorExpression = self.unionOperatorExpression()
            localctx.Expressions.append(localctx._unionOperatorExpression)
            self.state = 2134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2130
                self.match(KqlParser.COMMA)
                self.state = 2131
                localctx._unionOperatorExpression = self.unionOperatorExpression()
                localctx.Expressions.append(localctx._unionOperatorExpression)
                self.state = 2136
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcardedEntityExpression(self):
            return self.getTypedRuleContext(KqlParser.WildcardedEntityExpressionContext,0)


        def entityNameReference(self):
            return self.getTypedRuleContext(KqlParser.EntityNameReferenceContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(KqlParser.ParenthesizedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_unionOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionOperatorExpression" ):
                listener.enterUnionOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionOperatorExpression" ):
                listener.exitUnionOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionOperatorExpression" ):
                return visitor.visitUnionOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def unionOperatorExpression(self):

        localctx = KqlParser.UnionOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_unionOperatorExpression)
        try:
            self.state = 2140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2137
                self.wildcardedEntityExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2138
                self.entityNameReference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2139
                self.parenthesizedExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Predicate = None # NamedExpressionContext

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def FILTER(self):
            return self.getToken(KqlParser.FILTER, 0)

        def WHERE(self):
            return self.getToken(KqlParser.WHERE, 0)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_whereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereOperator" ):
                listener.enterWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereOperator" ):
                listener.exitWhereOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereOperator" ):
                return visitor.visitWhereOperator(self)
            else:
                return visitor.visitChildren(self)




    def whereOperator(self):

        localctx = KqlParser.WhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_whereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2142
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==90 or _la==259):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or _la==266 or _la==267:
                self.state = 2143
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2148
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2149
            localctx.Predicate = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualSubExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pipeSubExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeSubExpressionContext,0)


        def contextualPipeExpression(self):
            return self.getTypedRuleContext(KqlParser.ContextualPipeExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_contextualSubExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualSubExpression" ):
                listener.enterContextualSubExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualSubExpression" ):
                listener.exitContextualSubExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContextualSubExpression" ):
                return visitor.visitContextualSubExpression(self)
            else:
                return visitor.visitChildren(self)




    def contextualSubExpression(self):

        localctx = KqlParser.ContextualSubExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_contextualSubExpression)
        try:
            self.state = 2153
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47, 49, 61, 66, 77, 82, 84, 86, 89, 90, 91, 94, 96, 99, 100, 101, 102, 103, 133, 136, 144, 148, 151, 152, 157, 158, 159, 160, 189, 194, 195, 196, 197, 198, 206, 207, 209, 210, 211, 215, 218, 221, 222, 223, 225, 226, 230, 238, 240, 247, 248, 249, 254, 259]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2151
                self.pipeSubExpression()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2152
                self.contextualPipeExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualPipeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ContextualDataTableExpressionContext
            self._contextualPipeExpressionPipedOperator = None # ContextualPipeExpressionPipedOperatorContext
            self.PipedOperators = list() # of ContextualPipeExpressionPipedOperatorContexts

        def contextualDataTableExpression(self):
            return self.getTypedRuleContext(KqlParser.ContextualDataTableExpressionContext,0)


        def contextualPipeExpressionPipedOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ContextualPipeExpressionPipedOperatorContext)
            else:
                return self.getTypedRuleContext(KqlParser.ContextualPipeExpressionPipedOperatorContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_contextualPipeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualPipeExpression" ):
                listener.enterContextualPipeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualPipeExpression" ):
                listener.exitContextualPipeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContextualPipeExpression" ):
                return visitor.visitContextualPipeExpression(self)
            else:
                return visitor.visitChildren(self)




    def contextualPipeExpression(self):

        localctx = KqlParser.ContextualPipeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_contextualPipeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            localctx.Expression = self.contextualDataTableExpression()
            self.state = 2159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 2156
                localctx._contextualPipeExpressionPipedOperator = self.contextualPipeExpressionPipedOperator()
                localctx.PipedOperators.append(localctx._contextualPipeExpressionPipedOperator)
                self.state = 2161
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualPipeExpressionPipedOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # AfterPipeOperatorContext

        def BAR(self):
            return self.getToken(KqlParser.BAR, 0)

        def afterPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.AfterPipeOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_contextualPipeExpressionPipedOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualPipeExpressionPipedOperator" ):
                listener.enterContextualPipeExpressionPipedOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualPipeExpressionPipedOperator" ):
                listener.exitContextualPipeExpressionPipedOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContextualPipeExpressionPipedOperator" ):
                return visitor.visitContextualPipeExpressionPipedOperator(self)
            else:
                return visitor.visitChildren(self)




    def contextualPipeExpressionPipedOperator(self):

        localctx = KqlParser.ContextualPipeExpressionPipedOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_contextualPipeExpressionPipedOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2162
            self.match(KqlParser.BAR)
            self.state = 2163
            localctx.Operator = self.afterPipeOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictQueryOperatorParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NameToken = None # Token
            self.NameValue = None # IdentifierOrKeywordNameContext
            self.LiteralValue = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def BAGEXPANSION(self):
            return self.getToken(KqlParser.BAGEXPANSION, 0)

        def BIN_LEGACY(self):
            return self.getToken(KqlParser.BIN_LEGACY, 0)

        def CROSSCLUSTER__(self):
            return self.getToken(KqlParser.CROSSCLUSTER__, 0)

        def CROSSDB__(self):
            return self.getToken(KqlParser.CROSSDB__, 0)

        def DECODEBLOCKS(self):
            return self.getToken(KqlParser.DECODEBLOCKS, 0)

        def EXPANDOUTPUT(self):
            return self.getToken(KqlParser.EXPANDOUTPUT, 0)

        def HINT_CONCURRENCY(self):
            return self.getToken(KqlParser.HINT_CONCURRENCY, 0)

        def HINT_DISTRIBUTION(self):
            return self.getToken(KqlParser.HINT_DISTRIBUTION, 0)

        def HINT_MATERIALIZED(self):
            return self.getToken(KqlParser.HINT_MATERIALIZED, 0)

        def HINT_NUM_PARTITIONS(self):
            return self.getToken(KqlParser.HINT_NUM_PARTITIONS, 0)

        def HINT_PASS_FILTERS(self):
            return self.getToken(KqlParser.HINT_PASS_FILTERS, 0)

        def HINT_PASS_FILTERS_COLUMN(self):
            return self.getToken(KqlParser.HINT_PASS_FILTERS_COLUMN, 0)

        def HINT_PROGRESSIVE_TOP(self):
            return self.getToken(KqlParser.HINT_PROGRESSIVE_TOP, 0)

        def HINT_REMOTE(self):
            return self.getToken(KqlParser.HINT_REMOTE, 0)

        def HINT_SUFFLEKEY(self):
            return self.getToken(KqlParser.HINT_SUFFLEKEY, 0)

        def HINT_SPREAD(self):
            return self.getToken(KqlParser.HINT_SPREAD, 0)

        def HINT_STRATEGY(self):
            return self.getToken(KqlParser.HINT_STRATEGY, 0)

        def ISFUZZY(self):
            return self.getToken(KqlParser.ISFUZZY, 0)

        def ISFUZZY__(self):
            return self.getToken(KqlParser.ISFUZZY__, 0)

        def ID__(self):
            return self.getToken(KqlParser.ID__, 0)

        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def PACKEDCOLUMN__(self):
            return self.getToken(KqlParser.PACKEDCOLUMN__, 0)

        def SOURCECOLUMNINDEX__(self):
            return self.getToken(KqlParser.SOURCECOLUMNINDEX__, 0)

        def WITH_ITEM_INDEX(self):
            return self.getToken(KqlParser.WITH_ITEM_INDEX, 0)

        def WITH_MATCH_ID(self):
            return self.getToken(KqlParser.WITH_MATCH_ID, 0)

        def WITH_STEP_NAME(self):
            return self.getToken(KqlParser.WITH_STEP_NAME, 0)

        def WITHSOURCE(self):
            return self.getToken(KqlParser.WITHSOURCE, 0)

        def WITH_SOURCE(self):
            return self.getToken(KqlParser.WITH_SOURCE, 0)

        def WITHNOSOURCE__(self):
            return self.getToken(KqlParser.WITHNOSOURCE__, 0)

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordNameContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_strictQueryOperatorParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrictQueryOperatorParameter" ):
                listener.enterStrictQueryOperatorParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrictQueryOperatorParameter" ):
                listener.exitStrictQueryOperatorParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrictQueryOperatorParameter" ):
                return visitor.visitStrictQueryOperatorParameter(self)
            else:
                return visitor.visitChildren(self)




    def strictQueryOperatorParameter(self):

        localctx = KqlParser.StrictQueryOperatorParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_strictQueryOperatorParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2165
            localctx.NameToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or _la==266 or _la==267):
                localctx.NameToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2166
            self.match(KqlParser.EQUAL)
            self.state = 2169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 316]:
                self.state = 2167
                localctx.NameValue = self.identifierOrKeywordName()
                pass
            elif token in [11, 33, 285, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315]:
                self.state = 2168
                localctx.LiteralValue = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelaxedQueryOperatorParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NameToken = None # Token
            self.NameValue = None # IdentifierOrKeywordNameContext
            self.LiteralValue = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def BAGEXPANSION(self):
            return self.getToken(KqlParser.BAGEXPANSION, 0)

        def BIN_LEGACY(self):
            return self.getToken(KqlParser.BIN_LEGACY, 0)

        def CROSSCLUSTER__(self):
            return self.getToken(KqlParser.CROSSCLUSTER__, 0)

        def CROSSDB__(self):
            return self.getToken(KqlParser.CROSSDB__, 0)

        def DECODEBLOCKS(self):
            return self.getToken(KqlParser.DECODEBLOCKS, 0)

        def EXPANDOUTPUT(self):
            return self.getToken(KqlParser.EXPANDOUTPUT, 0)

        def HINT_CONCURRENCY(self):
            return self.getToken(KqlParser.HINT_CONCURRENCY, 0)

        def HINT_DISTRIBUTION(self):
            return self.getToken(KqlParser.HINT_DISTRIBUTION, 0)

        def HINT_MATERIALIZED(self):
            return self.getToken(KqlParser.HINT_MATERIALIZED, 0)

        def HINT_NUM_PARTITIONS(self):
            return self.getToken(KqlParser.HINT_NUM_PARTITIONS, 0)

        def HINT_PASS_FILTERS(self):
            return self.getToken(KqlParser.HINT_PASS_FILTERS, 0)

        def HINT_PASS_FILTERS_COLUMN(self):
            return self.getToken(KqlParser.HINT_PASS_FILTERS_COLUMN, 0)

        def HINT_PROGRESSIVE_TOP(self):
            return self.getToken(KqlParser.HINT_PROGRESSIVE_TOP, 0)

        def HINT_REMOTE(self):
            return self.getToken(KqlParser.HINT_REMOTE, 0)

        def HINT_SUFFLEKEY(self):
            return self.getToken(KqlParser.HINT_SUFFLEKEY, 0)

        def HINT_SPREAD(self):
            return self.getToken(KqlParser.HINT_SPREAD, 0)

        def HINT_STRATEGY(self):
            return self.getToken(KqlParser.HINT_STRATEGY, 0)

        def ISFUZZY(self):
            return self.getToken(KqlParser.ISFUZZY, 0)

        def ISFUZZY__(self):
            return self.getToken(KqlParser.ISFUZZY__, 0)

        def ID__(self):
            return self.getToken(KqlParser.ID__, 0)

        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def PACKEDCOLUMN__(self):
            return self.getToken(KqlParser.PACKEDCOLUMN__, 0)

        def SOURCECOLUMNINDEX__(self):
            return self.getToken(KqlParser.SOURCECOLUMNINDEX__, 0)

        def WITH_ITEM_INDEX(self):
            return self.getToken(KqlParser.WITH_ITEM_INDEX, 0)

        def WITH_MATCH_ID(self):
            return self.getToken(KqlParser.WITH_MATCH_ID, 0)

        def WITH_STEP_NAME(self):
            return self.getToken(KqlParser.WITH_STEP_NAME, 0)

        def WITHSOURCE(self):
            return self.getToken(KqlParser.WITHSOURCE, 0)

        def WITH_SOURCE(self):
            return self.getToken(KqlParser.WITH_SOURCE, 0)

        def WITHNOSOURCE__(self):
            return self.getToken(KqlParser.WITHNOSOURCE__, 0)

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordNameContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_relaxedQueryOperatorParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelaxedQueryOperatorParameter" ):
                listener.enterRelaxedQueryOperatorParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelaxedQueryOperatorParameter" ):
                listener.exitRelaxedQueryOperatorParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelaxedQueryOperatorParameter" ):
                return visitor.visitRelaxedQueryOperatorParameter(self)
            else:
                return visitor.visitChildren(self)




    def relaxedQueryOperatorParameter(self):

        localctx = KqlParser.RelaxedQueryOperatorParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_relaxedQueryOperatorParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            localctx.NameToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0)):
                localctx.NameToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2172
            self.match(KqlParser.EQUAL)
            self.state = 2175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 316]:
                self.state = 2173
                localctx.NameValue = self.identifierOrKeywordName()
                pass
            elif token in [11, 33, 285, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315]:
                self.state = 2174
                localctx.LiteralValue = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOperatorPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # Token
            self.NameValue = None # IdentifierOrKeywordNameContext
            self.LiteralValue = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordNameContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_queryOperatorProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOperatorProperty" ):
                listener.enterQueryOperatorProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOperatorProperty" ):
                listener.exitQueryOperatorProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryOperatorProperty" ):
                return visitor.visitQueryOperatorProperty(self)
            else:
                return visitor.visitChildren(self)




    def queryOperatorProperty(self):

        localctx = KqlParser.QueryOperatorPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_queryOperatorProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            localctx.Name = self.match(KqlParser.IDENTIFIER)
            self.state = 2178
            self.match(KqlParser.EQUAL)
            self.state = 2181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 316]:
                self.state = 2179
                localctx.NameValue = self.identifierOrKeywordName()
                pass
            elif token in [11, 33, 285, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315]:
                self.state = 2180
                localctx.LiteralValue = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # NamedExpressionNameClauseContext
            self.Expression = None # UnnamedExpressionContext

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def namedExpressionNameClause(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionNameClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpression" ):
                return visitor.visitNamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedExpression(self):

        localctx = KqlParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 2183
                localctx.Name = self.namedExpressionNameClause()


            self.state = 2186
            localctx.Expression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionNameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrExtendedKeywordOrEscapedNameContext
            self.NameList = None # NamedExpressionNameListContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def identifierOrExtendedKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,0)


        def namedExpressionNameList(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionNameListContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_namedExpressionNameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionNameClause" ):
                listener.enterNamedExpressionNameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionNameClause" ):
                listener.exitNamedExpressionNameClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpressionNameClause" ):
                return visitor.visitNamedExpressionNameClause(self)
            else:
                return visitor.visitChildren(self)




    def namedExpressionNameClause(self):

        localctx = KqlParser.NamedExpressionNameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_namedExpressionNameClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 38, 39, 40, 41, 42, 47, 50, 53, 55, 57, 59, 61, 62, 66, 69, 71, 72, 74, 75, 77, 78, 82, 83, 86, 87, 89, 90, 91, 94, 95, 104, 112, 124, 126, 127, 128, 130, 132, 133, 140, 141, 144, 145, 147, 148, 149, 153, 155, 161, 162, 183, 184, 185, 186, 187, 191, 192, 194, 197, 198, 200, 204, 205, 213, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 232, 233, 237, 238, 240, 241, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 316]:
                self.state = 2188
                localctx.Name = self.identifierOrExtendedKeywordOrEscapedName()
                pass
            elif token in [31]:
                self.state = 2189
                localctx.NameList = self.namedExpressionNameList()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2192
            self.match(KqlParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifierOrExtendedKeywordOrEscapedName = None # IdentifierOrExtendedKeywordOrEscapedNameContext
            self.Names = list() # of IdentifierOrExtendedKeywordOrEscapedNameContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def identifierOrExtendedKeywordOrEscapedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext)
            else:
                return self.getTypedRuleContext(KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_namedExpressionNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionNameList" ):
                listener.enterNamedExpressionNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionNameList" ):
                listener.exitNamedExpressionNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpressionNameList" ):
                return visitor.visitNamedExpressionNameList(self)
            else:
                return visitor.visitChildren(self)




    def namedExpressionNameList(self):

        localctx = KqlParser.NamedExpressionNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_namedExpressionNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2194
            self.match(KqlParser.OPENPAREN)
            self.state = 2195
            localctx._identifierOrExtendedKeywordOrEscapedName = self.identifierOrExtendedKeywordOrEscapedName()
            localctx.Names.append(localctx._identifierOrExtendedKeywordOrEscapedName)
            self.state = 2200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2196
                self.match(KqlParser.COMMA)
                self.state = 2197
                localctx._identifierOrExtendedKeywordOrEscapedName = self.identifierOrExtendedKeywordOrEscapedName()
                localctx.Names.append(localctx._identifierOrExtendedKeywordOrEscapedName)
                self.state = 2202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2203
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopedFunctionCallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Scope = None # SimpleNameReferenceContext
            self.FunctionCall = None # FunctionCallExpressionContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def functionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_scopedFunctionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScopedFunctionCallExpression" ):
                listener.enterScopedFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScopedFunctionCallExpression" ):
                listener.exitScopedFunctionCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScopedFunctionCallExpression" ):
                return visitor.visitScopedFunctionCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def scopedFunctionCallExpression(self):

        localctx = KqlParser.ScopedFunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_scopedFunctionCallExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2205
            localctx.Scope = self.simpleNameReference()
            self.state = 2206
            self.match(KqlParser.DOT)
            self.state = 2207
            localctx.FunctionCall = self.functionCallExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(KqlParser.LogicalOrExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_unnamedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamedExpression" ):
                listener.enterUnnamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamedExpression" ):
                listener.exitUnnamedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnamedExpression" ):
                return visitor.visitUnnamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def unnamedExpression(self):

        localctx = KqlParser.UnnamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_unnamedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2209
            self.logicalOrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # LogicalAndExpressionContext
            self._logicalOrOperation = None # LogicalOrOperationContext
            self.Operations = list() # of LogicalOrOperationContexts

        def logicalAndExpression(self):
            return self.getTypedRuleContext(KqlParser.LogicalAndExpressionContext,0)


        def logicalOrOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.LogicalOrOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.LogicalOrOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalOrExpression(self):

        localctx = KqlParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            localctx.Left = self.logicalAndExpression()
            self.state = 2215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==188:
                self.state = 2212
                localctx._logicalOrOperation = self.logicalOrOperation()
                localctx.Operations.append(localctx._logicalOrOperation)
                self.state = 2217
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Right = None # LogicalAndExpressionContext

        def OR(self):
            return self.getToken(KqlParser.OR, 0)

        def logicalAndExpression(self):
            return self.getTypedRuleContext(KqlParser.LogicalAndExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_logicalOrOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrOperation" ):
                listener.enterLogicalOrOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrOperation" ):
                listener.exitLogicalOrOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrOperation" ):
                return visitor.visitLogicalOrOperation(self)
            else:
                return visitor.visitChildren(self)




    def logicalOrOperation(self):

        localctx = KqlParser.LogicalOrOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_logicalOrOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2218
            self.match(KqlParser.OR)
            self.state = 2219
            localctx.Right = self.logicalAndExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # EqualityExpressionContext
            self._logicalAndOperation = None # LogicalAndOperationContext
            self.Operations = list() # of LogicalAndOperationContexts

        def equalityExpression(self):
            return self.getTypedRuleContext(KqlParser.EqualityExpressionContext,0)


        def logicalAndOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.LogicalAndOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.LogicalAndOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalAndExpression(self):

        localctx = KqlParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2221
            localctx.Left = self.equalityExpression()
            self.state = 2225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 2222
                localctx._logicalAndOperation = self.logicalAndOperation()
                localctx.Operations.append(localctx._logicalAndOperation)
                self.state = 2227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Right = None # EqualityExpressionContext

        def AND(self):
            return self.getToken(KqlParser.AND, 0)

        def equalityExpression(self):
            return self.getTypedRuleContext(KqlParser.EqualityExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_logicalAndOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndOperation" ):
                listener.enterLogicalAndOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndOperation" ):
                listener.exitLogicalAndOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndOperation" ):
                return visitor.visitLogicalAndOperation(self)
            else:
                return visitor.visitChildren(self)




    def logicalAndOperation(self):

        localctx = KqlParser.LogicalAndOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_logicalAndOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2228
            self.match(KqlParser.AND)
            self.state = 2229
            localctx.Right = self.equalityExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(KqlParser.RelationalExpressionContext,0)


        def equalsEqualityExpression(self):
            return self.getTypedRuleContext(KqlParser.EqualsEqualityExpressionContext,0)


        def listEqualityExpression(self):
            return self.getTypedRuleContext(KqlParser.ListEqualityExpressionContext,0)


        def betweenEqualityExpression(self):
            return self.getTypedRuleContext(KqlParser.BetweenEqualityExpressionContext,0)


        def starEqualityExpression(self):
            return self.getTypedRuleContext(KqlParser.StarEqualityExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def equalityExpression(self):

        localctx = KqlParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_equalityExpression)
        try:
            self.state = 2236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2231
                self.relationalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2232
                self.equalsEqualityExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2233
                self.listEqualityExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2234
                self.betweenEqualityExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2235
                self.starEqualityExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualsEqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # RelationalExpressionContext
            self.OperatorToken = None # Token
            self.Right = None # RelationalExpressionContext

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelationalExpressionContext,i)


        def EQUALEQUAL(self):
            return self.getToken(KqlParser.EQUALEQUAL, 0)

        def LESSTHAN_GREATERTHAN(self):
            return self.getToken(KqlParser.LESSTHAN_GREATERTHAN, 0)

        def EXCLAIMATIONPOINT_EQUAL(self):
            return self.getToken(KqlParser.EXCLAIMATIONPOINT_EQUAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_equalsEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualsEqualityExpression" ):
                listener.enterEqualsEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualsEqualityExpression" ):
                listener.exitEqualsEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualsEqualityExpression" ):
                return visitor.visitEqualsEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def equalsEqualityExpression(self):

        localctx = KqlParser.EqualsEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_equalsEqualityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2238
            localctx.Left = self.relationalExpression()
            self.state = 2239
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 269746176) != 0)):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2240
            localctx.Right = self.relationalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListEqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # RelationalExpressionContext
            self.OperatorToken = None # Token
            self._invocationExpression = None # InvocationExpressionContext
            self.Expressions = list() # of InvocationExpressionContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def relationalExpression(self):
            return self.getTypedRuleContext(KqlParser.RelationalExpressionContext,0)


        def invocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.InvocationExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,i)


        def IN(self):
            return self.getToken(KqlParser.IN, 0)

        def NOT_IN(self):
            return self.getToken(KqlParser.NOT_IN, 0)

        def IN_CI(self):
            return self.getToken(KqlParser.IN_CI, 0)

        def NOT_IN_CI(self):
            return self.getToken(KqlParser.NOT_IN_CI, 0)

        def HAS_ANY(self):
            return self.getToken(KqlParser.HAS_ANY, 0)

        def HAS_ALL(self):
            return self.getToken(KqlParser.HAS_ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_listEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListEqualityExpression" ):
                listener.enterListEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListEqualityExpression" ):
                listener.exitListEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListEqualityExpression" ):
                return visitor.visitListEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def listEqualityExpression(self):

        localctx = KqlParser.ListEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_listEqualityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2242
            localctx.Left = self.relationalExpression()
            self.state = 2243
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 100663299) != 0) or _la==175 or _la==176):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2244
            self.match(KqlParser.OPENPAREN)
            self.state = 2245
            localctx._invocationExpression = self.invocationExpression()
            localctx.Expressions.append(localctx._invocationExpression)
            self.state = 2250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2246
                self.match(KqlParser.COMMA)
                self.state = 2247
                localctx._invocationExpression = self.invocationExpression()
                localctx.Expressions.append(localctx._invocationExpression)
                self.state = 2252
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2253
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BetweenEqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # RelationalExpressionContext
            self.OperatorToken = None # Token
            self.StartExpression = None # InvocationExpressionContext
            self.EndExpression = None # InvocationExpressionContext

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def DOTDOT(self):
            return self.getToken(KqlParser.DOTDOT, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def relationalExpression(self):
            return self.getTypedRuleContext(KqlParser.RelationalExpressionContext,0)


        def invocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.InvocationExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,i)


        def BETWEEN(self):
            return self.getToken(KqlParser.BETWEEN, 0)

        def NOT_BETWEEN(self):
            return self.getToken(KqlParser.NOT_BETWEEN, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_betweenEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenEqualityExpression" ):
                listener.enterBetweenEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenEqualityExpression" ):
                listener.exitBetweenEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetweenEqualityExpression" ):
                return visitor.visitBetweenEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def betweenEqualityExpression(self):

        localctx = KqlParser.BetweenEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_betweenEqualityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2255
            localctx.Left = self.relationalExpression()
            self.state = 2256
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==54 or _la==164):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2257
            self.match(KqlParser.OPENPAREN)
            self.state = 2258
            localctx.StartExpression = self.invocationExpression()
            self.state = 2259
            self.match(KqlParser.DOTDOT)
            self.state = 2260
            localctx.EndExpression = self.invocationExpression()
            self.state = 2261
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StarEqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # RelationalExpressionContext

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def EQUALEQUAL(self):
            return self.getToken(KqlParser.EQUALEQUAL, 0)

        def relationalExpression(self):
            return self.getTypedRuleContext(KqlParser.RelationalExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_starEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarEqualityExpression" ):
                listener.enterStarEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarEqualityExpression" ):
                listener.exitStarEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarEqualityExpression" ):
                return visitor.visitStarEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def starEqualityExpression(self):

        localctx = KqlParser.StarEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_starEqualityExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.match(KqlParser.ASTERISK)
            self.state = 2264
            self.match(KqlParser.EQUALEQUAL)
            self.state = 2265
            localctx.Expression = self.relationalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # AdditiveExpressionContext
            self.OperatorToken = None # Token
            self.Right = None # AdditiveExpressionContext

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.AdditiveExpressionContext,i)


        def LESSTHAN(self):
            return self.getToken(KqlParser.LESSTHAN, 0)

        def GREATERTHAN(self):
            return self.getToken(KqlParser.GREATERTHAN, 0)

        def LESSTHAN_EQUAL(self):
            return self.getToken(KqlParser.LESSTHAN_EQUAL, 0)

        def GREATERTHAN_EQUAL(self):
            return self.getToken(KqlParser.GREATERTHAN_EQUAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)




    def relationalExpression(self):

        localctx = KqlParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2267
            localctx.Left = self.additiveExpression()
            self.state = 2270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 163577856) != 0):
                self.state = 2268
                localctx.OperatorToken = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 163577856) != 0)):
                    localctx.OperatorToken = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2269
                localctx.Right = self.additiveExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # MultiplicativeExpressionContext
            self._additiveOperation = None # AdditiveOperationContext
            self.Operations = list() # of AdditiveOperationContexts

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(KqlParser.MultiplicativeExpressionContext,0)


        def additiveOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.AdditiveOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.AdditiveOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)




    def additiveExpression(self):

        localctx = KqlParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2272
            localctx.Left = self.multiplicativeExpression()
            self.state = 2276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11 or _la==33:
                self.state = 2273
                localctx._additiveOperation = self.additiveOperation()
                localctx.Operations.append(localctx._additiveOperation)
                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OperatorToken = None # Token
            self.Right = None # MultiplicativeExpressionContext

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(KqlParser.MultiplicativeExpressionContext,0)


        def PLUS(self):
            return self.getToken(KqlParser.PLUS, 0)

        def DASH(self):
            return self.getToken(KqlParser.DASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_additiveOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOperation" ):
                listener.enterAdditiveOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOperation" ):
                listener.exitAdditiveOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveOperation" ):
                return visitor.visitAdditiveOperation(self)
            else:
                return visitor.visitChildren(self)




    def additiveOperation(self):

        localctx = KqlParser.AdditiveOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_additiveOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2279
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==11 or _la==33):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2280
            localctx.Right = self.multiplicativeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # StringOperatorExpressionContext
            self._multiplicativeOperation = None # MultiplicativeOperationContext
            self.Operations = list() # of MultiplicativeOperationContexts

        def stringOperatorExpression(self):
            return self.getTypedRuleContext(KqlParser.StringOperatorExpressionContext,0)


        def multiplicativeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.MultiplicativeOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.MultiplicativeOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeExpression(self):

        localctx = KqlParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2282
            localctx.Left = self.stringOperatorExpression()
            self.state = 2286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 38654705666) != 0):
                self.state = 2283
                localctx._multiplicativeOperation = self.multiplicativeOperation()
                localctx.Operations.append(localctx._multiplicativeOperation)
                self.state = 2288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OperatorToken = None # Token
            self.Right = None # StringOperatorExpressionContext

        def stringOperatorExpression(self):
            return self.getTypedRuleContext(KqlParser.StringOperatorExpressionContext,0)


        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(KqlParser.SLASH, 0)

        def PERCENTSIGN(self):
            return self.getToken(KqlParser.PERCENTSIGN, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_multiplicativeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOperation" ):
                listener.enterMultiplicativeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOperation" ):
                listener.exitMultiplicativeOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeOperation" ):
                return visitor.visitMultiplicativeOperation(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeOperation(self):

        localctx = KqlParser.MultiplicativeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_multiplicativeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2289
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 38654705666) != 0)):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2290
            localctx.Right = self.stringOperatorExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringBinaryOperatorExpression(self):
            return self.getTypedRuleContext(KqlParser.StringBinaryOperatorExpressionContext,0)


        def stringStarOperatorExpression(self):
            return self.getTypedRuleContext(KqlParser.StringStarOperatorExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_stringOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringOperatorExpression" ):
                listener.enterStringOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringOperatorExpression" ):
                listener.exitStringOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringOperatorExpression" ):
                return visitor.visitStringOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def stringOperatorExpression(self):

        localctx = KqlParser.StringOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_stringOperatorExpression)
        try:
            self.state = 2294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 30, 31, 33, 38, 40, 41, 42, 50, 53, 55, 59, 65, 66, 69, 71, 72, 74, 75, 78, 82, 83, 87, 88, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 156, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 250, 251, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 287, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2292
                self.stringBinaryOperatorExpression()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2293
                self.stringStarOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringBinaryOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # InvocationExpressionContext
            self._stringBinaryOperation = None # StringBinaryOperationContext
            self.Operations = list() # of StringBinaryOperationContexts

        def invocationExpression(self):
            return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,0)


        def stringBinaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StringBinaryOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.StringBinaryOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_stringBinaryOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringBinaryOperatorExpression" ):
                listener.enterStringBinaryOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringBinaryOperatorExpression" ):
                listener.exitStringBinaryOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringBinaryOperatorExpression" ):
                return visitor.visitStringBinaryOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def stringBinaryOperatorExpression(self):

        localctx = KqlParser.StringBinaryOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_stringBinaryOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2296
            localctx.Left = self.invocationExpression()
            self.state = 2300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018424765440) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 273778395414529) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 2173245067267) != 0) or _la==235 or _la==236:
                self.state = 2297
                localctx._stringBinaryOperation = self.stringBinaryOperation()
                localctx.Operations.append(localctx._stringBinaryOperation)
                self.state = 2302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringBinaryOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # StringBinaryOperatorContext
            self.HasOperator = None # Token
            self.Right = None # InvocationExpressionContext

        def invocationExpression(self):
            return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,0)


        def stringBinaryOperator(self):
            return self.getTypedRuleContext(KqlParser.StringBinaryOperatorContext,0)


        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_stringBinaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringBinaryOperation" ):
                listener.enterStringBinaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringBinaryOperation" ):
                listener.exitStringBinaryOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringBinaryOperation" ):
                return visitor.visitStringBinaryOperation(self)
            else:
                return visitor.visitChildren(self)




    def stringBinaryOperation(self):

        localctx = KqlParser.StringBinaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_stringBinaryOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2305
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 21, 62, 63, 64, 79, 80, 104, 107, 108, 109, 110, 111, 142, 143, 154, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 235, 236]:
                self.state = 2303
                localctx.Operator = self.stringBinaryOperator()
                pass
            elif token in [10]:
                self.state = 2304
                localctx.HasOperator = self.match(KqlParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2307
            localctx.Right = self.invocationExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringBinaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OperatorToken = None # Token

        def EQUALTILDE(self):
            return self.getToken(KqlParser.EQUALTILDE, 0)

        def EXCLAIMATIONPOINT_TILDE(self):
            return self.getToken(KqlParser.EXCLAIMATIONPOINT_TILDE, 0)

        def HAS(self):
            return self.getToken(KqlParser.HAS, 0)

        def NOT_HAS(self):
            return self.getToken(KqlParser.NOT_HAS, 0)

        def HAS_CS(self):
            return self.getToken(KqlParser.HAS_CS, 0)

        def NOT_HAS_CS(self):
            return self.getToken(KqlParser.NOT_HAS_CS, 0)

        def HASPREFIX(self):
            return self.getToken(KqlParser.HASPREFIX, 0)

        def NOT_HASPREFIX(self):
            return self.getToken(KqlParser.NOT_HASPREFIX, 0)

        def HASPREFIX_CS(self):
            return self.getToken(KqlParser.HASPREFIX_CS, 0)

        def NOT_HASPREFIX_CS(self):
            return self.getToken(KqlParser.NOT_HASPREFIX_CS, 0)

        def HASSUFFIX(self):
            return self.getToken(KqlParser.HASSUFFIX, 0)

        def NOT_HASSUFFIX(self):
            return self.getToken(KqlParser.NOT_HASSUFFIX, 0)

        def HASSUFFIX_CS(self):
            return self.getToken(KqlParser.HASSUFFIX_CS, 0)

        def NOT_HASSUFFIX_CS(self):
            return self.getToken(KqlParser.NOT_HASSUFFIX_CS, 0)

        def LIKE(self):
            return self.getToken(KqlParser.LIKE, 0)

        def NOTLIKE(self):
            return self.getToken(KqlParser.NOTLIKE, 0)

        def LIKECS(self):
            return self.getToken(KqlParser.LIKECS, 0)

        def NOTLIKECS(self):
            return self.getToken(KqlParser.NOTLIKECS, 0)

        def CONTAINS(self):
            return self.getToken(KqlParser.CONTAINS, 0)

        def NOTCONTAINS(self):
            return self.getToken(KqlParser.NOTCONTAINS, 0)

        def CONTAINSCS(self):
            return self.getToken(KqlParser.CONTAINSCS, 0)

        def NOTCONTAINSCS(self):
            return self.getToken(KqlParser.NOTCONTAINSCS, 0)

        def NOT_CONTAINS(self):
            return self.getToken(KqlParser.NOT_CONTAINS, 0)

        def CONTAINS_CS(self):
            return self.getToken(KqlParser.CONTAINS_CS, 0)

        def NOT_CONTAINS_CS(self):
            return self.getToken(KqlParser.NOT_CONTAINS_CS, 0)

        def STARTSWITH(self):
            return self.getToken(KqlParser.STARTSWITH, 0)

        def NOT_STARTSWITH(self):
            return self.getToken(KqlParser.NOT_STARTSWITH, 0)

        def STARTSWITH_CS(self):
            return self.getToken(KqlParser.STARTSWITH_CS, 0)

        def NOT_STARTSWITH_CS(self):
            return self.getToken(KqlParser.NOT_STARTSWITH_CS, 0)

        def ENDSWITH(self):
            return self.getToken(KqlParser.ENDSWITH, 0)

        def NOT_ENDSWITH(self):
            return self.getToken(KqlParser.NOT_ENDSWITH, 0)

        def ENDSWITH_CS(self):
            return self.getToken(KqlParser.ENDSWITH_CS, 0)

        def NOT_ENDSWITH_CS(self):
            return self.getToken(KqlParser.NOT_ENDSWITH_CS, 0)

        def MATCHES_REGEX(self):
            return self.getToken(KqlParser.MATCHES_REGEX, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_stringBinaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringBinaryOperator" ):
                listener.enterStringBinaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringBinaryOperator" ):
                listener.exitStringBinaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringBinaryOperator" ):
                return visitor.visitStringBinaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def stringBinaryOperator(self):

        localctx = KqlParser.StringBinaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_stringBinaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018424766464) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 273778395414529) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 2173245067267) != 0) or _la==235 or _la==236):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringStarOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LeftStarToken = None # Token
            self.Operator = None # StringBinaryOperatorContext
            self.Right = None # InvocationExpressionContext

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def stringBinaryOperator(self):
            return self.getTypedRuleContext(KqlParser.StringBinaryOperatorContext,0)


        def invocationExpression(self):
            return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_stringStarOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringStarOperatorExpression" ):
                listener.enterStringStarOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringStarOperatorExpression" ):
                listener.exitStringStarOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringStarOperatorExpression" ):
                return visitor.visitStringStarOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def stringStarOperatorExpression(self):

        localctx = KqlParser.StringStarOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_stringStarOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2311
            localctx.LeftStarToken = self.match(KqlParser.ASTERISK)
            self.state = 2312
            localctx.Operator = self.stringBinaryOperator()
            self.state = 2313
            localctx.Right = self.invocationExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OperatorToken = None # Token
            self.Expression = None # FunctionCallOrPathExpressionContext

        def functionCallOrPathExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallOrPathExpressionContext,0)


        def PLUS(self):
            return self.getToken(KqlParser.PLUS, 0)

        def DASH(self):
            return self.getToken(KqlParser.DASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_invocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvocationExpression" ):
                listener.enterInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvocationExpression" ):
                listener.exitInvocationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvocationExpression" ):
                return visitor.visitInvocationExpression(self)
            else:
                return visitor.visitChildren(self)




    def invocationExpression(self):

        localctx = KqlParser.InvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_invocationExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==33:
                self.state = 2315
                localctx.OperatorToken = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==11 or _la==33):
                    localctx.OperatorToken = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2318
            localctx.Expression = self.functionCallOrPathExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallOrPathRoot(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallOrPathRootContext,0)


        def functionCallOrPathPathExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallOrPathPathExpressionContext,0)


        def toTableExpression(self):
            return self.getTypedRuleContext(KqlParser.ToTableExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_functionCallOrPathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathExpression" ):
                listener.enterFunctionCallOrPathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathExpression" ):
                listener.exitFunctionCallOrPathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOrPathExpression" ):
                return visitor.visitFunctionCallOrPathExpression(self)
            else:
                return visitor.visitChildren(self)




    def functionCallOrPathExpression(self):

        localctx = KqlParser.FunctionCallOrPathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_functionCallOrPathExpression)
        try:
            self.state = 2323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2320
                self.functionCallOrPathRoot()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2321
                self.functionCallOrPathPathExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2322
                self.toTableExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathRootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotCompositeFunctionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.DotCompositeFunctionCallExpressionContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(KqlParser.PrimaryExpressionContext,0)


        def toScalarExpression(self):
            return self.getTypedRuleContext(KqlParser.ToScalarExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_functionCallOrPathRoot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathRoot" ):
                listener.enterFunctionCallOrPathRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathRoot" ):
                listener.exitFunctionCallOrPathRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOrPathRoot" ):
                return visitor.visitFunctionCallOrPathRoot(self)
            else:
                return visitor.visitChildren(self)




    def functionCallOrPathRoot(self):

        localctx = KqlParser.FunctionCallOrPathRootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_functionCallOrPathRoot)
        try:
            self.state = 2328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2325
                self.dotCompositeFunctionCallExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2326
                self.primaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2327
                self.toScalarExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathPathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # FunctionCallOrPathRootContext
            self._functionCallOrPathOperation = None # FunctionCallOrPathOperationContext
            self.Operations = list() # of FunctionCallOrPathOperationContexts

        def functionCallOrPathRoot(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallOrPathRootContext,0)


        def functionCallOrPathOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.FunctionCallOrPathOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.FunctionCallOrPathOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_functionCallOrPathPathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathPathExpression" ):
                listener.enterFunctionCallOrPathPathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathPathExpression" ):
                listener.exitFunctionCallOrPathPathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOrPathPathExpression" ):
                return visitor.visitFunctionCallOrPathPathExpression(self)
            else:
                return visitor.visitChildren(self)




    def functionCallOrPathPathExpression(self):

        localctx = KqlParser.FunctionCallOrPathPathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_functionCallOrPathPathExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            localctx.Expression = self.functionCallOrPathRoot()
            self.state = 2332 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2331
                localctx._functionCallOrPathOperation = self.functionCallOrPathOperation()
                localctx.Operations.append(localctx._functionCallOrPathOperation)
                self.state = 2334 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==15 or _la==30):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionalCallOrPathPathOperation(self):
            return self.getTypedRuleContext(KqlParser.FunctionalCallOrPathPathOperationContext,0)


        def functionCallOrPathElementOperation(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallOrPathElementOperationContext,0)


        def legacyFunctionCallOrPathElementOperation(self):
            return self.getTypedRuleContext(KqlParser.LegacyFunctionCallOrPathElementOperationContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_functionCallOrPathOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathOperation" ):
                listener.enterFunctionCallOrPathOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathOperation" ):
                listener.exitFunctionCallOrPathOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOrPathOperation" ):
                return visitor.visitFunctionCallOrPathOperation(self)
            else:
                return visitor.visitChildren(self)




    def functionCallOrPathOperation(self):

        localctx = KqlParser.FunctionCallOrPathOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_functionCallOrPathOperation)
        try:
            self.state = 2339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2336
                self.functionalCallOrPathPathOperation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2337
                self.functionCallOrPathElementOperation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2338
                self.legacyFunctionCallOrPathElementOperation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionalCallOrPathPathOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_functionalCallOrPathPathOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionalCallOrPathPathOperation" ):
                listener.enterFunctionalCallOrPathPathOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionalCallOrPathPathOperation" ):
                listener.exitFunctionalCallOrPathPathOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionalCallOrPathPathOperation" ):
                return visitor.visitFunctionalCallOrPathPathOperation(self)
            else:
                return visitor.visitChildren(self)




    def functionalCallOrPathPathOperation(self):

        localctx = KqlParser.FunctionalCallOrPathPathOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_functionalCallOrPathPathOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            self.match(KqlParser.DOT)
            self.state = 2342
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathElementOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Element = None # UnnamedExpressionContext

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_functionCallOrPathElementOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathElementOperation" ):
                listener.enterFunctionCallOrPathElementOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathElementOperation" ):
                listener.exitFunctionCallOrPathElementOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOrPathElementOperation" ):
                return visitor.visitFunctionCallOrPathElementOperation(self)
            else:
                return visitor.visitChildren(self)




    def functionCallOrPathElementOperation(self):

        localctx = KqlParser.FunctionCallOrPathElementOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_functionCallOrPathElementOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2344
            self.match(KqlParser.OPENBRACKET)
            self.state = 2345
            localctx.Element = self.unnamedExpression()
            self.state = 2346
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LegacyFunctionCallOrPathElementOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Element = None # UnnamedExpressionContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_legacyFunctionCallOrPathElementOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyFunctionCallOrPathElementOperation" ):
                listener.enterLegacyFunctionCallOrPathElementOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyFunctionCallOrPathElementOperation" ):
                listener.exitLegacyFunctionCallOrPathElementOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyFunctionCallOrPathElementOperation" ):
                return visitor.visitLegacyFunctionCallOrPathElementOperation(self)
            else:
                return visitor.visitChildren(self)




    def legacyFunctionCallOrPathElementOperation(self):

        localctx = KqlParser.LegacyFunctionCallOrPathElementOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_legacyFunctionCallOrPathElementOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2348
            self.match(KqlParser.DOT)
            self.state = 2349
            self.match(KqlParser.OPENBRACKET)
            self.state = 2350
            localctx.Element = self.unnamedExpression()
            self.state = 2351
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToScalarExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # PipeExpressionContext

        def TOSCALAR(self):
            return self.getToken(KqlParser.TOSCALAR, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def pipeExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeExpressionContext,0)


        def noOptimizationParameter(self):
            return self.getTypedRuleContext(KqlParser.NoOptimizationParameterContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_toScalarExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterToScalarExpression" ):
                listener.enterToScalarExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitToScalarExpression" ):
                listener.exitToScalarExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToScalarExpression" ):
                return visitor.visitToScalarExpression(self)
            else:
                return visitor.visitChildren(self)




    def toScalarExpression(self):

        localctx = KqlParser.ToScalarExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_toScalarExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.match(KqlParser.TOSCALAR)
            self.state = 2355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2354
                self.noOptimizationParameter()


            self.state = 2357
            self.match(KqlParser.OPENPAREN)
            self.state = 2358
            localctx.Expression = self.pipeExpression()
            self.state = 2359
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToTableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # PipeExpressionContext

        def TOTABLE(self):
            return self.getToken(KqlParser.TOTABLE, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def pipeExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeExpressionContext,0)


        def noOptimizationParameter(self):
            return self.getTypedRuleContext(KqlParser.NoOptimizationParameterContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_toTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterToTableExpression" ):
                listener.enterToTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitToTableExpression" ):
                listener.exitToTableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToTableExpression" ):
                return visitor.visitToTableExpression(self)
            else:
                return visitor.visitChildren(self)




    def toTableExpression(self):

        localctx = KqlParser.ToTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_toTableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2361
            self.match(KqlParser.TOTABLE)
            self.state = 2363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 2362
                self.noOptimizationParameter()


            self.state = 2365
            self.match(KqlParser.OPENPAREN)
            self.state = 2366
            localctx.Expression = self.pipeExpression()
            self.state = 2367
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoOptimizationParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def NOOPTIMIZATION(self):
            return self.getToken(KqlParser.NOOPTIMIZATION, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_noOptimizationParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoOptimizationParameter" ):
                listener.enterNoOptimizationParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoOptimizationParameter" ):
                listener.exitNoOptimizationParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoOptimizationParameter" ):
                return visitor.visitNoOptimizationParameter(self)
            else:
                return visitor.visitChildren(self)




    def noOptimizationParameter(self):

        localctx = KqlParser.NoOptimizationParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_noOptimizationParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2369
            self.match(KqlParser.KIND)
            self.state = 2370
            self.match(KqlParser.EQUAL)
            self.state = 2371
            self.match(KqlParser.NOOPTIMIZATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotCompositeFunctionCallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Call = None # FunctionCallExpressionContext
            self._dotCompositeFunctionCallOperation = None # DotCompositeFunctionCallOperationContext
            self.Operations = list() # of DotCompositeFunctionCallOperationContexts

        def functionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallExpressionContext,0)


        def dotCompositeFunctionCallOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.DotCompositeFunctionCallOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.DotCompositeFunctionCallOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_dotCompositeFunctionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotCompositeFunctionCallExpression" ):
                listener.enterDotCompositeFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotCompositeFunctionCallExpression" ):
                listener.exitDotCompositeFunctionCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotCompositeFunctionCallExpression" ):
                return visitor.visitDotCompositeFunctionCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def dotCompositeFunctionCallExpression(self):

        localctx = KqlParser.DotCompositeFunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_dotCompositeFunctionCallExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            localctx.Call = self.functionCallExpression()
            self.state = 2377
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2374
                    localctx._dotCompositeFunctionCallOperation = self.dotCompositeFunctionCallOperation()
                    localctx.Operations.append(localctx._dotCompositeFunctionCallOperation) 
                self.state = 2379
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotCompositeFunctionCallOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Call = None # FunctionCallExpressionContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def functionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_dotCompositeFunctionCallOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotCompositeFunctionCallOperation" ):
                listener.enterDotCompositeFunctionCallOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotCompositeFunctionCallOperation" ):
                listener.exitDotCompositeFunctionCallOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotCompositeFunctionCallOperation" ):
                return visitor.visitDotCompositeFunctionCallOperation(self)
            else:
                return visitor.visitChildren(self)




    def dotCompositeFunctionCallOperation(self):

        localctx = KqlParser.DotCompositeFunctionCallOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_dotCompositeFunctionCallOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2380
            self.match(KqlParser.DOT)
            self.state = 2381
            localctx.Call = self.functionCallExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedFunctionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedFunctionCallExpressionContext,0)


        def countExpression(self):
            return self.getTypedRuleContext(KqlParser.CountExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_functionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpression" ):
                listener.enterFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpression" ):
                listener.exitFunctionCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallExpression" ):
                return visitor.visitFunctionCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def functionCallExpression(self):

        localctx = KqlParser.FunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_functionCallExpression)
        try:
            self.state = 2385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 316]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2383
                self.namedFunctionCallExpression()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2384
                self.countExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedFunctionCallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # SimpleNameReferenceContext
            self._argumentExpression = None # ArgumentExpressionContext
            self.Arguments = list() # of ArgumentExpressionContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def argumentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ArgumentExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.ArgumentExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_namedFunctionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedFunctionCallExpression" ):
                listener.enterNamedFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedFunctionCallExpression" ):
                listener.exitNamedFunctionCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedFunctionCallExpression" ):
                return visitor.visitNamedFunctionCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedFunctionCallExpression(self):

        localctx = KqlParser.NamedFunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_namedFunctionCallExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2387
            localctx.Name = self.simpleNameReference()
            self.state = 2388
            self.match(KqlParser.OPENPAREN)
            self.state = 2397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416134715541506) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1729240967922960685) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 7196752211090525197) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -1443165259434554279) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 504262421452422151) != 0):
                self.state = 2389
                localctx._argumentExpression = self.argumentExpression()
                localctx.Arguments.append(localctx._argumentExpression)
                self.state = 2394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 2390
                    self.match(KqlParser.COMMA)
                    self.state = 2391
                    localctx._argumentExpression = self.argumentExpression()
                    localctx.Arguments.append(localctx._argumentExpression)
                    self.state = 2396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2399
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def starExpression(self):
            return self.getTypedRuleContext(KqlParser.StarExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_argumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpression" ):
                listener.enterArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpression" ):
                listener.exitArgumentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExpression" ):
                return visitor.visitArgumentExpression(self)
            else:
                return visitor.visitChildren(self)




    def argumentExpression(self):

        localctx = KqlParser.ArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_argumentExpression)
        try:
            self.state = 2403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2401
                self.namedExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2402
                self.starExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext

        def COUNT(self):
            return self.getToken(KqlParser.COUNT, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_countExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountExpression" ):
                listener.enterCountExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountExpression" ):
                listener.exitCountExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCountExpression" ):
                return visitor.visitCountExpression(self)
            else:
                return visitor.visitChildren(self)




    def countExpression(self):

        localctx = KqlParser.CountExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_countExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            self.match(KqlParser.COUNT)
            self.state = 2406
            self.match(KqlParser.OPENPAREN)
            self.state = 2408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416134715541506) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1729240967922960685) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 7196752211090525197) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -1443165259434554279) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 504262421452422151) != 0):
                self.state = 2407
                localctx.Expression = self.namedExpression()


            self.state = 2410
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StarExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_starExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarExpression" ):
                listener.enterStarExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarExpression" ):
                listener.exitStarExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarExpression" ):
                return visitor.visitStarExpression(self)
            else:
                return visitor.visitChildren(self)




    def starExpression(self):

        localctx = KqlParser.StarExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_starExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            self.match(KqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.UnsignedLiteralExpressionContext,0)


        def nameReferenceWithDataScope(self):
            return self.getTypedRuleContext(KqlParser.NameReferenceWithDataScopeContext,0)


        def dataTableExpression(self):
            return self.getTypedRuleContext(KqlParser.DataTableExpressionContext,0)


        def externalDataExpression(self):
            return self.getTypedRuleContext(KqlParser.ExternalDataExpressionContext,0)


        def contextualDataTableExpression(self):
            return self.getTypedRuleContext(KqlParser.ContextualDataTableExpressionContext,0)


        def materializedViewCombineExpression(self):
            return self.getTypedRuleContext(KqlParser.MaterializedViewCombineExpressionContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(KqlParser.ParenthesizedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = KqlParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_primaryExpression)
        try:
            self.state = 2421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [285, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2414
                self.unsignedLiteralExpression()
                pass
            elif token in [30, 38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 316]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2415
                self.nameReferenceWithDataScope()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2416
                self.dataTableExpression()
                pass
            elif token in [87, 88]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2417
                self.externalDataExpression()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2418
                self.contextualDataTableExpression()
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2419
                self.materializedViewCombineExpression()
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2420
                self.parenthesizedExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameReferenceWithDataScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # SimpleNameReferenceContext
            self.Scope = None # DataScopeClauseContext

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def dataScopeClause(self):
            return self.getTypedRuleContext(KqlParser.DataScopeClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_nameReferenceWithDataScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameReferenceWithDataScope" ):
                listener.enterNameReferenceWithDataScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameReferenceWithDataScope" ):
                listener.exitNameReferenceWithDataScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameReferenceWithDataScope" ):
                return visitor.visitNameReferenceWithDataScope(self)
            else:
                return visitor.visitChildren(self)




    def nameReferenceWithDataScope(self):

        localctx = KqlParser.NameReferenceWithDataScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_nameReferenceWithDataScope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2423
            localctx.Name = self.simpleNameReference()
            self.state = 2425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 2424
                localctx.Scope = self.dataScopeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataScopeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.KindToken = None # Token

        def DATASCOPE(self):
            return self.getToken(KqlParser.DATASCOPE, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def HOTCACHE(self):
            return self.getToken(KqlParser.HOTCACHE, 0)

        def ALL(self):
            return self.getToken(KqlParser.ALL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_dataScopeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataScopeClause" ):
                listener.enterDataScopeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataScopeClause" ):
                listener.exitDataScopeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataScopeClause" ):
                return visitor.visitDataScopeClause(self)
            else:
                return visitor.visitChildren(self)




    def dataScopeClause(self):

        localctx = KqlParser.DataScopeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_dataScopeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2427
            self.match(KqlParser.DATASCOPE)
            self.state = 2428
            self.match(KqlParser.EQUAL)
            self.state = 2429
            localctx.KindToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==42 or _la==125):
                localctx.KindToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedExpression(self):

        localctx = KqlParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_parenthesizedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            self.match(KqlParser.OPENPAREN)
            self.state = 2432
            localctx.Expression = self.expression()
            self.state = 2433
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # SimpleNameReferenceContext
            self.FromExpression = None # UnnamedExpressionContext
            self.ToExpression = None # UnnamedExpressionContext
            self.StepExpression = None # UnnamedExpressionContext

        def RANGE(self):
            return self.getToken(KqlParser.RANGE, 0)

        def FROM(self):
            return self.getToken(KqlParser.FROM, 0)

        def TO(self):
            return self.getToken(KqlParser.TO, 0)

        def STEP(self):
            return self.getToken(KqlParser.STEP, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeExpression" ):
                return visitor.visitRangeExpression(self)
            else:
                return visitor.visitChildren(self)




    def rangeExpression(self):

        localctx = KqlParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_rangeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2435
            self.match(KqlParser.RANGE)
            self.state = 2436
            localctx.Expression = self.simpleNameReference()
            self.state = 2437
            self.match(KqlParser.FROM)
            self.state = 2438
            localctx.FromExpression = self.unnamedExpression()
            self.state = 2439
            self.match(KqlParser.TO)
            self.state = 2440
            localctx.ToExpression = self.unnamedExpression()
            self.state = 2441
            self.match(KqlParser.STEP)
            self.state = 2442
            localctx.StepExpression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entityNameReference(self):
            return self.getTypedRuleContext(KqlParser.EntityNameReferenceContext,0)


        def entityPathOrElementExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityPathOrElementExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_entityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityExpression" ):
                listener.enterEntityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityExpression" ):
                listener.exitEntityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityExpression" ):
                return visitor.visitEntityExpression(self)
            else:
                return visitor.visitChildren(self)




    def entityExpression(self):

        localctx = KqlParser.EntityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_entityExpression)
        try:
            self.state = 2446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2444
                self.entityNameReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2445
                self.entityPathOrElementExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityPathOrElementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # EntityNameReferenceContext
            self._entityPathOrElementOperator = None # EntityPathOrElementOperatorContext
            self.Operators = list() # of EntityPathOrElementOperatorContexts

        def entityNameReference(self):
            return self.getTypedRuleContext(KqlParser.EntityNameReferenceContext,0)


        def entityPathOrElementOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.EntityPathOrElementOperatorContext)
            else:
                return self.getTypedRuleContext(KqlParser.EntityPathOrElementOperatorContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_entityPathOrElementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityPathOrElementExpression" ):
                listener.enterEntityPathOrElementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityPathOrElementExpression" ):
                listener.exitEntityPathOrElementExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityPathOrElementExpression" ):
                return visitor.visitEntityPathOrElementExpression(self)
            else:
                return visitor.visitChildren(self)




    def entityPathOrElementExpression(self):

        localctx = KqlParser.EntityPathOrElementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_entityPathOrElementExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2448
            localctx.Expression = self.entityNameReference()
            self.state = 2450 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2449
                localctx._entityPathOrElementOperator = self.entityPathOrElementOperator()
                localctx.Operators.append(localctx._entityPathOrElementOperator)
                self.state = 2452 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==15 or _la==30):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityPathOrElementOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Path = None # EntityPathOperatorContext
            self.Element = None # EntityElementOperatorContext
            self.PathElement = None # LegacyEntityPathElementOperatorContext

        def entityPathOperator(self):
            return self.getTypedRuleContext(KqlParser.EntityPathOperatorContext,0)


        def entityElementOperator(self):
            return self.getTypedRuleContext(KqlParser.EntityElementOperatorContext,0)


        def legacyEntityPathElementOperator(self):
            return self.getTypedRuleContext(KqlParser.LegacyEntityPathElementOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_entityPathOrElementOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityPathOrElementOperator" ):
                listener.enterEntityPathOrElementOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityPathOrElementOperator" ):
                listener.exitEntityPathOrElementOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityPathOrElementOperator" ):
                return visitor.visitEntityPathOrElementOperator(self)
            else:
                return visitor.visitChildren(self)




    def entityPathOrElementOperator(self):

        localctx = KqlParser.EntityPathOrElementOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_entityPathOrElementOperator)
        try:
            self.state = 2457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2454
                localctx.Path = self.entityPathOperator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2455
                localctx.Element = self.entityElementOperator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2456
                localctx.PathElement = self.legacyEntityPathElementOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityPathOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # EntityNameContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def entityName(self):
            return self.getTypedRuleContext(KqlParser.EntityNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_entityPathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityPathOperator" ):
                listener.enterEntityPathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityPathOperator" ):
                listener.exitEntityPathOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityPathOperator" ):
                return visitor.visitEntityPathOperator(self)
            else:
                return visitor.visitChildren(self)




    def entityPathOperator(self):

        localctx = KqlParser.EntityPathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_entityPathOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2459
            self.match(KqlParser.DOT)
            self.state = 2460
            localctx.Name = self.entityName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityElementOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # UnnamedExpressionContext

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_entityElementOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityElementOperator" ):
                listener.enterEntityElementOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityElementOperator" ):
                listener.exitEntityElementOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityElementOperator" ):
                return visitor.visitEntityElementOperator(self)
            else:
                return visitor.visitChildren(self)




    def entityElementOperator(self):

        localctx = KqlParser.EntityElementOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_entityElementOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2462
            self.match(KqlParser.OPENBRACKET)
            self.state = 2463
            localctx.Expression = self.unnamedExpression()
            self.state = 2464
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LegacyEntityPathElementOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # UnnamedExpressionContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_legacyEntityPathElementOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyEntityPathElementOperator" ):
                listener.enterLegacyEntityPathElementOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyEntityPathElementOperator" ):
                listener.exitLegacyEntityPathElementOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyEntityPathElementOperator" ):
                return visitor.visitLegacyEntityPathElementOperator(self)
            else:
                return visitor.visitChildren(self)




    def legacyEntityPathElementOperator(self):

        localctx = KqlParser.LegacyEntityPathElementOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_legacyEntityPathElementOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2466
            self.match(KqlParser.DOT)
            self.state = 2467
            self.match(KqlParser.OPENBRACKET)
            self.state = 2468
            localctx.Expression = self.unnamedExpression()
            self.state = 2469
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ATSIGN = None # AtSignNameContext
            self.Name = None # IdentifierOrExtendedKeywordOrEscapedNameContext
            self.ExtendedName = None # ExtendedPathNameContext

        def atSignName(self):
            return self.getTypedRuleContext(KqlParser.AtSignNameContext,0)


        def identifierOrExtendedKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,0)


        def extendedPathName(self):
            return self.getTypedRuleContext(KqlParser.ExtendedPathNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_entityName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityName" ):
                listener.enterEntityName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityName" ):
                listener.exitEntityName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityName" ):
                return visitor.visitEntityName(self)
            else:
                return visitor.visitChildren(self)




    def entityName(self):

        localctx = KqlParser.EntityNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_entityName)
        try:
            self.state = 2474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2471
                localctx.ATSIGN = self.atSignName()
                pass
            elif token in [30, 38, 39, 40, 41, 42, 47, 50, 53, 55, 57, 59, 61, 62, 66, 69, 71, 72, 74, 75, 77, 78, 82, 83, 86, 87, 89, 90, 91, 94, 95, 104, 112, 124, 126, 127, 128, 130, 132, 133, 140, 141, 144, 145, 147, 148, 149, 153, 155, 161, 162, 183, 184, 185, 186, 187, 191, 192, 194, 197, 198, 200, 204, 205, 213, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 232, 233, 237, 238, 240, 241, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 316]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2472
                localctx.Name = self.identifierOrExtendedKeywordOrEscapedName()
                pass
            elif token in [137, 262, 266]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2473
                localctx.ExtendedName = self.extendedPathName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityNameReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # EntityNameContext

        def entityName(self):
            return self.getTypedRuleContext(KqlParser.EntityNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_entityNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityNameReference" ):
                listener.enterEntityNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityNameReference" ):
                listener.exitEntityNameReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEntityNameReference" ):
                return visitor.visitEntityNameReference(self)
            else:
                return visitor.visitChildren(self)




    def entityNameReference(self):

        localctx = KqlParser.EntityNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_entityNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2476
            localctx.Name = self.entityName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtSignNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NameToken = None # Token

        def ATSIGN(self):
            return self.getToken(KqlParser.ATSIGN, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_atSignName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtSignName" ):
                listener.enterAtSignName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtSignName" ):
                listener.exitAtSignName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtSignName" ):
                return visitor.visitAtSignName(self)
            else:
                return visitor.visitChildren(self)




    def atSignName(self):

        localctx = KqlParser.AtSignNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_atSignName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2478
            localctx.NameToken = self.match(KqlParser.ATSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedPathNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NameToken = None # Token

        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def WITHSOURCE(self):
            return self.getToken(KqlParser.WITHSOURCE, 0)

        def WITH_SOURCE(self):
            return self.getToken(KqlParser.WITH_SOURCE, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_extendedPathName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedPathName" ):
                listener.enterExtendedPathName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedPathName" ):
                listener.exitExtendedPathName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedPathName" ):
                return visitor.visitExtendedPathName(self)
            else:
                return visitor.visitChildren(self)




    def extendedPathName(self):

        localctx = KqlParser.ExtendedPathNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_extendedPathName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2480
            localctx.NameToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==137 or _la==262 or _la==266):
                localctx.NameToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedEntityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcardedNameReference(self):
            return self.getTypedRuleContext(KqlParser.WildcardedNameReferenceContext,0)


        def dotCompositeFunctionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.DotCompositeFunctionCallExpressionContext,0)


        def wildcardedPathExpression(self):
            return self.getTypedRuleContext(KqlParser.WildcardedPathExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedEntityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedEntityExpression" ):
                listener.enterWildcardedEntityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedEntityExpression" ):
                listener.exitWildcardedEntityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedEntityExpression" ):
                return visitor.visitWildcardedEntityExpression(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedEntityExpression(self):

        localctx = KqlParser.WildcardedEntityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_wildcardedEntityExpression)
        try:
            self.state = 2485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2482
                self.wildcardedNameReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2483
                self.dotCompositeFunctionCallExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2484
                self.wildcardedPathExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedPathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # DotCompositeFunctionCallExpressionContext
            self.Name = None # WildcardedPathNameContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def dotCompositeFunctionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.DotCompositeFunctionCallExpressionContext,0)


        def wildcardedPathName(self):
            return self.getTypedRuleContext(KqlParser.WildcardedPathNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedPathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedPathExpression" ):
                listener.enterWildcardedPathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedPathExpression" ):
                listener.exitWildcardedPathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedPathExpression" ):
                return visitor.visitWildcardedPathExpression(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedPathExpression(self):

        localctx = KqlParser.WildcardedPathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_wildcardedPathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2487
            localctx.Expression = self.dotCompositeFunctionCallExpression()
            self.state = 2488
            self.match(KqlParser.DOT)
            self.state = 2489
            localctx.Name = self.wildcardedPathName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedPathNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcardedName(self):
            return self.getTypedRuleContext(KqlParser.WildcardedNameContext,0)


        def entityName(self):
            return self.getTypedRuleContext(KqlParser.EntityNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedPathName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedPathName" ):
                listener.enterWildcardedPathName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedPathName" ):
                listener.exitWildcardedPathName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedPathName" ):
                return visitor.visitWildcardedPathName(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedPathName(self):

        localctx = KqlParser.WildcardedPathNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_wildcardedPathName)
        try:
            self.state = 2493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2491
                self.wildcardedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2492
                self.entityName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualDataTableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Id = None # Token
            self.Schema = None # RowSchemaContext

        def CONTEXTUAL_DATATABLE(self):
            return self.getToken(KqlParser.CONTEXTUAL_DATATABLE, 0)

        def GUIDLITERAL(self):
            return self.getToken(KqlParser.GUIDLITERAL, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(KqlParser.RowSchemaContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_contextualDataTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualDataTableExpression" ):
                listener.enterContextualDataTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualDataTableExpression" ):
                listener.exitContextualDataTableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContextualDataTableExpression" ):
                return visitor.visitContextualDataTableExpression(self)
            else:
                return visitor.visitChildren(self)




    def contextualDataTableExpression(self):

        localctx = KqlParser.ContextualDataTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_contextualDataTableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2495
            self.match(KqlParser.CONTEXTUAL_DATATABLE)
            self.state = 2496
            localctx.Id = self.match(KqlParser.GUIDLITERAL)
            self.state = 2497
            localctx.Schema = self.rowSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Schema = None # RowSchemaContext
            self._literalExpression = None # LiteralExpressionContext
            self.Values = list() # of LiteralExpressionContexts

        def DATATABLE(self):
            return self.getToken(KqlParser.DATATABLE, 0)

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(KqlParser.RowSchemaContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def literalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.LiteralExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_dataTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTableExpression" ):
                listener.enterDataTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTableExpression" ):
                listener.exitDataTableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataTableExpression" ):
                return visitor.visitDataTableExpression(self)
            else:
                return visitor.visitChildren(self)




    def dataTableExpression(self):

        localctx = KqlParser.DataTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_dataTableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            self.match(KqlParser.DATATABLE)
            self.state = 2503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0):
                self.state = 2500
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 2505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2506
            localctx.Schema = self.rowSchema()
            self.state = 2507
            self.match(KqlParser.OPENBRACKET)
            self.state = 2509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11 or _la==33 or ((((_la - 285)) & ~0x3f) == 0 and ((1 << (_la - 285)) & 1609564161) != 0):
                self.state = 2508
                localctx._literalExpression = self.literalExpression()
                localctx.Values.append(localctx._literalExpression)


            self.state = 2515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2511
                    self.match(KqlParser.COMMA)
                    self.state = 2512
                    localctx._literalExpression = self.literalExpression()
                    localctx.Values.append(localctx._literalExpression) 
                self.state = 2517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

            self.state = 2519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 2518
                self.match(KqlParser.COMMA)


            self.state = 2521
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._rowSchemaColumnDeclaration = None # RowSchemaColumnDeclarationContext
            self.Columns = list() # of RowSchemaColumnDeclarationContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def rowSchemaColumnDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RowSchemaColumnDeclarationContext)
            else:
                return self.getTypedRuleContext(KqlParser.RowSchemaColumnDeclarationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_rowSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowSchema" ):
                listener.enterRowSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowSchema" ):
                listener.exitRowSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowSchema" ):
                return visitor.visitRowSchema(self)
            else:
                return visitor.visitChildren(self)




    def rowSchema(self):

        localctx = KqlParser.RowSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_rowSchema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2523
            self.match(KqlParser.OPENPAREN)
            self.state = 2525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121216) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 8358751552889101161) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 7196752211023416333) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -1443165259434554279) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 288230376692775943) != 0):
                self.state = 2524
                localctx._rowSchemaColumnDeclaration = self.rowSchemaColumnDeclaration()
                localctx.Columns.append(localctx._rowSchemaColumnDeclaration)


            self.state = 2531
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2527
                    self.match(KqlParser.COMMA)
                    self.state = 2528
                    localctx._rowSchemaColumnDeclaration = self.rowSchemaColumnDeclaration()
                    localctx.Columns.append(localctx._rowSchemaColumnDeclaration) 
                self.state = 2533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

            self.state = 2535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 2534
                self.match(KqlParser.COMMA)


            self.state = 2537
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowSchemaColumnDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(KqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_rowSchemaColumnDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowSchemaColumnDeclaration" ):
                listener.enterRowSchemaColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowSchemaColumnDeclaration" ):
                listener.exitRowSchemaColumnDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowSchemaColumnDeclaration" ):
                return visitor.visitRowSchemaColumnDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def rowSchemaColumnDeclaration(self):

        localctx = KqlParser.RowSchemaColumnDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_rowSchemaColumnDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2539
            localctx.Name = self.parameterName()
            self.state = 2540
            self.match(KqlParser.COLON)
            self.state = 2541
            localctx.Type = self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDataExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Schema = None # RowSchemaContext
            self._stringLiteralExpression = None # StringLiteralExpressionContext
            self.ConnectionStrings = list() # of StringLiteralExpressionContexts
            self.WithClause = None # ExternalDataWithClauseContext

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(KqlParser.RowSchemaContext,0)


        def stringLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StringLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,i)


        def EXTERNALDATA(self):
            return self.getToken(KqlParser.EXTERNALDATA, 0)

        def EXTERNAL_DATA(self):
            return self.getToken(KqlParser.EXTERNAL_DATA, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def externalDataWithClause(self):
            return self.getTypedRuleContext(KqlParser.ExternalDataWithClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_externalDataExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDataExpression" ):
                listener.enterExternalDataExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDataExpression" ):
                listener.exitExternalDataExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalDataExpression" ):
                return visitor.visitExternalDataExpression(self)
            else:
                return visitor.visitChildren(self)




    def externalDataExpression(self):

        localctx = KqlParser.ExternalDataExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_externalDataExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2543
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==87 or _la==88):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & -4611686001243127775) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 5784063) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -1152921503533105151) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1125899906842627) != 0):
                self.state = 2544
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 2549
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2550
            localctx.Schema = self.rowSchema()
            self.state = 2551
            self.match(KqlParser.OPENBRACKET)
            self.state = 2552
            localctx._stringLiteralExpression = self.stringLiteralExpression()
            localctx.ConnectionStrings.append(localctx._stringLiteralExpression)
            self.state = 2557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 2553
                self.match(KqlParser.COMMA)
                self.state = 2554
                localctx._stringLiteralExpression = self.stringLiteralExpression()
                localctx.ConnectionStrings.append(localctx._stringLiteralExpression)
                self.state = 2559
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2560
            self.match(KqlParser.CLOSEBRACKET)
            self.state = 2562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 2561
                localctx.WithClause = self.externalDataWithClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDataWithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._externalDataWithClauseProperty = None # ExternalDataWithClausePropertyContext
            self.Properties = list() # of ExternalDataWithClausePropertyContexts

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def externalDataWithClauseProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ExternalDataWithClausePropertyContext)
            else:
                return self.getTypedRuleContext(KqlParser.ExternalDataWithClausePropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_externalDataWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDataWithClause" ):
                listener.enterExternalDataWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDataWithClause" ):
                listener.exitExternalDataWithClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalDataWithClause" ):
                return visitor.visitExternalDataWithClause(self)
            else:
                return visitor.visitChildren(self)




    def externalDataWithClause(self):

        localctx = KqlParser.ExternalDataWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_externalDataWithClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2564
            self.match(KqlParser.WITH)
            self.state = 2565
            self.match(KqlParser.OPENPAREN)
            self.state = 2577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416123978121216) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 8358751552889101161) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 7196752211023416333) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -1443165259434554279) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 288230376692775943) != 0):
                self.state = 2566
                localctx._externalDataWithClauseProperty = self.externalDataWithClauseProperty()
                localctx.Properties.append(localctx._externalDataWithClauseProperty)
                self.state = 2571
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2567
                        self.match(KqlParser.COMMA)
                        self.state = 2568
                        localctx._externalDataWithClauseProperty = self.externalDataWithClauseProperty()
                        localctx.Properties.append(localctx._externalDataWithClauseProperty) 
                    self.state = 2573
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

                self.state = 2575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 2574
                    self.match(KqlParser.COMMA)




            self.state = 2579
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDataWithClausePropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.StringValue = None # StringLiteralExpressionContext
            self.TokenValue = None # Token
            self.NameValue = None # ParameterNameContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def parameterName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ParameterNameContext)
            else:
                return self.getTypedRuleContext(KqlParser.ParameterNameContext,i)


        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def LONGLITERAL(self):
            return self.getToken(KqlParser.LONGLITERAL, 0)

        def REALLITERAL(self):
            return self.getToken(KqlParser.REALLITERAL, 0)

        def BOOLEANLITERAL(self):
            return self.getToken(KqlParser.BOOLEANLITERAL, 0)

        def DATETIMELITERAL(self):
            return self.getToken(KqlParser.DATETIMELITERAL, 0)

        def TYPELITERAL(self):
            return self.getToken(KqlParser.TYPELITERAL, 0)

        def GUIDLITERAL(self):
            return self.getToken(KqlParser.GUIDLITERAL, 0)

        def RAWGUIDLITERAL(self):
            return self.getToken(KqlParser.RAWGUIDLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_externalDataWithClauseProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDataWithClauseProperty" ):
                listener.enterExternalDataWithClauseProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDataWithClauseProperty" ):
                listener.exitExternalDataWithClauseProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalDataWithClauseProperty" ):
                return visitor.visitExternalDataWithClauseProperty(self)
            else:
                return visitor.visitChildren(self)




    def externalDataWithClauseProperty(self):

        localctx = KqlParser.ExternalDataWithClausePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_externalDataWithClauseProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2581
            localctx.Name = self.parameterName()
            self.state = 2582
            self.match(KqlParser.EQUAL)
            self.state = 2586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [309]:
                self.state = 2583
                localctx.StringValue = self.stringLiteralExpression()
                pass
            elif token in [305, 307, 310, 311, 313, 314, 315]:
                self.state = 2584
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 305)) & ~0x3f) == 0 and ((1 << (_la - 305)) & 1893) != 0)):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [30, 38, 39, 40, 41, 42, 47, 50, 53, 55, 57, 59, 61, 62, 66, 69, 71, 72, 74, 75, 77, 78, 82, 83, 86, 87, 89, 90, 91, 94, 95, 104, 112, 124, 126, 127, 128, 130, 132, 133, 140, 141, 144, 145, 147, 148, 149, 153, 155, 161, 162, 183, 184, 185, 186, 187, 191, 192, 194, 197, 198, 200, 204, 205, 213, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 232, 233, 237, 238, 240, 241, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 316]:
                self.state = 2585
                localctx.NameValue = self.parameterName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializedViewCombineExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # StringLiteralExpressionContext
            self.BaseClause = None # MaterializeViewCombineBaseClauseContext
            self.DeltaClause = None # MaterializedViewCombineDeltaClauseContext
            self.AggregationsClause = None # MaterializedViewCombineAggregationsClauseContext

        def MATERIALIZED_VIEW_COMBINE(self):
            return self.getToken(KqlParser.MATERIALIZED_VIEW_COMBINE, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def materializeViewCombineBaseClause(self):
            return self.getTypedRuleContext(KqlParser.MaterializeViewCombineBaseClauseContext,0)


        def materializedViewCombineDeltaClause(self):
            return self.getTypedRuleContext(KqlParser.MaterializedViewCombineDeltaClauseContext,0)


        def materializedViewCombineAggregationsClause(self):
            return self.getTypedRuleContext(KqlParser.MaterializedViewCombineAggregationsClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_materializedViewCombineExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializedViewCombineExpression" ):
                listener.enterMaterializedViewCombineExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializedViewCombineExpression" ):
                listener.exitMaterializedViewCombineExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaterializedViewCombineExpression" ):
                return visitor.visitMaterializedViewCombineExpression(self)
            else:
                return visitor.visitChildren(self)




    def materializedViewCombineExpression(self):

        localctx = KqlParser.MaterializedViewCombineExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_materializedViewCombineExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self.match(KqlParser.MATERIALIZED_VIEW_COMBINE)
            self.state = 2589
            self.match(KqlParser.OPENPAREN)
            self.state = 2590
            localctx.Name = self.stringLiteralExpression()
            self.state = 2591
            self.match(KqlParser.CLOSEPAREN)
            self.state = 2592
            localctx.BaseClause = self.materializeViewCombineBaseClause()
            self.state = 2593
            localctx.DeltaClause = self.materializedViewCombineDeltaClause()
            self.state = 2594
            localctx.AggregationsClause = self.materializedViewCombineAggregationsClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializeViewCombineBaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def BASE(self):
            return self.getToken(KqlParser.BASE, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_materializeViewCombineBaseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializeViewCombineBaseClause" ):
                listener.enterMaterializeViewCombineBaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializeViewCombineBaseClause" ):
                listener.exitMaterializeViewCombineBaseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaterializeViewCombineBaseClause" ):
                return visitor.visitMaterializeViewCombineBaseClause(self)
            else:
                return visitor.visitChildren(self)




    def materializeViewCombineBaseClause(self):

        localctx = KqlParser.MaterializeViewCombineBaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_materializeViewCombineBaseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2596
            self.match(KqlParser.BASE)
            self.state = 2597
            self.match(KqlParser.OPENPAREN)
            self.state = 2598
            localctx.Expression = self.expression()
            self.state = 2599
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializedViewCombineDeltaClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def DELTA(self):
            return self.getToken(KqlParser.DELTA, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_materializedViewCombineDeltaClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializedViewCombineDeltaClause" ):
                listener.enterMaterializedViewCombineDeltaClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializedViewCombineDeltaClause" ):
                listener.exitMaterializedViewCombineDeltaClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaterializedViewCombineDeltaClause" ):
                return visitor.visitMaterializedViewCombineDeltaClause(self)
            else:
                return visitor.visitChildren(self)




    def materializedViewCombineDeltaClause(self):

        localctx = KqlParser.MaterializedViewCombineDeltaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_materializedViewCombineDeltaClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2601
            self.match(KqlParser.DELTA)
            self.state = 2602
            self.match(KqlParser.OPENPAREN)
            self.state = 2603
            localctx.Expression = self.expression()
            self.state = 2604
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializedViewCombineAggregationsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # SummarizeOperatorContext

        def AGGREGATIONS(self):
            return self.getToken(KqlParser.AGGREGATIONS, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def summarizeOperator(self):
            return self.getTypedRuleContext(KqlParser.SummarizeOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_materializedViewCombineAggregationsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializedViewCombineAggregationsClause" ):
                listener.enterMaterializedViewCombineAggregationsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializedViewCombineAggregationsClause" ):
                listener.exitMaterializedViewCombineAggregationsClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaterializedViewCombineAggregationsClause" ):
                return visitor.visitMaterializedViewCombineAggregationsClause(self)
            else:
                return visitor.visitChildren(self)




    def materializedViewCombineAggregationsClause(self):

        localctx = KqlParser.MaterializedViewCombineAggregationsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_materializedViewCombineAggregationsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            self.match(KqlParser.AGGREGATIONS)
            self.state = 2607
            self.match(KqlParser.OPENPAREN)
            self.state = 2608
            localctx.Operator = self.summarizeOperator()
            self.state = 2609
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def BOOL(self):
            return self.getToken(KqlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(KqlParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(KqlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(KqlParser.DATETIME, 0)

        def DECIMAL(self):
            return self.getToken(KqlParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(KqlParser.DOUBLE, 0)

        def DYNAMIC(self):
            return self.getToken(KqlParser.DYNAMIC, 0)

        def GUID(self):
            return self.getToken(KqlParser.GUID, 0)

        def INT(self):
            return self.getToken(KqlParser.INT, 0)

        def INT64(self):
            return self.getToken(KqlParser.INT64, 0)

        def INT8(self):
            return self.getToken(KqlParser.INT8, 0)

        def LONG(self):
            return self.getToken(KqlParser.LONG, 0)

        def REAL(self):
            return self.getToken(KqlParser.REAL, 0)

        def STRING(self):
            return self.getToken(KqlParser.STRING, 0)

        def TIME(self):
            return self.getToken(KqlParser.TIME, 0)

        def TIMESPAN(self):
            return self.getToken(KqlParser.TIMESPAN, 0)

        def UNIQUEID(self):
            return self.getToken(KqlParser.UNIQUEID, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_scalarType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarType" ):
                listener.enterScalarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarType" ):
                listener.exitScalarType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarType" ):
                return visitor.visitScalarType(self)
            else:
                return visitor.visitChildren(self)




    def scalarType(self):

        localctx = KqlParser.ScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_scalarType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2611
            localctx.Token = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & 34072447) != 0)):
                localctx.Token = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedScalarTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def BOOL(self):
            return self.getToken(KqlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(KqlParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(KqlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(KqlParser.DATETIME, 0)

        def DECIMAL(self):
            return self.getToken(KqlParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(KqlParser.DOUBLE, 0)

        def DYNAMIC(self):
            return self.getToken(KqlParser.DYNAMIC, 0)

        def FLOAT(self):
            return self.getToken(KqlParser.FLOAT, 0)

        def GUID(self):
            return self.getToken(KqlParser.GUID, 0)

        def INT(self):
            return self.getToken(KqlParser.INT, 0)

        def INT16(self):
            return self.getToken(KqlParser.INT16, 0)

        def INT32(self):
            return self.getToken(KqlParser.INT32, 0)

        def INT64(self):
            return self.getToken(KqlParser.INT64, 0)

        def INT8(self):
            return self.getToken(KqlParser.INT8, 0)

        def LONG(self):
            return self.getToken(KqlParser.LONG, 0)

        def REAL(self):
            return self.getToken(KqlParser.REAL, 0)

        def STRING(self):
            return self.getToken(KqlParser.STRING, 0)

        def TIME(self):
            return self.getToken(KqlParser.TIME, 0)

        def TIMESPAN(self):
            return self.getToken(KqlParser.TIMESPAN, 0)

        def UINT(self):
            return self.getToken(KqlParser.UINT, 0)

        def UINT16(self):
            return self.getToken(KqlParser.UINT16, 0)

        def UINT32(self):
            return self.getToken(KqlParser.UINT32, 0)

        def UINT64(self):
            return self.getToken(KqlParser.UINT64, 0)

        def UINT8(self):
            return self.getToken(KqlParser.UINT8, 0)

        def ULONG(self):
            return self.getToken(KqlParser.ULONG, 0)

        def UNIQUEID(self):
            return self.getToken(KqlParser.UNIQUEID, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_extendedScalarType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedScalarType" ):
                listener.enterExtendedScalarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedScalarType" ):
                listener.exitExtendedScalarType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedScalarType" ):
                return visitor.visitExtendedScalarType(self)
            else:
                return visitor.visitChildren(self)




    def extendedScalarType(self):

        localctx = KqlParser.ExtendedScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_extendedScalarType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2613
            localctx.Token = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & 67108863) != 0)):
                localctx.Token = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrExtendedKeywordOrEscapedNameContext

        def identifierOrExtendedKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parameterName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterName" ):
                listener.enterParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterName" ):
                listener.exitParameterName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterName" ):
                return visitor.visitParameterName(self)
            else:
                return visitor.visitChildren(self)




    def parameterName(self):

        localctx = KqlParser.ParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_parameterName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2615
            localctx.Name = self.identifierOrExtendedKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleNameReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_simpleNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameReference" ):
                listener.enterSimpleNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameReference" ):
                listener.exitSimpleNameReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleNameReference" ):
                return visitor.visitSimpleNameReference(self)
            else:
                return visitor.visitChildren(self)




    def simpleNameReference(self):

        localctx = KqlParser.SimpleNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_simpleNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2617
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedNameReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrExtendedKeywordOrEscapedNameContext

        def identifierOrExtendedKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_extendedNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedNameReference" ):
                listener.enterExtendedNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedNameReference" ):
                listener.exitExtendedNameReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedNameReference" ):
                return visitor.visitExtendedNameReference(self)
            else:
                return visitor.visitChildren(self)




    def extendedNameReference(self):

        localctx = KqlParser.ExtendedNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_extendedNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2619
            localctx.Name = self.identifierOrExtendedKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedNameReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # WildcardedNameContext

        def wildcardedName(self):
            return self.getTypedRuleContext(KqlParser.WildcardedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedNameReference" ):
                listener.enterWildcardedNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedNameReference" ):
                listener.exitWildcardedNameReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedNameReference" ):
                return visitor.visitWildcardedNameReference(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedNameReference(self):

        localctx = KqlParser.WildcardedNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_wildcardedNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2621
            localctx.Name = self.wildcardedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleOrWildcardedNameReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SimpleName = None # SimpleNameReferenceContext
            self.WildcardedName = None # WildcardedNameReferenceContext

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def wildcardedNameReference(self):
            return self.getTypedRuleContext(KqlParser.WildcardedNameReferenceContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_simpleOrWildcardedNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleOrWildcardedNameReference" ):
                listener.enterSimpleOrWildcardedNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleOrWildcardedNameReference" ):
                listener.exitSimpleOrWildcardedNameReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleOrWildcardedNameReference" ):
                return visitor.visitSimpleOrWildcardedNameReference(self)
            else:
                return visitor.visitChildren(self)




    def simpleOrWildcardedNameReference(self):

        localctx = KqlParser.SimpleOrWildcardedNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_simpleOrWildcardedNameReference)
        try:
            self.state = 2625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2623
                localctx.SimpleName = self.simpleNameReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2624
                localctx.WildcardedName = self.wildcardedNameReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_identifierName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierName" ):
                listener.enterIdentifierName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierName" ):
                listener.exitIdentifierName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierName" ):
                return visitor.visitIdentifierName(self)
            else:
                return visitor.visitChildren(self)




    def identifierName(self):

        localctx = KqlParser.IdentifierNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_identifierName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627
            localctx.Token = self.match(KqlParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def ACCESS(self):
            return self.getToken(KqlParser.ACCESS, 0)

        def AGGREGATIONS(self):
            return self.getToken(KqlParser.AGGREGATIONS, 0)

        def ALIAS(self):
            return self.getToken(KqlParser.ALIAS, 0)

        def ALL(self):
            return self.getToken(KqlParser.ALL, 0)

        def AXES(self):
            return self.getToken(KqlParser.AXES, 0)

        def BASE(self):
            return self.getToken(KqlParser.BASE, 0)

        def BIN(self):
            return self.getToken(KqlParser.BIN, 0)

        def BOOL(self):
            return self.getToken(KqlParser.BOOL, 0)

        def CLUSTER(self):
            return self.getToken(KqlParser.CLUSTER, 0)

        def DATABASE(self):
            return self.getToken(KqlParser.DATABASE, 0)

        def DECLARE(self):
            return self.getToken(KqlParser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(KqlParser.DEFAULT, 0)

        def DELTA(self):
            return self.getToken(KqlParser.DELTA, 0)

        def EDGES(self):
            return self.getToken(KqlParser.EDGES, 0)

        def EVALUATE(self):
            return self.getToken(KqlParser.EVALUATE, 0)

        def EXECUTE(self):
            return self.getToken(KqlParser.EXECUTE, 0)

        def FACET(self):
            return self.getToken(KqlParser.FACET, 0)

        def FORK(self):
            return self.getToken(KqlParser.FORK, 0)

        def FROM(self):
            return self.getToken(KqlParser.FROM, 0)

        def GUID(self):
            return self.getToken(KqlParser.GUID, 0)

        def HIDDEN_(self):
            return self.getToken(KqlParser.HIDDEN_, 0)

        def HOT(self):
            return self.getToken(KqlParser.HOT, 0)

        def HOTDATA(self):
            return self.getToken(KqlParser.HOTDATA, 0)

        def HOTINDEX(self):
            return self.getToken(KqlParser.HOTINDEX, 0)

        def ID(self):
            return self.getToken(KqlParser.ID, 0)

        def INTO(self):
            return self.getToken(KqlParser.INTO, 0)

        def LEGEND(self):
            return self.getToken(KqlParser.LEGEND, 0)

        def LET(self):
            return self.getToken(KqlParser.LET, 0)

        def LINEAR(self):
            return self.getToken(KqlParser.LINEAR, 0)

        def LOG(self):
            return self.getToken(KqlParser.LOG, 0)

        def LOOKUP(self):
            return self.getToken(KqlParser.LOOKUP, 0)

        def LIST(self):
            return self.getToken(KqlParser.LIST, 0)

        def MAP(self):
            return self.getToken(KqlParser.MAP, 0)

        def NODES(self):
            return self.getToken(KqlParser.NODES, 0)

        def NONE(self):
            return self.getToken(KqlParser.NONE, 0)

        def NULL(self):
            return self.getToken(KqlParser.NULL, 0)

        def NULLS(self):
            return self.getToken(KqlParser.NULLS, 0)

        def ON(self):
            return self.getToken(KqlParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(KqlParser.OPTIONAL, 0)

        def OUTPUT(self):
            return self.getToken(KqlParser.OUTPUT, 0)

        def PACK(self):
            return self.getToken(KqlParser.PACK, 0)

        def PARTITION(self):
            return self.getToken(KqlParser.PARTITION, 0)

        def PARTITIONBY(self):
            return self.getToken(KqlParser.PARTITIONBY, 0)

        def PATTERN(self):
            return self.getToken(KqlParser.PATTERN, 0)

        def PLUGIN(self):
            return self.getToken(KqlParser.PLUGIN, 0)

        def QUERYPARAMETERS(self):
            return self.getToken(KqlParser.QUERYPARAMETERS, 0)

        def RANGE(self):
            return self.getToken(KqlParser.RANGE, 0)

        def REDUCE(self):
            return self.getToken(KqlParser.REDUCE, 0)

        def REPLACE(self):
            return self.getToken(KqlParser.REPLACE, 0)

        def RENDER(self):
            return self.getToken(KqlParser.RENDER, 0)

        def RESTRICT(self):
            return self.getToken(KqlParser.RESTRICT, 0)

        def SERIES(self):
            return self.getToken(KqlParser.SERIES, 0)

        def STACKED(self):
            return self.getToken(KqlParser.STACKED, 0)

        def STACKED100(self):
            return self.getToken(KqlParser.STACKED100, 0)

        def STEP(self):
            return self.getToken(KqlParser.STEP, 0)

        def THRESHOLD(self):
            return self.getToken(KqlParser.THRESHOLD, 0)

        def TYPEOF(self):
            return self.getToken(KqlParser.TYPEOF, 0)

        def UNSTACKED(self):
            return self.getToken(KqlParser.UNSTACKED, 0)

        def UUID(self):
            return self.getToken(KqlParser.UUID, 0)

        def VIEW(self):
            return self.getToken(KqlParser.VIEW, 0)

        def VISIBLE(self):
            return self.getToken(KqlParser.VISIBLE, 0)

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def XAXIS(self):
            return self.getToken(KqlParser.XAXIS, 0)

        def XCOLUMN(self):
            return self.getToken(KqlParser.XCOLUMN, 0)

        def XMAX(self):
            return self.getToken(KqlParser.XMAX, 0)

        def XMIN(self):
            return self.getToken(KqlParser.XMIN, 0)

        def XTITLE(self):
            return self.getToken(KqlParser.XTITLE, 0)

        def YAXIS(self):
            return self.getToken(KqlParser.YAXIS, 0)

        def YCOLUMNS(self):
            return self.getToken(KqlParser.YCOLUMNS, 0)

        def YMAX(self):
            return self.getToken(KqlParser.YMAX, 0)

        def YMIN(self):
            return self.getToken(KqlParser.YMIN, 0)

        def YTITLE(self):
            return self.getToken(KqlParser.YTITLE, 0)

        def YSPLIT(self):
            return self.getToken(KqlParser.YSPLIT, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_keywordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordName" ):
                listener.enterKeywordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordName" ):
                listener.exitKeywordName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordName" ):
                return visitor.visitKeywordName(self)
            else:
                return visitor.visitChildren(self)




    def keywordName(self):

        localctx = KqlParser.KeywordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_keywordName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2629
            localctx.Token = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & 218478683485278237) != 0) or ((((_la - 112)) & ~0x3f) == 0 and ((1 << (_la - 112)) & 1691298798096385) != 0) or ((((_la - 183)) & ~0x3f) == 0 and ((1 << (_la - 183)) & 307951464744141595) != 0) or ((((_la - 253)) & ~0x3f) == 0 and ((1 << (_la - 253)) & 17314054333) != 0)):
                localctx.Token = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedKeywordNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def ACCUMULATE(self):
            return self.getToken(KqlParser.ACCUMULATE, 0)

        def AS(self):
            return self.getToken(KqlParser.AS, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def CONTAINS(self):
            return self.getToken(KqlParser.CONTAINS, 0)

        def CONSUME(self):
            return self.getToken(KqlParser.CONSUME, 0)

        def COUNT(self):
            return self.getToken(KqlParser.COUNT, 0)

        def DATATABLE(self):
            return self.getToken(KqlParser.DATATABLE, 0)

        def DISTINCT(self):
            return self.getToken(KqlParser.DISTINCT, 0)

        def EXTEND(self):
            return self.getToken(KqlParser.EXTEND, 0)

        def EXTERNALDATA(self):
            return self.getToken(KqlParser.EXTERNALDATA, 0)

        def FIND(self):
            return self.getToken(KqlParser.FIND, 0)

        def FILTER(self):
            return self.getToken(KqlParser.FILTER, 0)

        def HAS(self):
            return self.getToken(KqlParser.HAS, 0)

        def IN(self):
            return self.getToken(KqlParser.IN, 0)

        def INVOKE(self):
            return self.getToken(KqlParser.INVOKE, 0)

        def LIMIT(self):
            return self.getToken(KqlParser.LIMIT, 0)

        def MATERIALIZE(self):
            return self.getToken(KqlParser.MATERIALIZE, 0)

        def OF(self):
            return self.getToken(KqlParser.OF, 0)

        def PARSE(self):
            return self.getToken(KqlParser.PARSE, 0)

        def PRINT(self):
            return self.getToken(KqlParser.PRINT, 0)

        def SAMPLE(self):
            return self.getToken(KqlParser.SAMPLE, 0)

        def SAMPLE_DISTINCT(self):
            return self.getToken(KqlParser.SAMPLE_DISTINCT, 0)

        def SCAN(self):
            return self.getToken(KqlParser.SCAN, 0)

        def SEARCH(self):
            return self.getToken(KqlParser.SEARCH, 0)

        def SERIALIZE(self):
            return self.getToken(KqlParser.SERIALIZE, 0)

        def SET(self):
            return self.getToken(KqlParser.SET, 0)

        def SORT(self):
            return self.getToken(KqlParser.SORT, 0)

        def SUMMARIZE(self):
            return self.getToken(KqlParser.SUMMARIZE, 0)

        def TAKE(self):
            return self.getToken(KqlParser.TAKE, 0)

        def TITLE(self):
            return self.getToken(KqlParser.TITLE, 0)

        def TO(self):
            return self.getToken(KqlParser.TO, 0)

        def TOP(self):
            return self.getToken(KqlParser.TOP, 0)

        def TOSCALAR(self):
            return self.getToken(KqlParser.TOSCALAR, 0)

        def TOTABLE(self):
            return self.getToken(KqlParser.TOTABLE, 0)

        def TOP_NESTED(self):
            return self.getToken(KqlParser.TOP_NESTED, 0)

        def TOP_HITTERS(self):
            return self.getToken(KqlParser.TOP_HITTERS, 0)

        def WHERE(self):
            return self.getToken(KqlParser.WHERE, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_extendedKeywordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedKeywordName" ):
                listener.enterExtendedKeywordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedKeywordName" ):
                listener.exitExtendedKeywordName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedKeywordName" ):
                return visitor.visitExtendedKeywordName(self)
            else:
                return visitor.visitChildren(self)




    def extendedKeywordName(self):

        localctx = KqlParser.ExtendedKeywordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_extendedKeywordName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2631
            localctx.Token = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & 7177891226059009) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 2252899929292801) != 0) or ((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & -1107837748295761407) != 0) or ((((_la - 249)) & ~0x3f) == 0 and ((1 << (_la - 249)) & 1031) != 0)):
                localctx.Token = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EscapedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.StringLiteral = None # StringLiteralExpressionContext

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_escapedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscapedName" ):
                listener.enterEscapedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscapedName" ):
                listener.exitEscapedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEscapedName" ):
                return visitor.visitEscapedName(self)
            else:
                return visitor.visitChildren(self)




    def escapedName(self):

        localctx = KqlParser.EscapedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_escapedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2633
            self.match(KqlParser.OPENBRACKET)
            self.state = 2634
            localctx.StringLiteral = self.stringLiteralExpression()
            self.state = 2635
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrKeywordNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # IdentifierNameContext
            self.Keyword = None # KeywordNameContext

        def identifierName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierNameContext,0)


        def keywordName(self):
            return self.getTypedRuleContext(KqlParser.KeywordNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_identifierOrKeywordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrKeywordName" ):
                listener.enterIdentifierOrKeywordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrKeywordName" ):
                listener.exitIdentifierOrKeywordName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrKeywordName" ):
                return visitor.visitIdentifierOrKeywordName(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrKeywordName(self):

        localctx = KqlParser.IdentifierOrKeywordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_identifierOrKeywordName)
        try:
            self.state = 2639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [316]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2637
                localctx.Identifier = self.identifierName()
                pass
            elif token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2638
                localctx.Keyword = self.keywordName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrKeywordOrEscapedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # IdentifierNameContext
            self.Keyword = None # KeywordNameContext
            self.Escaped = None # EscapedNameContext

        def identifierName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierNameContext,0)


        def keywordName(self):
            return self.getTypedRuleContext(KqlParser.KeywordNameContext,0)


        def escapedName(self):
            return self.getTypedRuleContext(KqlParser.EscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_identifierOrKeywordOrEscapedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrKeywordOrEscapedName" ):
                listener.enterIdentifierOrKeywordOrEscapedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrKeywordOrEscapedName" ):
                listener.exitIdentifierOrKeywordOrEscapedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrKeywordOrEscapedName" ):
                return visitor.visitIdentifierOrKeywordOrEscapedName(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrKeywordOrEscapedName(self):

        localctx = KqlParser.IdentifierOrKeywordOrEscapedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_identifierOrKeywordOrEscapedName)
        try:
            self.state = 2644
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [316]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2641
                localctx.Identifier = self.identifierName()
                pass
            elif token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2642
                localctx.Keyword = self.keywordName()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2643
                localctx.Escaped = self.escapedName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrExtendedKeywordOrEscapedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # IdentifierNameContext
            self.Keyword = None # KeywordNameContext
            self.ExtendedKeyword = None # ExtendedKeywordNameContext
            self.Escaped = None # EscapedNameContext

        def identifierName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierNameContext,0)


        def keywordName(self):
            return self.getTypedRuleContext(KqlParser.KeywordNameContext,0)


        def extendedKeywordName(self):
            return self.getTypedRuleContext(KqlParser.ExtendedKeywordNameContext,0)


        def escapedName(self):
            return self.getTypedRuleContext(KqlParser.EscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_identifierOrExtendedKeywordOrEscapedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrExtendedKeywordOrEscapedName" ):
                listener.enterIdentifierOrExtendedKeywordOrEscapedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrExtendedKeywordOrEscapedName" ):
                listener.exitIdentifierOrExtendedKeywordOrEscapedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrExtendedKeywordOrEscapedName" ):
                return visitor.visitIdentifierOrExtendedKeywordOrEscapedName(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrExtendedKeywordOrEscapedName(self):

        localctx = KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_identifierOrExtendedKeywordOrEscapedName)
        try:
            self.state = 2650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [316]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2646
                localctx.Identifier = self.identifierName()
                pass
            elif token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2647
                localctx.Keyword = self.keywordName()
                pass
            elif token in [39, 47, 57, 61, 62, 66, 71, 77, 86, 87, 90, 91, 104, 130, 133, 144, 155, 185, 194, 205, 221, 222, 223, 225, 226, 228, 230, 238, 240, 245, 246, 247, 248, 249, 250, 251, 259]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2648
                localctx.ExtendedKeyword = self.extendedKeywordName()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2649
                localctx.Escaped = self.escapedName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrExtendedKeywordNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # IdentifierNameContext
            self.Keyword = None # KeywordNameContext
            self.ExtendedKeyword = None # ExtendedKeywordNameContext

        def identifierName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierNameContext,0)


        def keywordName(self):
            return self.getTypedRuleContext(KqlParser.KeywordNameContext,0)


        def extendedKeywordName(self):
            return self.getTypedRuleContext(KqlParser.ExtendedKeywordNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_identifierOrExtendedKeywordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrExtendedKeywordName" ):
                listener.enterIdentifierOrExtendedKeywordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrExtendedKeywordName" ):
                listener.exitIdentifierOrExtendedKeywordName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrExtendedKeywordName" ):
                return visitor.visitIdentifierOrExtendedKeywordName(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrExtendedKeywordName(self):

        localctx = KqlParser.IdentifierOrExtendedKeywordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_identifierOrExtendedKeywordName)
        try:
            self.state = 2655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [316]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2652
                localctx.Identifier = self.identifierName()
                pass
            elif token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2653
                localctx.Keyword = self.keywordName()
                pass
            elif token in [39, 47, 57, 61, 62, 66, 71, 77, 86, 87, 90, 91, 104, 130, 133, 144, 155, 185, 194, 205, 221, 222, 223, 225, 226, 228, 230, 238, 240, 245, 246, 247, 248, 249, 250, 251, 259]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2654
                localctx.ExtendedKeyword = self.extendedKeywordName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Prefix = None # WildcardedNamePrefixContext
            self._wildcardedNameSegment = None # WildcardedNameSegmentContext
            self.Segments = list() # of WildcardedNameSegmentContexts

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def wildcardedNamePrefix(self):
            return self.getTypedRuleContext(KqlParser.WildcardedNamePrefixContext,0)


        def wildcardedNameSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.WildcardedNameSegmentContext)
            else:
                return self.getTypedRuleContext(KqlParser.WildcardedNameSegmentContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedName" ):
                listener.enterWildcardedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedName" ):
                listener.exitWildcardedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedName" ):
                return visitor.visitWildcardedName(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedName(self):

        localctx = KqlParser.WildcardedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_wildcardedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416122904379392) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 8358751552889101161) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 7196752211023416333) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -1443165259434554279) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 288230376692775943) != 0):
                self.state = 2657
                localctx.Prefix = self.wildcardedNamePrefix()


            self.state = 2660
            self.match(KqlParser.ASTERISK)
            self.state = 2664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 7684416122904379394) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 8358751552889101161) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 7196752211023416333) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -1443165259434554279) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 288371114181131271) != 0):
                self.state = 2661
                localctx._wildcardedNameSegment = self.wildcardedNameSegment()
                localctx.Segments.append(localctx._wildcardedNameSegment)
                self.state = 2666
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedNamePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # Token
            self.Keyword = None # KeywordNameContext
            self.ExtendedKeyword = None # ExtendedKeywordNameContext

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def keywordName(self):
            return self.getTypedRuleContext(KqlParser.KeywordNameContext,0)


        def extendedKeywordName(self):
            return self.getTypedRuleContext(KqlParser.ExtendedKeywordNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedNamePrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedNamePrefix" ):
                listener.enterWildcardedNamePrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedNamePrefix" ):
                listener.exitWildcardedNamePrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedNamePrefix" ):
                return visitor.visitWildcardedNamePrefix(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedNamePrefix(self):

        localctx = KqlParser.WildcardedNamePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_wildcardedNamePrefix)
        try:
            self.state = 2670
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [316]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2667
                localctx.Identifier = self.match(KqlParser.IDENTIFIER)
                pass
            elif token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2668
                localctx.Keyword = self.keywordName()
                pass
            elif token in [39, 47, 57, 61, 62, 66, 71, 77, 86, 87, 90, 91, 104, 130, 133, 144, 155, 185, 194, 205, 221, 222, 223, 225, 226, 228, 230, 238, 240, 245, 246, 247, 248, 249, 250, 251, 259]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2669
                localctx.ExtendedKeyword = self.extendedKeywordName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedNameSegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # Token
            self.Keyword = None # KeywordNameContext
            self.ExtendedKeyword = None # ExtendedKeywordNameContext
            self.Number = None # Token
            self.Star = None # Token

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def keywordName(self):
            return self.getTypedRuleContext(KqlParser.KeywordNameContext,0)


        def extendedKeywordName(self):
            return self.getTypedRuleContext(KqlParser.ExtendedKeywordNameContext,0)


        def LONGLITERAL(self):
            return self.getToken(KqlParser.LONGLITERAL, 0)

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedNameSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedNameSegment" ):
                listener.enterWildcardedNameSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedNameSegment" ):
                listener.exitWildcardedNameSegment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcardedNameSegment" ):
                return visitor.visitWildcardedNameSegment(self)
            else:
                return visitor.visitChildren(self)




    def wildcardedNameSegment(self):

        localctx = KqlParser.WildcardedNameSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_wildcardedNameSegment)
        try:
            self.state = 2677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [316]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2672
                localctx.Identifier = self.match(KqlParser.IDENTIFIER)
                pass
            elif token in [38, 40, 41, 42, 50, 53, 55, 59, 69, 72, 74, 75, 78, 82, 83, 89, 94, 95, 112, 124, 126, 127, 128, 132, 140, 141, 145, 147, 148, 149, 153, 161, 162, 183, 184, 186, 187, 191, 192, 197, 198, 200, 204, 213, 214, 215, 218, 219, 220, 227, 232, 233, 237, 241, 253, 255, 256, 257, 258, 260, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2673
                localctx.Keyword = self.keywordName()
                pass
            elif token in [39, 47, 57, 61, 62, 66, 71, 77, 86, 87, 90, 91, 104, 130, 133, 144, 155, 185, 194, 205, 221, 222, 223, 225, 226, 228, 230, 238, 240, 245, 246, 247, 248, 249, 250, 251, 259]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2674
                localctx.ExtendedKeyword = self.extendedKeywordName()
                pass
            elif token in [305]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2675
                localctx.Number = self.match(KqlParser.LONGLITERAL)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2676
                localctx.Star = self.match(KqlParser.ASTERISK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Signed = None # SignedLiteralExpressionContext
            self.Unsigned = None # UnsignedLiteralExpressionContext

        def signedLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.SignedLiteralExpressionContext,0)


        def unsignedLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.UnsignedLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_literalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpression" ):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def literalExpression(self):

        localctx = KqlParser.LiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_literalExpression)
        try:
            self.state = 2681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2679
                localctx.Signed = self.signedLiteralExpression()
                pass
            elif token in [285, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2680
                localctx.Unsigned = self.unsignedLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsignedLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Long = None # LongLiteralExpressionContext
            self.Int = None # IntLiteralExpressionContext
            self.Real = None # RealLiteralExpressionContext
            self.Decimal = None # DecimalLiteralExpressionContext
            self.DateTime = None # DateTimeLiteralExpressionContext
            self.TimeSpan = None # TimeSpanLiteralExpressionContext
            self.Boolean = None # BooleanLiteralExpressionContext
            self.Guid = None # GuidLiteralExpressionContext
            self.Type = None # TypeLiteralExpressionContext
            self.String = None # StringLiteralExpressionContext
            self.Dynamic = None # DynamicLiteralExpressionContext

        def longLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.LongLiteralExpressionContext,0)


        def intLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.IntLiteralExpressionContext,0)


        def realLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.RealLiteralExpressionContext,0)


        def decimalLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DecimalLiteralExpressionContext,0)


        def dateTimeLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DateTimeLiteralExpressionContext,0)


        def timeSpanLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.TimeSpanLiteralExpressionContext,0)


        def booleanLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.BooleanLiteralExpressionContext,0)


        def guidLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.GuidLiteralExpressionContext,0)


        def typeLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.TypeLiteralExpressionContext,0)


        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def dynamicLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DynamicLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_unsignedLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsignedLiteralExpression" ):
                listener.enterUnsignedLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsignedLiteralExpression" ):
                listener.exitUnsignedLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsignedLiteralExpression" ):
                return visitor.visitUnsignedLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def unsignedLiteralExpression(self):

        localctx = KqlParser.UnsignedLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_unsignedLiteralExpression)
        try:
            self.state = 2694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [305]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2683
                localctx.Long = self.longLiteralExpression()
                pass
            elif token in [306]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2684
                localctx.Int = self.intLiteralExpression()
                pass
            elif token in [307]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2685
                localctx.Real = self.realLiteralExpression()
                pass
            elif token in [308]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2686
                localctx.Decimal = self.decimalLiteralExpression()
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2687
                localctx.DateTime = self.dateTimeLiteralExpression()
                pass
            elif token in [312]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2688
                localctx.TimeSpan = self.timeSpanLiteralExpression()
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2689
                localctx.Boolean = self.booleanLiteralExpression()
                pass
            elif token in [315]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2690
                localctx.Guid = self.guidLiteralExpression()
                pass
            elif token in [313]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2691
                localctx.Type = self.typeLiteralExpression()
                pass
            elif token in [309]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2692
                localctx.String = self.stringLiteralExpression()
                pass
            elif token in [285]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2693
                localctx.Dynamic = self.dynamicLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLikeLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Long = None # LongLiteralExpressionContext
            self.Int = None # IntLiteralExpressionContext
            self.Real = None # RealLiteralExpressionContext
            self.Decimal = None # DecimalLiteralExpressionContext
            self.Signed = None # SignedLiteralExpressionContext
            self.DateTime = None # DateTimeLiteralExpressionContext
            self.TimeSpan = None # TimeSpanLiteralExpressionContext

        def longLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.LongLiteralExpressionContext,0)


        def intLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.IntLiteralExpressionContext,0)


        def realLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.RealLiteralExpressionContext,0)


        def decimalLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DecimalLiteralExpressionContext,0)


        def signedLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.SignedLiteralExpressionContext,0)


        def dateTimeLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DateTimeLiteralExpressionContext,0)


        def timeSpanLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.TimeSpanLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_numberLikeLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLikeLiteralExpression" ):
                listener.enterNumberLikeLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLikeLiteralExpression" ):
                listener.exitNumberLikeLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLikeLiteralExpression" ):
                return visitor.visitNumberLikeLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def numberLikeLiteralExpression(self):

        localctx = KqlParser.NumberLikeLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_numberLikeLiteralExpression)
        try:
            self.state = 2703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [305]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2696
                localctx.Long = self.longLiteralExpression()
                pass
            elif token in [306]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2697
                localctx.Int = self.intLiteralExpression()
                pass
            elif token in [307]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2698
                localctx.Real = self.realLiteralExpression()
                pass
            elif token in [308]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2699
                localctx.Decimal = self.decimalLiteralExpression()
                pass
            elif token in [11, 33]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2700
                localctx.Signed = self.signedLiteralExpression()
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2701
                localctx.DateTime = self.dateTimeLiteralExpression()
                pass
            elif token in [312]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2702
                localctx.TimeSpan = self.timeSpanLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Long = None # LongLiteralExpressionContext
            self.Int = None # IntLiteralExpressionContext
            self.Real = None # RealLiteralExpressionContext
            self.Decimal = None # DecimalLiteralExpressionContext
            self.Signed = None # SignedLiteralExpressionContext

        def longLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.LongLiteralExpressionContext,0)


        def intLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.IntLiteralExpressionContext,0)


        def realLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.RealLiteralExpressionContext,0)


        def decimalLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DecimalLiteralExpressionContext,0)


        def signedLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.SignedLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_numericLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteralExpression" ):
                listener.enterNumericLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteralExpression" ):
                listener.exitNumericLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteralExpression" ):
                return visitor.visitNumericLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def numericLiteralExpression(self):

        localctx = KqlParser.NumericLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_numericLiteralExpression)
        try:
            self.state = 2710
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [305]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2705
                localctx.Long = self.longLiteralExpression()
                pass
            elif token in [306]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2706
                localctx.Int = self.intLiteralExpression()
                pass
            elif token in [307]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2707
                localctx.Real = self.realLiteralExpression()
                pass
            elif token in [308]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2708
                localctx.Decimal = self.decimalLiteralExpression()
                pass
            elif token in [11, 33]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2709
                localctx.Signed = self.signedLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Long = None # SignedLongLiteralExpressionContext
            self.Real = None # SignedRealLiteralExpressionContext

        def signedLongLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.SignedLongLiteralExpressionContext,0)


        def signedRealLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.SignedRealLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_signedLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedLiteralExpression" ):
                listener.enterSignedLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedLiteralExpression" ):
                listener.exitSignedLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignedLiteralExpression" ):
                return visitor.visitSignedLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def signedLiteralExpression(self):

        localctx = KqlParser.SignedLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_signedLiteralExpression)
        try:
            self.state = 2714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2712
                localctx.Long = self.signedLongLiteralExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2713
                localctx.Real = self.signedRealLiteralExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LongLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def LONGLITERAL(self):
            return self.getToken(KqlParser.LONGLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_longLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLongLiteralExpression" ):
                listener.enterLongLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLongLiteralExpression" ):
                listener.exitLongLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLongLiteralExpression" ):
                return visitor.visitLongLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def longLiteralExpression(self):

        localctx = KqlParser.LongLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_longLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2716
            localctx.Token = self.match(KqlParser.LONGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def INTLITERAL(self):
            return self.getToken(KqlParser.INTLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_intLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntLiteralExpression" ):
                listener.enterIntLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntLiteralExpression" ):
                listener.exitIntLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntLiteralExpression" ):
                return visitor.visitIntLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def intLiteralExpression(self):

        localctx = KqlParser.IntLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_intLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2718
            localctx.Token = self.match(KqlParser.INTLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RealLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def REALLITERAL(self):
            return self.getToken(KqlParser.REALLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_realLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealLiteralExpression" ):
                listener.enterRealLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealLiteralExpression" ):
                listener.exitRealLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRealLiteralExpression" ):
                return visitor.visitRealLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def realLiteralExpression(self):

        localctx = KqlParser.RealLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_realLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2720
            localctx.Token = self.match(KqlParser.REALLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def DECIMALLITERAL(self):
            return self.getToken(KqlParser.DECIMALLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_decimalLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteralExpression" ):
                listener.enterDecimalLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteralExpression" ):
                listener.exitDecimalLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteralExpression" ):
                return visitor.visitDecimalLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def decimalLiteralExpression(self):

        localctx = KqlParser.DecimalLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_decimalLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2722
            localctx.Token = self.match(KqlParser.DECIMALLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateTimeLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def DATETIMELITERAL(self):
            return self.getToken(KqlParser.DATETIMELITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_dateTimeLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeLiteralExpression" ):
                listener.enterDateTimeLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeLiteralExpression" ):
                listener.exitDateTimeLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateTimeLiteralExpression" ):
                return visitor.visitDateTimeLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def dateTimeLiteralExpression(self):

        localctx = KqlParser.DateTimeLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_dateTimeLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2724
            localctx.Token = self.match(KqlParser.DATETIMELITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeSpanLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def TIMESPANLITERAL(self):
            return self.getToken(KqlParser.TIMESPANLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_timeSpanLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeSpanLiteralExpression" ):
                listener.enterTimeSpanLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeSpanLiteralExpression" ):
                listener.exitTimeSpanLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeSpanLiteralExpression" ):
                return visitor.visitTimeSpanLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def timeSpanLiteralExpression(self):

        localctx = KqlParser.TimeSpanLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_timeSpanLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2726
            localctx.Token = self.match(KqlParser.TIMESPANLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def BOOLEANLITERAL(self):
            return self.getToken(KqlParser.BOOLEANLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_booleanLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteralExpression" ):
                listener.enterBooleanLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteralExpression" ):
                listener.exitBooleanLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteralExpression" ):
                return visitor.visitBooleanLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteralExpression(self):

        localctx = KqlParser.BooleanLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_booleanLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2728
            localctx.Token = self.match(KqlParser.BOOLEANLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuidLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def GUIDLITERAL(self):
            return self.getToken(KqlParser.GUIDLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_guidLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuidLiteralExpression" ):
                listener.enterGuidLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuidLiteralExpression" ):
                listener.exitGuidLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuidLiteralExpression" ):
                return visitor.visitGuidLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def guidLiteralExpression(self):

        localctx = KqlParser.GuidLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_guidLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2730
            localctx.Token = self.match(KqlParser.GUIDLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def TYPELITERAL(self):
            return self.getToken(KqlParser.TYPELITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_typeLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeLiteralExpression" ):
                listener.enterTypeLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeLiteralExpression" ):
                listener.exitTypeLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeLiteralExpression" ):
                return visitor.visitTypeLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeLiteralExpression(self):

        localctx = KqlParser.TypeLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_typeLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2732
            localctx.Token = self.match(KqlParser.TYPELITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedLongLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SignToken = None # Token
            self.LiteralToken = None # Token

        def LONGLITERAL(self):
            return self.getToken(KqlParser.LONGLITERAL, 0)

        def PLUS(self):
            return self.getToken(KqlParser.PLUS, 0)

        def DASH(self):
            return self.getToken(KqlParser.DASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_signedLongLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedLongLiteralExpression" ):
                listener.enterSignedLongLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedLongLiteralExpression" ):
                listener.exitSignedLongLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignedLongLiteralExpression" ):
                return visitor.visitSignedLongLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def signedLongLiteralExpression(self):

        localctx = KqlParser.SignedLongLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_signedLongLiteralExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2734
            localctx.SignToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==11 or _la==33):
                localctx.SignToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2735
            localctx.LiteralToken = self.match(KqlParser.LONGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedRealLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SignToken = None # Token
            self.LiteralToken = None # Token

        def REALLITERAL(self):
            return self.getToken(KqlParser.REALLITERAL, 0)

        def PLUS(self):
            return self.getToken(KqlParser.PLUS, 0)

        def DASH(self):
            return self.getToken(KqlParser.DASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_signedRealLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedRealLiteralExpression" ):
                listener.enterSignedRealLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedRealLiteralExpression" ):
                listener.exitSignedRealLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignedRealLiteralExpression" ):
                return visitor.visitSignedRealLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def signedRealLiteralExpression(self):

        localctx = KqlParser.SignedRealLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_signedRealLiteralExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2737
            localctx.SignToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==11 or _la==33):
                localctx.SignToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2738
            localctx.LiteralToken = self.match(KqlParser.REALLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STRINGLITERAL = None # Token
            self.Tokens = list() # of Tokens

        def STRINGLITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.STRINGLITERAL)
            else:
                return self.getToken(KqlParser.STRINGLITERAL, i)

        def getRuleIndex(self):
            return KqlParser.RULE_stringLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralExpression" ):
                listener.enterStringLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralExpression" ):
                listener.exitStringLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteralExpression" ):
                return visitor.visitStringLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteralExpression(self):

        localctx = KqlParser.StringLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_stringLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2740
            localctx._STRINGLITERAL = self.match(KqlParser.STRINGLITERAL)
            localctx.Tokens.append(localctx._STRINGLITERAL)
            self.state = 2744
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2741
                    localctx._STRINGLITERAL = self.match(KqlParser.STRINGLITERAL)
                    localctx.Tokens.append(localctx._STRINGLITERAL) 
                self.state = 2746
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Value = None # JsonValueContext

        def DYNAMIC(self):
            return self.getToken(KqlParser.DYNAMIC, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(KqlParser.JsonValueContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_dynamicLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicLiteralExpression" ):
                listener.enterDynamicLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicLiteralExpression" ):
                listener.exitDynamicLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicLiteralExpression" ):
                return visitor.visitDynamicLiteralExpression(self)
            else:
                return visitor.visitChildren(self)




    def dynamicLiteralExpression(self):

        localctx = KqlParser.DynamicLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_dynamicLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2747
            self.match(KqlParser.DYNAMIC)
            self.state = 2748
            self.match(KqlParser.OPENPAREN)
            self.state = 2749
            localctx.Value = self.jsonValue()
            self.state = 2750
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Array = None # JsonArrayContext
            self.Boolean = None # JsonBooleanContext
            self.DateTime = None # JsonDateTimeContext
            self.Guid = None # JsonGuidContext
            self.Long = None # JsonLongContext
            self.Null = None # JsonNullContext
            self.Object = None # JsonObjectContext
            self.Real = None # JsonRealContext
            self.String = None # JsonStringContext
            self.Timespan = None # JsonTimeSpanContext
            self.Dynamic = None # DynamicLiteralExpressionContext

        def jsonArray(self):
            return self.getTypedRuleContext(KqlParser.JsonArrayContext,0)


        def jsonBoolean(self):
            return self.getTypedRuleContext(KqlParser.JsonBooleanContext,0)


        def jsonDateTime(self):
            return self.getTypedRuleContext(KqlParser.JsonDateTimeContext,0)


        def jsonGuid(self):
            return self.getTypedRuleContext(KqlParser.JsonGuidContext,0)


        def jsonLong(self):
            return self.getTypedRuleContext(KqlParser.JsonLongContext,0)


        def jsonNull(self):
            return self.getTypedRuleContext(KqlParser.JsonNullContext,0)


        def jsonObject(self):
            return self.getTypedRuleContext(KqlParser.JsonObjectContext,0)


        def jsonReal(self):
            return self.getTypedRuleContext(KqlParser.JsonRealContext,0)


        def jsonString(self):
            return self.getTypedRuleContext(KqlParser.JsonStringContext,0)


        def jsonTimeSpan(self):
            return self.getTypedRuleContext(KqlParser.JsonTimeSpanContext,0)


        def dynamicLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DynamicLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonValue" ):
                return visitor.visitJsonValue(self)
            else:
                return visitor.visitChildren(self)




    def jsonValue(self):

        localctx = KqlParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_jsonValue)
        try:
            self.state = 2763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2752
                localctx.Array = self.jsonArray()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2753
                localctx.Boolean = self.jsonBoolean()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2754
                localctx.DateTime = self.jsonDateTime()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2755
                localctx.Guid = self.jsonGuid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2756
                localctx.Long = self.jsonLong()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2757
                localctx.Null = self.jsonNull()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2758
                localctx.Object = self.jsonObject()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2759
                localctx.Real = self.jsonReal()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2760
                localctx.String = self.jsonString()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2761
                localctx.Timespan = self.jsonTimeSpan()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2762
                localctx.Dynamic = self.dynamicLiteralExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._jsonPair = None # JsonPairContext
            self.Pairs = list() # of JsonPairContexts

        def OPENBRACE(self):
            return self.getToken(KqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(KqlParser.CLOSEBRACE, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(KqlParser.JsonPairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObject" ):
                listener.enterJsonObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObject" ):
                listener.exitJsonObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonObject" ):
                return visitor.visitJsonObject(self)
            else:
                return visitor.visitChildren(self)




    def jsonObject(self):

        localctx = KqlParser.JsonObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_jsonObject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2765
            self.match(KqlParser.OPENBRACE)
            self.state = 2774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==309:
                self.state = 2766
                localctx._jsonPair = self.jsonPair()
                localctx.Pairs.append(localctx._jsonPair)
                self.state = 2771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 2767
                    self.match(KqlParser.COMMA)
                    self.state = 2768
                    localctx._jsonPair = self.jsonPair()
                    localctx.Pairs.append(localctx._jsonPair)
                    self.state = 2773
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2776
            self.match(KqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # Token
            self.Value = None # JsonValueContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def STRINGLITERAL(self):
            return self.getToken(KqlParser.STRINGLITERAL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(KqlParser.JsonValueContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonPair" ):
                return visitor.visitJsonPair(self)
            else:
                return visitor.visitChildren(self)




    def jsonPair(self):

        localctx = KqlParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_jsonPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2778
            localctx.Name = self.match(KqlParser.STRINGLITERAL)
            self.state = 2779
            self.match(KqlParser.COLON)
            self.state = 2780
            localctx.Value = self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._jsonValue = None # JsonValueContext
            self.Values = list() # of JsonValueContexts

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(KqlParser.JsonValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArray" ):
                listener.enterJsonArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArray" ):
                listener.exitJsonArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonArray" ):
                return visitor.visitJsonArray(self)
            else:
                return visitor.visitChildren(self)




    def jsonArray(self):

        localctx = KqlParser.JsonArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_jsonArray)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2782
            self.match(KqlParser.OPENBRACKET)
            self.state = 2791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1610614784) != 0) or _la==183 or ((((_la - 285)) & ~0x3f) == 0 and ((1 << (_la - 285)) & 1330642945) != 0):
                self.state = 2783
                localctx._jsonValue = self.jsonValue()
                localctx.Values.append(localctx._jsonValue)
                self.state = 2788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 2784
                    self.match(KqlParser.COMMA)
                    self.state = 2785
                    localctx._jsonValue = self.jsonValue()
                    localctx.Values.append(localctx._jsonValue)
                    self.state = 2790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2793
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonBooleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def BOOLEANLITERAL(self):
            return self.getToken(KqlParser.BOOLEANLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonBoolean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonBoolean" ):
                listener.enterJsonBoolean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonBoolean" ):
                listener.exitJsonBoolean(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonBoolean" ):
                return visitor.visitJsonBoolean(self)
            else:
                return visitor.visitChildren(self)




    def jsonBoolean(self):

        localctx = KqlParser.JsonBooleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_jsonBoolean)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2795
            localctx.Token = self.match(KqlParser.BOOLEANLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonDateTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def DATETIMELITERAL(self):
            return self.getToken(KqlParser.DATETIMELITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonDateTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonDateTime" ):
                listener.enterJsonDateTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonDateTime" ):
                listener.exitJsonDateTime(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonDateTime" ):
                return visitor.visitJsonDateTime(self)
            else:
                return visitor.visitChildren(self)




    def jsonDateTime(self):

        localctx = KqlParser.JsonDateTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_jsonDateTime)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2797
            localctx.Token = self.match(KqlParser.DATETIMELITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonGuidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def GUIDLITERAL(self):
            return self.getToken(KqlParser.GUIDLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonGuid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonGuid" ):
                listener.enterJsonGuid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonGuid" ):
                listener.exitJsonGuid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonGuid" ):
                return visitor.visitJsonGuid(self)
            else:
                return visitor.visitChildren(self)




    def jsonGuid(self):

        localctx = KqlParser.JsonGuidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_jsonGuid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2799
            localctx.Token = self.match(KqlParser.GUIDLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonNullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def NULL(self):
            return self.getToken(KqlParser.NULL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonNull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonNull" ):
                listener.enterJsonNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonNull" ):
                listener.exitJsonNull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonNull" ):
                return visitor.visitJsonNull(self)
            else:
                return visitor.visitChildren(self)




    def jsonNull(self):

        localctx = KqlParser.JsonNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_jsonNull)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801
            localctx.Token = self.match(KqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STRINGLITERAL = None # Token
            self.Tokens = list() # of Tokens

        def STRINGLITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.STRINGLITERAL)
            else:
                return self.getToken(KqlParser.STRINGLITERAL, i)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonString" ):
                listener.enterJsonString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonString" ):
                listener.exitJsonString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonString" ):
                return visitor.visitJsonString(self)
            else:
                return visitor.visitChildren(self)




    def jsonString(self):

        localctx = KqlParser.JsonStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_jsonString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2803
            localctx._STRINGLITERAL = self.match(KqlParser.STRINGLITERAL)
            localctx.Tokens.append(localctx._STRINGLITERAL)
            self.state = 2807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==309:
                self.state = 2804
                localctx._STRINGLITERAL = self.match(KqlParser.STRINGLITERAL)
                localctx.Tokens.append(localctx._STRINGLITERAL)
                self.state = 2809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonTimeSpanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def TIMESPANLITERAL(self):
            return self.getToken(KqlParser.TIMESPANLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonTimeSpan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonTimeSpan" ):
                listener.enterJsonTimeSpan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonTimeSpan" ):
                listener.exitJsonTimeSpan(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonTimeSpan" ):
                return visitor.visitJsonTimeSpan(self)
            else:
                return visitor.visitChildren(self)




    def jsonTimeSpan(self):

        localctx = KqlParser.JsonTimeSpanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_jsonTimeSpan)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2810
            localctx.Token = self.match(KqlParser.TIMESPANLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonLongContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SignToken = None # Token
            self.LiteralToken = None # Token

        def LONGLITERAL(self):
            return self.getToken(KqlParser.LONGLITERAL, 0)

        def DASH(self):
            return self.getToken(KqlParser.DASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonLong

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonLong" ):
                listener.enterJsonLong(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonLong" ):
                listener.exitJsonLong(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonLong" ):
                return visitor.visitJsonLong(self)
            else:
                return visitor.visitChildren(self)




    def jsonLong(self):

        localctx = KqlParser.JsonLongContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_jsonLong)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 2812
                localctx.SignToken = self.match(KqlParser.DASH)


            self.state = 2815
            localctx.LiteralToken = self.match(KqlParser.LONGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonRealContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SignToken = None # Token
            self.LiteralToken = None # Token

        def REALLITERAL(self):
            return self.getToken(KqlParser.REALLITERAL, 0)

        def DASH(self):
            return self.getToken(KqlParser.DASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonReal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonReal" ):
                listener.enterJsonReal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonReal" ):
                listener.exitJsonReal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJsonReal" ):
                return visitor.visitJsonReal(self)
            else:
                return visitor.visitChildren(self)




    def jsonReal(self):

        localctx = KqlParser.JsonRealContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_jsonReal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 2817
                localctx.SignToken = self.match(KqlParser.DASH)


            self.state = 2820
            localctx.LiteralToken = self.match(KqlParser.REALLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





