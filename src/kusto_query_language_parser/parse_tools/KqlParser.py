# Generated from ../grammar/Kql.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0140")
        buf.write("\u0b09\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\3\2\3")
        buf.write("\2\3\3\3\3\3\3\7\3\u026a\n\3\f\3\16\3\u026d\13\3\3\3\5")
        buf.write("\3\u0270\n\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u027b")
        buf.write("\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\5\6\u0288")
        buf.write("\n\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\5\b\u0294")
        buf.write("\n\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u029f\n\t")
        buf.write("\3\t\3\t\3\t\3\n\3\n\3\n\7\n\u02a7\n\n\f\n\16\n\u02aa")
        buf.write("\13\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\5\r\u02c4\n\r\3\16\3\16\3\16\3\16\5\16\u02ca\n\16\3")
        buf.write("\17\3\17\3\17\3\20\3\20\3\20\3\20\5\20\u02d3\n\20\3\21")
        buf.write("\3\21\3\21\3\21\3\22\3\22\3\22\3\22\7\22\u02dd\n\22\f")
        buf.write("\22\16\22\u02e0\13\22\3\22\3\22\3\23\3\23\3\23\3\23\3")
        buf.write("\24\3\24\3\24\3\24\7\24\u02ec\n\24\f\24\16\24\u02ef\13")
        buf.write("\24\3\24\5\24\u02f2\n\24\3\24\5\24\u02f5\n\24\3\24\3\24")
        buf.write("\3\25\3\25\5\25\u02fb\n\25\3\26\3\26\3\26\3\26\5\26\u0301")
        buf.write("\n\26\3\27\3\27\3\27\5\27\u0306\n\27\3\27\3\27\6\27\u030a")
        buf.write("\n\27\r\27\16\27\u030b\3\27\3\27\3\30\3\30\3\30\3\30\7")
        buf.write("\30\u0314\n\30\f\30\16\30\u0317\13\30\3\30\3\30\3\31\3")
        buf.write("\31\3\31\3\31\3\32\3\32\3\32\3\32\3\33\3\33\5\33\u0325")
        buf.write("\n\33\3\33\3\33\3\33\5\33\u032a\n\33\3\34\3\34\3\34\3")
        buf.write("\34\7\34\u0330\n\34\f\34\16\34\u0333\13\34\3\34\3\34\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3\37")
        buf.write("\7\37\u0342\n\37\f\37\16\37\u0345\13\37\3\37\3\37\3\37")
        buf.write("\3 \3 \3 \3 \3 \3 \3 \7 \u0351\n \f \16 \u0354\13 \3 ")
        buf.write("\3 \3!\3!\5!\u035a\n!\3\"\3\"\3\"\3\"\5\"\u0360\n\"\3")
        buf.write("#\3#\5#\u0364\n#\3$\3$\3$\3$\3$\3$\7$\u036c\n$\f$\16$")
        buf.write("\u036f\13$\3$\3$\3%\3%\3%\3%\5%\u0377\n%\3&\3&\3\'\3\'")
        buf.write("\3(\3(\7(\u037f\n(\f(\16(\u0382\13(\3)\3)\3)\3*\3*\7*")
        buf.write("\u0389\n*\f*\16*\u038c\13*\3+\3+\3+\3+\3+\3+\5+\u0394")
        buf.write("\n+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u03c7\n")
        buf.write(",\3-\3-\3-\3-\5-\u03cd\n-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u03e8")
        buf.write("\n.\3/\3/\7/\u03ec\n/\f/\16/\u03ef\13/\3/\3/\3\60\3\60")
        buf.write("\3\60\3\61\3\61\7\61\u03f8\n\61\f\61\16\61\u03fb\13\61")
        buf.write("\3\62\3\62\7\62\u03ff\n\62\f\62\16\62\u0402\13\62\3\63")
        buf.write("\3\63\3\63\3\64\3\64\7\64\u0409\n\64\f\64\16\64\u040c")
        buf.write("\13\64\3\64\3\64\5\64\u0410\n\64\3\65\3\65\3\66\3\66\3")
        buf.write("\66\7\66\u0417\n\66\f\66\16\66\u041a\13\66\3\67\3\67\7")
        buf.write("\67\u041e\n\67\f\67\16\67\u0421\13\67\3\67\3\67\5\67\u0425")
        buf.write("\n\67\38\38\38\39\39\39\39\79\u042e\n9\f9\169\u0431\13")
        buf.write("9\3:\3:\3;\3;\3;\3;\3;\7;\u043a\n;\f;\16;\u043d\13;\3")
        buf.write(";\3;\5;\u0441\n;\3<\3<\3<\3=\3=\3=\3=\3=\3>\3>\5>\u044d")
        buf.write("\n>\3>\5>\u0450\n>\3>\3>\3>\5>\u0455\n>\3>\5>\u0458\n")
        buf.write(">\3?\7?\u045b\n?\f?\16?\u045e\13?\3?\5?\u0461\n?\3?\3")
        buf.write("?\3@\3@\3@\3@\3@\7@\u046a\n@\f@\16@\u046d\13@\3@\3@\3")
        buf.write("A\3A\3A\3A\7A\u0475\nA\fA\16A\u0478\13A\3B\3B\5B\u047c")
        buf.write("\nB\3C\3C\5C\u0480\nC\3D\3D\3D\3E\3E\3E\3E\3E\3F\3F\3")
        buf.write("G\3G\3G\5G\u048f\nG\3H\3H\3I\3I\3I\7I\u0496\nI\fI\16I")
        buf.write("\u0499\13I\3J\3J\5J\u049d\nJ\3K\3K\3K\7K\u04a2\nK\fK\16")
        buf.write("K\u04a5\13K\3L\3L\6L\u04a9\nL\rL\16L\u04aa\3M\5M\u04ae")
        buf.write("\nM\3M\3M\3M\3M\3N\3N\3N\3O\3O\7O\u04b9\nO\fO\16O\u04bc")
        buf.write("\13O\3P\3P\3P\3Q\3Q\3R\3R\7R\u04c5\nR\fR\16R\u04c8\13")
        buf.write("R\3S\3S\7S\u04cc\nS\fS\16S\u04cf\13S\3S\3S\3S\3S\3S\5")
        buf.write("S\u04d6\nS\3S\5S\u04d9\nS\3T\3T\3T\5T\u04de\nT\3U\3U\3")
        buf.write("U\3U\3V\3V\3W\3W\3W\5W\u04e9\nW\3W\3W\3X\3X\3X\3X\3X\3")
        buf.write("Y\3Y\3Y\3Z\3Z\3Z\3Z\7Z\u04f9\nZ\fZ\16Z\u04fc\13Z\3[\3")
        buf.write("[\3[\5[\u0501\n[\3\\\3\\\3\\\3\\\3\\\3]\3]\5]\u050a\n")
        buf.write("]\3]\7]\u050d\n]\f]\16]\u0510\13]\3^\3^\3^\3_\3_\7_\u0517")
        buf.write("\n_\f_\16_\u051a\13_\3_\3_\3_\3_\3_\5_\u0521\n_\3_\5_")
        buf.write("\u0524\n_\3`\3`\3`\3a\3a\7a\u052b\na\fa\16a\u052e\13a")
        buf.write("\3a\3a\3a\5a\u0533\na\3b\3b\3b\3b\7b\u0539\nb\fb\16b\u053c")
        buf.write("\13b\5b\u053e\nb\3c\3c\3c\3d\3d\7d\u0545\nd\fd\16d\u0548")
        buf.write("\13d\3d\3d\3d\3e\3e\7e\u054f\ne\fe\16e\u0552\13e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\7e\u055b\ne\fe\16e\u055e\13e\3e\5e\u0561")
        buf.write("\ne\3e\3e\3f\3f\3f\5f\u0568\nf\3g\3g\3g\3g\3g\7g\u056f")
        buf.write("\ng\fg\16g\u0572\13g\3g\3g\3h\3h\7h\u0578\nh\fh\16h\u057b")
        buf.write("\13h\3h\3h\3h\3h\3h\5h\u0582\nh\3h\5h\u0585\nh\3i\3i\3")
        buf.write("i\3i\3j\3j\3j\3j\3j\3k\3k\3k\3k\3k\3k\3l\3l\7l\u0598\n")
        buf.write("l\fl\16l\u059b\13l\3l\3l\3l\7l\u05a0\nl\fl\16l\u05a3\13")
        buf.write("l\3l\3l\3l\5l\u05a8\nl\3l\5l\u05ab\nl\3m\3m\3m\3n\3n\5")
        buf.write("n\u05b2\nn\3o\3o\3o\3o\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3")
        buf.write("q\3q\5q\u05c4\nq\3q\3q\5q\u05c8\nq\3q\3q\3q\3r\3r\3r\3")
        buf.write("r\7r\u05d1\nr\fr\16r\u05d4\13r\3s\3s\7s\u05d8\ns\fs\16")
        buf.write("s\u05db\13s\3s\3s\3s\7s\u05e0\ns\fs\16s\u05e3\13s\3s\5")
        buf.write("s\u05e6\ns\3s\5s\u05e9\ns\3s\3s\3s\3s\3s\3t\3t\3t\3u\3")
        buf.write("u\3u\3v\3v\5v\u05f8\nv\3w\3w\3w\3x\3x\7x\u05ff\nx\fx\16")
        buf.write("x\u0602\13x\3x\3x\3x\7x\u0607\nx\fx\16x\u060a\13x\3x\5")
        buf.write("x\u060d\nx\3y\3y\5y\u0611\ny\3z\3z\5z\u0615\nz\3z\3z\3")
        buf.write("z\3z\3{\3{\3{\3{\5{\u061f\n{\3|\3|\3|\3|\3}\3}\3}\5}\u0628")
        buf.write("\n}\3~\5~\u062b\n~\3~\7~\u062e\n~\f~\16~\u0631\13~\3~")
        buf.write("\5~\u0634\n~\3\177\5\177\u0637\n\177\3\177\3\177\5\177")
        buf.write("\u063b\n\177\3\u0080\3\u0080\5\u0080\u063f\n\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\5\u0081\u0649\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\7\u0082\u0650\n\u0082\f\u0082\16\u0082\u0653")
        buf.write("\13\u0082\3\u0082\3\u0082\3\u0083\3\u0083\7\u0083\u0659")
        buf.write("\n\u0083\f\u0083\16\u0083\u065c\13\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\5\u0083\u0661\n\u0083\3\u0083\3\u0083\5\u0083")
        buf.write("\u0665\n\u0083\3\u0084\3\u0084\3\u0084\5\u0084\u066a\n")
        buf.write("\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0087\3\u0087\7\u0087\u0676\n\u0087")
        buf.write("\f\u0087\16\u0087\u0679\13\u0087\3\u0087\3\u0087\5\u0087")
        buf.write("\u067d\n\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089\7\u0089")
        buf.write("\u068a\n\u0089\f\u0089\16\u0089\u068d\13\u0089\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\7\u008a\u0693\n\u008a\f\u008a")
        buf.write("\16\u008a\u0696\13\u008a\5\u008a\u0698\n\u008a\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\7\u008b\u069e\n\u008b\f\u008b")
        buf.write("\16\u008b\u06a1\13\u008b\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\7\u008c\u06a7\n\u008c\f\u008c\16\u008c\u06aa\13\u008c")
        buf.write("\5\u008c\u06ac\n\u008c\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\7\u008d\u06b2\n\u008d\f\u008d\16\u008d\u06b5\13\u008d")
        buf.write("\5\u008d\u06b7\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\7\u008e\u06bd\n\u008e\f\u008e\16\u008e\u06c0\13\u008e")
        buf.write("\5\u008e\u06c2\n\u008e\3\u008f\3\u008f\5\u008f\u06c6\n")
        buf.write("\u008f\3\u0090\3\u0090\7\u0090\u06ca\n\u0090\f\u0090\16")
        buf.write("\u0090\u06cd\13\u0090\3\u0090\3\u0090\3\u0090\5\u0090")
        buf.write("\u06d2\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091")
        buf.write("\u06d8\n\u0091\f\u0091\16\u0091\u06db\13\u0091\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\5\u0092\u06e1\n\u0092\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\7\u0093\u06e8\n\u0093")
        buf.write("\f\u0093\16\u0093\u06eb\13\u0093\5\u0093\u06ed\n\u0093")
        buf.write("\3\u0093\3\u0093\3\u0094\6\u0094\u06f2\n\u0094\r\u0094")
        buf.write("\16\u0094\u06f3\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0729\n\u0095")
        buf.write("\3\u0096\3\u0096\3\u0096\7\u0096\u072e\n\u0096\f\u0096")
        buf.write("\16\u0096\u0731\13\u0096\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\5\u0097\u0740\n\u0097\3\u0098\3\u0098")
        buf.write("\7\u0098\u0744\n\u0098\f\u0098\16\u0098\u0747\13\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\7\u0099")
        buf.write("\u074f\n\u0099\f\u0099\16\u0099\u0752\13\u0099\3\u0099")
        buf.write("\3\u0099\3\u009a\3\u009a\7\u009a\u0758\n\u009a\f\u009a")
        buf.write("\16\u009a\u075b\13\u009a\3\u009a\5\u009a\u075e\n\u009a")
        buf.write("\3\u009a\5\u009a\u0761\n\u009a\3\u009a\5\u009a\u0764\n")
        buf.write("\u009a\3\u009a\3\u009a\3\u009a\6\u009a\u0769\n\u009a\r")
        buf.write("\u009a\16\u009a\u076a\3\u009a\3\u009a\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\3\u009c\7\u009c\u077a\n\u009c\f\u009c\16\u009c")
        buf.write("\u077d\13\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d")
        buf.write("\7\u009d\u0784\n\u009d\f\u009d\16\u009d\u0787\13\u009d")
        buf.write("\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\5\u009e\u078e")
        buf.write("\n\u009e\3\u009e\5\u009e\u0791\n\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\5\u009e\u0796\n\u009e\3\u009e\3\u009e\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\7\u00a0\u07a2\n\u00a0\f\u00a0\16\u00a0\u07a5\13\u00a0")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a2\3\u00a2\7\u00a2")
        buf.write("\u07ad\n\u00a2\f\u00a2\16\u00a2\u07b0\13\u00a2\3\u00a2")
        buf.write("\5\u00a2\u07b3\n\u00a2\3\u00a2\5\u00a2\u07b6\n\u00a2\3")
        buf.write("\u00a2\3\u00a2\3\u00a2\5\u00a2\u07bb\n\u00a2\3\u00a3\3")
        buf.write("\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\7\u00a4\u07c6\n\u00a4\f\u00a4\16\u00a4\u07c9")
        buf.write("\13\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\7\u00a5\u07cf")
        buf.write("\n\u00a5\f\u00a5\16\u00a5\u07d2\13\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\7\u00a5\u07d7\n\u00a5\f\u00a5\16\u00a5\u07da")
        buf.write("\13\u00a5\3\u00a6\3\u00a6\7\u00a6\u07de\n\u00a6\f\u00a6")
        buf.write("\16\u00a6\u07e1\13\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\7\u00a6\u07e7\n\u00a6\f\u00a6\16\u00a6\u07ea\13\u00a6")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a8\5\u00a8\u07f0\n\u00a8")
        buf.write("\3\u00a8\3\u00a8\5\u00a8\u07f4\n\u00a8\3\u00a9\3\u00a9")
        buf.write("\7\u00a9\u07f8\n\u00a9\f\u00a9\16\u00a9\u07fb\13\u00a9")
        buf.write("\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0800\n\u00a9\f\u00a9")
        buf.write("\16\u00a9\u0803\13\u00a9\5\u00a9\u0805\n\u00a9\3\u00a9")
        buf.write("\5\u00a9\u0808\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\3\u00aa\5\u00aa\u0810\n\u00aa\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ac\3\u00ac\7\u00ac\u0818\n\u00ac")
        buf.write("\f\u00ac\16\u00ac\u081b\13\u00ac\3\u00ac\3\u00ac\3\u00ad")
        buf.write("\3\u00ad\7\u00ad\u0821\n\u00ad\f\u00ad\16\u00ad\u0824")
        buf.write("\13\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u082f\n\u00ae\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0837")
        buf.write("\n\u00b0\f\u00b0\16\u00b0\u083a\13\u00b0\3\u00b1\3\u00b1")
        buf.write("\5\u00b1\u083e\n\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1")
        buf.write("\u0843\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\7\u00b3\u084f")
        buf.write("\n\u00b3\f\u00b3\16\u00b3\u0852\13\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\7\u00b3\u0857\n\u00b3\f\u00b3\16\u00b3\u085a")
        buf.write("\13\u00b3\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u085f\n\u00b4")
        buf.write("\3\u00b5\3\u00b5\7\u00b5\u0863\n\u00b5\f\u00b5\16\u00b5")
        buf.write("\u0866\13\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\5\u00b6")
        buf.write("\u086c\n\u00b6\3\u00b7\3\u00b7\7\u00b7\u0870\n\u00b7\f")
        buf.write("\u00b7\16\u00b7\u0873\13\u00b7\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u087c\n\u00b9")
        buf.write("\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u0882\n\u00ba")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0888\n\u00bb")
        buf.write("\3\u00bc\5\u00bc\u088b\n\u00bc\3\u00bc\3\u00bc\3\u00bd")
        buf.write("\3\u00bd\5\u00bd\u0891\n\u00bd\3\u00bd\3\u00bd\3\u00be")
        buf.write("\3\u00be\3\u00be\3\u00be\7\u00be\u0899\n\u00be\f\u00be")
        buf.write("\16\u00be\u089c\13\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c1\3\u00c1\7\u00c1")
        buf.write("\u08a8\n\u00c1\f\u00c1\16\u00c1\u08ab\13\u00c1\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\3\u00c3\3\u00c3\7\u00c3\u08b2\n\u00c3")
        buf.write("\f\u00c3\16\u00c3\u08b5\13\u00c3\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u08bf")
        buf.write("\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u08cb\n\u00c7")
        buf.write("\f\u00c7\16\u00c7\u08ce\13\u00c7\3\u00c7\3\u00c7\3\u00c8")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\5\u00ca\u08e1\n\u00ca\3\u00cb\3\u00cb\7\u00cb\u08e5\n")
        buf.write("\u00cb\f\u00cb\16\u00cb\u08e8\13\u00cb\3\u00cc\3\u00cc")
        buf.write("\3\u00cc\3\u00cd\3\u00cd\7\u00cd\u08ef\n\u00cd\f\u00cd")
        buf.write("\16\u00cd\u08f2\13\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00cf")
        buf.write("\3\u00cf\5\u00cf\u08f9\n\u00cf\3\u00d0\3\u00d0\7\u00d0")
        buf.write("\u08fd\n\u00d0\f\u00d0\16\u00d0\u0900\13\u00d0\3\u00d1")
        buf.write("\3\u00d1\5\u00d1\u0904\n\u00d1\3\u00d1\3\u00d1\3\u00d2")
        buf.write("\3\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d4\5\u00d4")
        buf.write("\u090f\n\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5")
        buf.write("\5\u00d5\u0916\n\u00d5\3\u00d6\3\u00d6\3\u00d6\5\u00d6")
        buf.write("\u091b\n\u00d6\3\u00d7\3\u00d7\6\u00d7\u091f\n\u00d7\r")
        buf.write("\u00d7\16\u00d7\u0920\3\u00d8\3\u00d8\3\u00d8\5\u00d8")
        buf.write("\u0926\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00da\3\u00da")
        buf.write("\3\u00da\3\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db")
        buf.write("\3\u00dc\3\u00dc\5\u00dc\u0936\n\u00dc\3\u00dc\3\u00dc")
        buf.write("\3\u00dc\3\u00dc\3\u00dd\3\u00dd\5\u00dd\u093e\n\u00dd")
        buf.write("\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00df\3\u00df\7\u00df\u094a\n\u00df\f\u00df")
        buf.write("\16\u00df\u094d\13\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e1")
        buf.write("\3\u00e1\5\u00e1\u0954\n\u00e1\3\u00e2\3\u00e2\3\u00e2")
        buf.write("\3\u00e2\3\u00e2\7\u00e2\u095b\n\u00e2\f\u00e2\16\u00e2")
        buf.write("\u095e\13\u00e2\5\u00e2\u0960\n\u00e2\3\u00e2\3\u00e2")
        buf.write("\3\u00e3\3\u00e3\5\u00e3\u0966\n\u00e3\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\5\u00e4\u096b\n\u00e4\3\u00e4\3\u00e4\3\u00e5")
        buf.write("\3\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6")
        buf.write("\3\u00e6\5\u00e6\u0978\n\u00e6\3\u00e7\3\u00e7\5\u00e7")
        buf.write("\u097c\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e9")
        buf.write("\3\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea")
        buf.write("\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb")
        buf.write("\5\u00eb\u0991\n\u00eb\3\u00ec\3\u00ec\6\u00ec\u0995\n")
        buf.write("\u00ec\r\u00ec\16\u00ec\u0996\3\u00ed\3\u00ed\3\u00ed")
        buf.write("\5\u00ed\u099c\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ef")
        buf.write("\3\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0")
        buf.write("\3\u00f0\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u09ad\n\u00f1")
        buf.write("\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f5")
        buf.write("\3\u00f5\3\u00f5\5\u00f5\u09b8\n\u00f5\3\u00f6\3\u00f6")
        buf.write("\3\u00f6\3\u00f6\3\u00f7\3\u00f7\5\u00f7\u09c0\n\u00f7")
        buf.write("\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f9\3\u00f9\7\u00f9")
        buf.write("\u09c8\n\u00f9\f\u00f9\16\u00f9\u09cb\13\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\5\u00f9\u09d0\n\u00f9\3\u00f9\3\u00f9")
        buf.write("\7\u00f9\u09d4\n\u00f9\f\u00f9\16\u00f9\u09d7\13\u00f9")
        buf.write("\3\u00f9\5\u00f9\u09da\n\u00f9\3\u00f9\3\u00f9\3\u00fa")
        buf.write("\3\u00fa\5\u00fa\u09e0\n\u00fa\3\u00fa\3\u00fa\7\u00fa")
        buf.write("\u09e4\n\u00fa\f\u00fa\16\u00fa\u09e7\13\u00fa\3\u00fa")
        buf.write("\5\u00fa\u09ea\n\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb")
        buf.write("\3\u00fb\3\u00fb\3\u00fc\3\u00fc\7\u00fc\u09f4\n\u00fc")
        buf.write("\f\u00fc\16\u00fc\u09f7\13\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\3\u00fc\7\u00fc\u09fe\n\u00fc\f\u00fc\16\u00fc")
        buf.write("\u0a01\13\u00fc\3\u00fc\3\u00fc\5\u00fc\u0a05\n\u00fc")
        buf.write("\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\7\u00fd\u0a0c")
        buf.write("\n\u00fd\f\u00fd\16\u00fd\u0a0f\13\u00fd\3\u00fd\5\u00fd")
        buf.write("\u0a12\n\u00fd\5\u00fd\u0a14\n\u00fd\3\u00fd\3\u00fd\3")
        buf.write("\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u0a1d\n")
        buf.write("\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff")
        buf.write("\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0102\3\u0102")
        buf.write("\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103\3\u0104\3\u0104")
        buf.write("\3\u0105\3\u0105\3\u0106\3\u0106\3\u0107\3\u0107\3\u0108")
        buf.write("\3\u0108\3\u0109\3\u0109\5\u0109\u0a44\n\u0109\3\u010a")
        buf.write("\3\u010a\3\u010b\3\u010b\3\u010c\3\u010c\3\u010d\3\u010d")
        buf.write("\3\u010d\3\u010d\3\u010e\3\u010e\5\u010e\u0a52\n\u010e")
        buf.write("\3\u010f\3\u010f\3\u010f\5\u010f\u0a57\n\u010f\3\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\5\u0110\u0a5d\n\u0110\3\u0111")
        buf.write("\3\u0111\3\u0111\5\u0111\u0a62\n\u0111\3\u0112\5\u0112")
        buf.write("\u0a65\n\u0112\3\u0112\3\u0112\7\u0112\u0a69\n\u0112\f")
        buf.write("\u0112\16\u0112\u0a6c\13\u0112\3\u0113\3\u0113\3\u0113")
        buf.write("\5\u0113\u0a71\n\u0113\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\5\u0114\u0a78\n\u0114\3\u0115\3\u0115\5\u0115")
        buf.write("\u0a7c\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116")
        buf.write("\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116")
        buf.write("\u0a89\n\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117")
        buf.write("\3\u0117\3\u0117\5\u0117\u0a92\n\u0117\3\u0118\3\u0118")
        buf.write("\3\u0118\3\u0118\3\u0118\5\u0118\u0a99\n\u0118\3\u0119")
        buf.write("\3\u0119\5\u0119\u0a9d\n\u0119\3\u011a\3\u011a\3\u011b")
        buf.write("\3\u011b\3\u011c\3\u011c\3\u011d\3\u011d\3\u011e\3\u011e")
        buf.write("\3\u011f\3\u011f\3\u0120\3\u0120\3\u0121\3\u0121\3\u0122")
        buf.write("\3\u0122\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124")
        buf.write("\3\u0125\3\u0125\7\u0125\u0ab9\n\u0125\f\u0125\16\u0125")
        buf.write("\u0abc\13\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126")
        buf.write("\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127")
        buf.write("\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u0ace\n\u0127")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\7\u0128\u0ad4\n\u0128")
        buf.write("\f\u0128\16\u0128\u0ad7\13\u0128\5\u0128\u0ad9\n\u0128")
        buf.write("\3\u0128\3\u0128\3\u0129\3\u0129\3\u0129\3\u0129\3\u012a")
        buf.write("\3\u012a\3\u012a\3\u012a\7\u012a\u0ae5\n\u012a\f\u012a")
        buf.write("\16\u012a\u0ae8\13\u012a\5\u012a\u0aea\n\u012a\3\u012a")
        buf.write("\3\u012a\3\u012b\3\u012b\3\u012c\3\u012c\3\u012d\3\u012d")
        buf.write("\3\u012e\3\u012e\3\u012f\3\u012f\7\u012f\u0af8\n\u012f")
        buf.write("\f\u012f\16\u012f\u0afb\13\u012f\3\u0130\3\u0130\3\u0131")
        buf.write("\5\u0131\u0b00\n\u0131\3\u0131\3\u0131\3\u0132\5\u0132")
        buf.write("\u0b05\n\u0132\3\u0132\3\u0132\3\u0132\2\2\u0133\2\4\6")
        buf.write("\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66")
        buf.write("8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write("\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102")
        buf.write("\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114")
        buf.write("\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126")
        buf.write("\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138")
        buf.write("\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a")
        buf.write("\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c")
        buf.write("\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e")
        buf.write("\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180")
        buf.write("\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192")
        buf.write("\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4")
        buf.write("\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6")
        buf.write("\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8")
        buf.write("\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da")
        buf.write("\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec")
        buf.write("\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe")
        buf.write("\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210")
        buf.write("\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222")
        buf.write("\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234")
        buf.write("\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246")
        buf.write("\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258")
        buf.write("\u025a\u025c\u025e\u0260\u0262\2\'\4\2\16\17\33\33\4\2")
        buf.write("\20\20\34\34\3\2\b\t\4\2PP\u00a3\u00a3\3\2\16\17\4\2\u009f")
        buf.write("\u009f\u00a1\u00a1\4\2\u00a0\u00a0\u00a2\u00a2\4\2\u00da")
        buf.write("\u00db\u00e7\u00e7\5\2\62\62NNcd\21\2\'\'..\60\60\66\66")
        buf.write("<<>>\u008c\u008c\u0094\u0095\u00cc\u00cd\u00e2\u00e2\u00ec")
        buf.write("\u00ec\u00f1\u00f1\u00f4\u00f6\u00fe\u00fe\u013e\u013e")
        buf.write("\6\2LL\u009b\u009b\u00ea\u00eb\u0101\u0101\4\2\u0093\u0093")
        buf.write("\u0097\u0097\4\2rr\u0104\u0104\5\2\64\64\u00a4\u00a4\u00c3")
        buf.write("\u00c3\5\2,,\u008d\u008d\u00a4\u00a4\4\2\u00bf\u00bf\u00e8")
        buf.write("\u00e8\4\2\62\62NN\4\2^^\u008d\u008d\4\2\u0092\u0092\u00f2")
        buf.write("\u00f2\4\2\\\\\u0105\u0105\17\2\65\65::EFKKWWs}\u0083")
        buf.write("\u0083\u0088\u0089\u008b\u008b\u00cb\u00cb\u00e9\u00e9")
        buf.write("\u0107\u010a\u010c\u010d\20\2\65\65::EFKKWWs}\u0083\u0083")
        buf.write("\u0088\u0089\u008b\u008b\u00cb\u00cb\u00e9\u00e9\u0107")
        buf.write("\u010a\u010c\u010d\u013e\u013e\5\2\24\24\26\26\36\36\5")
        buf.write("\2kl\u0084\u0085\u00b1\u00b2\4\288\u00a6\u00a6\4\2\30")
        buf.write("\32\35\35\4\2\r\r##\5\2\3\3\"\"%%\r\2\25\25\27\27@BQR")
        buf.write("jjmq\u0090\u0091\u009c\u009c\u00a7\u00b0\u00b3\u00b8\u00ed")
        buf.write("\u00ee\4\2,,\177\177\5\2\u008b\u008b\u0108\u0108\u010c")
        buf.write("\u010c\3\2YZ\6\2\u0133\u0133\u0135\u0135\u0138\u0139\u013b")
        buf.write("\u013d\6\2\u0119\u011f\u0121\u0123\u0126\u012b\u0132\u0132")
        buf.write("\3\2\u0119\u0132)\2((*,\64\64\67\6799==GGJJLMPPTU[[`a")
        buf.write("rr~~\u0080\u0082\u0086\u0086\u008e\u008f\u0093\u0093\u0095")
        buf.write("\u0097\u009b\u009b\u00a3\u00a4\u00b9\u00ba\u00bc\u00bd")
        buf.write("\u00c1\u00c2\u00c7\u00c8\u00ca\u00ca\u00ce\u00ce\u00d7")
        buf.write("\u00d9\u00dc\u00de\u00e5\u00e5\u00ea\u00eb\u00ef\u00ef")
        buf.write("\u00f3\u00f3\u00ff\u00ff\u0101\u0104\u0106\u0106\u010e")
        buf.write("\u0119\u0121\u0121\33\2))\61\61;;?@DDIIOOXY\\]jj\u0084")
        buf.write("\u0084\u0087\u0087\u0092\u0092\u009d\u009d\u00bb\u00bb")
        buf.write("\u00c4\u00c4\u00cf\u00cf\u00df\u00e1\u00e3\u00e4\u00e6")
        buf.write("\u00e6\u00e8\u00e8\u00f0\u00f0\u00f2\u00f2\u00f7\u00fd")
        buf.write("\u0105\u0105\2\u0b7a\2\u0264\3\2\2\2\4\u0266\3\2\2\2\6")
        buf.write("\u027a\3\2\2\2\b\u027c\3\2\2\2\n\u0287\3\2\2\2\f\u0289")
        buf.write("\3\2\2\2\16\u028e\3\2\2\2\20\u0298\3\2\2\2\22\u02a3\3")
        buf.write("\2\2\2\24\u02ab\3\2\2\2\26\u02b3\3\2\2\2\30\u02c3\3\2")
        buf.write("\2\2\32\u02c5\3\2\2\2\34\u02cb\3\2\2\2\36\u02ce\3\2\2")
        buf.write("\2 \u02d4\3\2\2\2\"\u02d8\3\2\2\2$\u02e3\3\2\2\2&\u02e7")
        buf.write("\3\2\2\2(\u02fa\3\2\2\2*\u02fc\3\2\2\2,\u0302\3\2\2\2")
        buf.write(".\u030f\3\2\2\2\60\u031a\3\2\2\2\62\u031e\3\2\2\2\64\u0322")
        buf.write("\3\2\2\2\66\u032b\3\2\2\28\u0336\3\2\2\2:\u033b\3\2\2")
        buf.write("\2<\u033d\3\2\2\2>\u0349\3\2\2\2@\u0359\3\2\2\2B\u035b")
        buf.write("\3\2\2\2D\u0363\3\2\2\2F\u0365\3\2\2\2H\u0372\3\2\2\2")
        buf.write("J\u0378\3\2\2\2L\u037a\3\2\2\2N\u037c\3\2\2\2P\u0383\3")
        buf.write("\2\2\2R\u0386\3\2\2\2T\u0393\3\2\2\2V\u03c6\3\2\2\2X\u03cc")
        buf.write("\3\2\2\2Z\u03e7\3\2\2\2\\\u03e9\3\2\2\2^\u03f2\3\2\2\2")
        buf.write("`\u03f5\3\2\2\2b\u03fc\3\2\2\2d\u0403\3\2\2\2f\u0406\3")
        buf.write("\2\2\2h\u0411\3\2\2\2j\u0413\3\2\2\2l\u041b\3\2\2\2n\u0426")
        buf.write("\3\2\2\2p\u0429\3\2\2\2r\u0432\3\2\2\2t\u0434\3\2\2\2")
        buf.write("v\u0442\3\2\2\2x\u0445\3\2\2\2z\u044a\3\2\2\2|\u045c\3")
        buf.write("\2\2\2~\u0464\3\2\2\2\u0080\u0470\3\2\2\2\u0082\u047b")
        buf.write("\3\2\2\2\u0084\u047d\3\2\2\2\u0086\u0481\3\2\2\2\u0088")
        buf.write("\u0484\3\2\2\2\u008a\u0489\3\2\2\2\u008c\u048b\3\2\2\2")
        buf.write("\u008e\u0490\3\2\2\2\u0090\u0492\3\2\2\2\u0092\u049c\3")
        buf.write("\2\2\2\u0094\u049e\3\2\2\2\u0096\u04a6\3\2\2\2\u0098\u04ad")
        buf.write("\3\2\2\2\u009a\u04b3\3\2\2\2\u009c\u04b6\3\2\2\2\u009e")
        buf.write("\u04bd\3\2\2\2\u00a0\u04c0\3\2\2\2\u00a2\u04c2\3\2\2\2")
        buf.write("\u00a4\u04c9\3\2\2\2\u00a6\u04dd\3\2\2\2\u00a8\u04df\3")
        buf.write("\2\2\2\u00aa\u04e3\3\2\2\2\u00ac\u04e5\3\2\2\2\u00ae\u04ec")
        buf.write("\3\2\2\2\u00b0\u04f1\3\2\2\2\u00b2\u04f4\3\2\2\2\u00b4")
        buf.write("\u04fd\3\2\2\2\u00b6\u0502\3\2\2\2\u00b8\u0507\3\2\2\2")
        buf.write("\u00ba\u0511\3\2\2\2\u00bc\u0514\3\2\2\2\u00be\u0525\3")
        buf.write("\2\2\2\u00c0\u0528\3\2\2\2\u00c2\u0534\3\2\2\2\u00c4\u053f")
        buf.write("\3\2\2\2\u00c6\u0542\3\2\2\2\u00c8\u054c\3\2\2\2\u00ca")
        buf.write("\u0567\3\2\2\2\u00cc\u0569\3\2\2\2\u00ce\u0575\3\2\2\2")
        buf.write("\u00d0\u0586\3\2\2\2\u00d2\u058a\3\2\2\2\u00d4\u058f\3")
        buf.write("\2\2\2\u00d6\u0595\3\2\2\2\u00d8\u05ac\3\2\2\2\u00da\u05af")
        buf.write("\3\2\2\2\u00dc\u05b3\3\2\2\2\u00de\u05b7\3\2\2\2\u00e0")
        buf.write("\u05c3\3\2\2\2\u00e2\u05cc\3\2\2\2\u00e4\u05d5\3\2\2\2")
        buf.write("\u00e6\u05ef\3\2\2\2\u00e8\u05f2\3\2\2\2\u00ea\u05f5\3")
        buf.write("\2\2\2\u00ec\u05f9\3\2\2\2\u00ee\u05fc\3\2\2\2\u00f0\u060e")
        buf.write("\3\2\2\2\u00f2\u0612\3\2\2\2\u00f4\u061a\3\2\2\2\u00f6")
        buf.write("\u0620\3\2\2\2\u00f8\u0624\3\2\2\2\u00fa\u062a\3\2\2\2")
        buf.write("\u00fc\u0636\3\2\2\2\u00fe\u063c\3\2\2\2\u0100\u0644\3")
        buf.write("\2\2\2\u0102\u064a\3\2\2\2\u0104\u0656\3\2\2\2\u0106\u0666")
        buf.write("\3\2\2\2\u0108\u066b\3\2\2\2\u010a\u066f\3\2\2\2\u010c")
        buf.write("\u0673\3\2\2\2\u010e\u0682\3\2\2\2\u0110\u0685\3\2\2\2")
        buf.write("\u0112\u068e\3\2\2\2\u0114\u0699\3\2\2\2\u0116\u06a2\3")
        buf.write("\2\2\2\u0118\u06ad\3\2\2\2\u011a\u06b8\3\2\2\2\u011c\u06c3")
        buf.write("\3\2\2\2\u011e\u06c7\3\2\2\2\u0120\u06d3\3\2\2\2\u0122")
        buf.write("\u06dc\3\2\2\2\u0124\u06e2\3\2\2\2\u0126\u06f1\3\2\2\2")
        buf.write("\u0128\u0728\3\2\2\2\u012a\u072a\3\2\2\2\u012c\u073f\3")
        buf.write("\2\2\2\u012e\u0741\3\2\2\2\u0130\u074c\3\2\2\2\u0132\u0755")
        buf.write("\3\2\2\2\u0134\u076e\3\2\2\2\u0136\u0774\3\2\2\2\u0138")
        buf.write("\u077e\3\2\2\2\u013a\u078a\3\2\2\2\u013c\u0799\3\2\2\2")
        buf.write("\u013e\u079d\3\2\2\2\u0140\u07a6\3\2\2\2\u0142\u07aa\3")
        buf.write("\2\2\2\u0144\u07bc\3\2\2\2\u0146\u07c0\3\2\2\2\u0148\u07cc")
        buf.write("\3\2\2\2\u014a\u07db\3\2\2\2\u014c\u07eb\3\2\2\2\u014e")
        buf.write("\u07ef\3\2\2\2\u0150\u07f5\3\2\2\2\u0152\u0809\3\2\2\2")
        buf.write("\u0154\u0811\3\2\2\2\u0156\u0815\3\2\2\2\u0158\u081e\3")
        buf.write("\2\2\2\u015a\u0829\3\2\2\2\u015c\u0830\3\2\2\2\u015e\u0833")
        buf.write("\3\2\2\2\u0160\u083b\3\2\2\2\u0162\u0847\3\2\2\2\u0164")
        buf.write("\u084c\3\2\2\2\u0166\u085e\3\2\2\2\u0168\u0860\3\2\2\2")
        buf.write("\u016a\u086b\3\2\2\2\u016c\u086d\3\2\2\2\u016e\u0874\3")
        buf.write("\2\2\2\u0170\u0877\3\2\2\2\u0172\u087d\3\2\2\2\u0174\u0883")
        buf.write("\3\2\2\2\u0176\u088a\3\2\2\2\u0178\u0890\3\2\2\2\u017a")
        buf.write("\u0894\3\2\2\2\u017c\u089f\3\2\2\2\u017e\u08a3\3\2\2\2")
        buf.write("\u0180\u08a5\3\2\2\2\u0182\u08ac\3\2\2\2\u0184\u08af\3")
        buf.write("\2\2\2\u0186\u08b6\3\2\2\2\u0188\u08be\3\2\2\2\u018a\u08c0")
        buf.write("\3\2\2\2\u018c\u08c4\3\2\2\2\u018e\u08d1\3\2\2\2\u0190")
        buf.write("\u08d9\3\2\2\2\u0192\u08dd\3\2\2\2\u0194\u08e2\3\2\2\2")
        buf.write("\u0196\u08e9\3\2\2\2\u0198\u08ec\3\2\2\2\u019a\u08f3\3")
        buf.write("\2\2\2\u019c\u08f8\3\2\2\2\u019e\u08fa\3\2\2\2\u01a0\u0903")
        buf.write("\3\2\2\2\u01a2\u0907\3\2\2\2\u01a4\u0909\3\2\2\2\u01a6")
        buf.write("\u090e\3\2\2\2\u01a8\u0915\3\2\2\2\u01aa\u091a\3\2\2\2")
        buf.write("\u01ac\u091c\3\2\2\2\u01ae\u0925\3\2\2\2\u01b0\u0927\3")
        buf.write("\2\2\2\u01b2\u092a\3\2\2\2\u01b4\u092e\3\2\2\2\u01b6\u0933")
        buf.write("\3\2\2\2\u01b8\u093b\3\2\2\2\u01ba\u0943\3\2\2\2\u01bc")
        buf.write("\u0947\3\2\2\2\u01be\u094e\3\2\2\2\u01c0\u0953\3\2\2\2")
        buf.write("\u01c2\u0955\3\2\2\2\u01c4\u0965\3\2\2\2\u01c6\u0967\3")
        buf.write("\2\2\2\u01c8\u096e\3\2\2\2\u01ca\u0977\3\2\2\2\u01cc\u0979")
        buf.write("\3\2\2\2\u01ce\u097d\3\2\2\2\u01d0\u0981\3\2\2\2\u01d2")
        buf.write("\u0985\3\2\2\2\u01d4\u0990\3\2\2\2\u01d6\u0992\3\2\2\2")
        buf.write("\u01d8\u099b\3\2\2\2\u01da\u099d\3\2\2\2\u01dc\u09a0\3")
        buf.write("\2\2\2\u01de\u09a4\3\2\2\2\u01e0\u09ac\3\2\2\2\u01e2\u09ae")
        buf.write("\3\2\2\2\u01e4\u09b0\3\2\2\2\u01e6\u09b2\3\2\2\2\u01e8")
        buf.write("\u09b7\3\2\2\2\u01ea\u09b9\3\2\2\2\u01ec\u09bf\3\2\2\2")
        buf.write("\u01ee\u09c1\3\2\2\2\u01f0\u09c5\3\2\2\2\u01f2\u09dd\3")
        buf.write("\2\2\2\u01f4\u09ed\3\2\2\2\u01f6\u09f1\3\2\2\2\u01f8\u0a06")
        buf.write("\3\2\2\2\u01fa\u0a17\3\2\2\2\u01fc\u0a1e\3\2\2\2\u01fe")
        buf.write("\u0a26\3\2\2\2\u0200\u0a2b\3\2\2\2\u0202\u0a30\3\2\2\2")
        buf.write("\u0204\u0a35\3\2\2\2\u0206\u0a37\3\2\2\2\u0208\u0a39\3")
        buf.write("\2\2\2\u020a\u0a3b\3\2\2\2\u020c\u0a3d\3\2\2\2\u020e\u0a3f")
        buf.write("\3\2\2\2\u0210\u0a43\3\2\2\2\u0212\u0a45\3\2\2\2\u0214")
        buf.write("\u0a47\3\2\2\2\u0216\u0a49\3\2\2\2\u0218\u0a4b\3\2\2\2")
        buf.write("\u021a\u0a51\3\2\2\2\u021c\u0a56\3\2\2\2\u021e\u0a5c\3")
        buf.write("\2\2\2\u0220\u0a61\3\2\2\2\u0222\u0a64\3\2\2\2\u0224\u0a70")
        buf.write("\3\2\2\2\u0226\u0a77\3\2\2\2\u0228\u0a7b\3\2\2\2\u022a")
        buf.write("\u0a88\3\2\2\2\u022c\u0a91\3\2\2\2\u022e\u0a98\3\2\2\2")
        buf.write("\u0230\u0a9c\3\2\2\2\u0232\u0a9e\3\2\2\2\u0234\u0aa0\3")
        buf.write("\2\2\2\u0236\u0aa2\3\2\2\2\u0238\u0aa4\3\2\2\2\u023a\u0aa6")
        buf.write("\3\2\2\2\u023c\u0aa8\3\2\2\2\u023e\u0aaa\3\2\2\2\u0240")
        buf.write("\u0aac\3\2\2\2\u0242\u0aae\3\2\2\2\u0244\u0ab0\3\2\2\2")
        buf.write("\u0246\u0ab3\3\2\2\2\u0248\u0ab6\3\2\2\2\u024a\u0abd\3")
        buf.write("\2\2\2\u024c\u0acd\3\2\2\2\u024e\u0acf\3\2\2\2\u0250\u0adc")
        buf.write("\3\2\2\2\u0252\u0ae0\3\2\2\2\u0254\u0aed\3\2\2\2\u0256")
        buf.write("\u0aef\3\2\2\2\u0258\u0af1\3\2\2\2\u025a\u0af3\3\2\2\2")
        buf.write("\u025c\u0af5\3\2\2\2\u025e\u0afc\3\2\2\2\u0260\u0aff\3")
        buf.write("\2\2\2\u0262\u0b04\3\2\2\2\u0264\u0265\5\4\3\2\u0265\3")
        buf.write("\3\2\2\2\u0266\u026b\5\6\4\2\u0267\u0268\7$\2\2\u0268")
        buf.write("\u026a\5\6\4\2\u0269\u0267\3\2\2\2\u026a\u026d\3\2\2\2")
        buf.write("\u026b\u0269\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026f\3")
        buf.write("\2\2\2\u026d\u026b\3\2\2\2\u026e\u0270\7$\2\2\u026f\u026e")
        buf.write("\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0271\3\2\2\2\u0271")
        buf.write("\u0272\7\2\2\3\u0272\5\3\2\2\2\u0273\u027b\5\b\5\2\u0274")
        buf.write("\u027b\5*\26\2\u0275\u027b\5F$\2\u0276\u027b\5\n\6\2\u0277")
        buf.write("\u027b\5J&\2\u0278\u027b\5> \2\u0279\u027b\5B\"\2\u027a")
        buf.write("\u0273\3\2\2\2\u027a\u0274\3\2\2\2\u027a\u0275\3\2\2\2")
        buf.write("\u027a\u0276\3\2\2\2\u027a\u0277\3\2\2\2\u027a\u0278\3")
        buf.write("\2\2\2\u027a\u0279\3\2\2\2\u027b\7\3\2\2\2\u027c\u027d")
        buf.write("\7+\2\2\u027d\u027e\7G\2\2\u027e\u027f\5\u021c\u010f\2")
        buf.write("\u027f\u0280\7\23\2\2\u0280\u0281\5\u017e\u00c0\2\u0281")
        buf.write("\t\3\2\2\2\u0282\u0288\5\16\b\2\u0283\u0288\5\20\t\2\u0284")
        buf.write("\u0288\5\f\7\2\u0285\u0288\5\24\13\2\u0286\u0288\5\26")
        buf.write("\f\2\u0287\u0282\3\2\2\2\u0287\u0283\3\2\2\2\u0287\u0284")
        buf.write("\3\2\2\2\u0287\u0285\3\2\2\2\u0287\u0286\3\2\2\2\u0288")
        buf.write("\13\3\2\2\2\u0289\u028a\7\u008f\2\2\u028a\u028b\5\u021c")
        buf.write("\u010f\2\u028b\u028c\7\23\2\2\u028c\u028d\5L\'\2\u028d")
        buf.write("\r\3\2\2\2\u028e\u028f\7\u008f\2\2\u028f\u0290\5\u021c")
        buf.write("\u010f\2\u0290\u0291\7\23\2\2\u0291\u0293\7!\2\2\u0292")
        buf.write("\u0294\5\30\r\2\u0293\u0292\3\2\2\2\u0293\u0294\3\2\2")
        buf.write("\2\u0294\u0295\3\2\2\2\u0295\u0296\7\n\2\2\u0296\u0297")
        buf.write("\5&\24\2\u0297\17\3\2\2\2\u0298\u0299\7\u008f\2\2\u0299")
        buf.write("\u029a\5\u021c\u010f\2\u029a\u029b\7\23\2\2\u029b\u029c")
        buf.write("\7\u0103\2\2\u029c\u029e\7!\2\2\u029d\u029f\5\22\n\2\u029e")
        buf.write("\u029d\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\3\2\2\2")
        buf.write("\u02a0\u02a1\7\n\2\2\u02a1\u02a2\5&\24\2\u02a2\21\3\2")
        buf.write("\2\2\u02a3\u02a8\5\32\16\2\u02a4\u02a5\7\13\2\2\u02a5")
        buf.write("\u02a7\5\32\16\2\u02a6\u02a4\3\2\2\2\u02a7\u02aa\3\2\2")
        buf.write("\2\u02a8\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\23\3")
        buf.write("\2\2\2\u02aa\u02a8\3\2\2\2\u02ab\u02ac\7\u008f\2\2\u02ac")
        buf.write("\u02ad\5\u021c\u010f\2\u02ad\u02ae\7\23\2\2\u02ae\u02af")
        buf.write("\7\u009d\2\2\u02af\u02b0\7!\2\2\u02b0\u02b1\5N(\2\u02b1")
        buf.write("\u02b2\7\n\2\2\u02b2\25\3\2\2\2\u02b3\u02b4\7\u008f\2")
        buf.write("\2\u02b4\u02b5\5\u021c\u010f\2\u02b5\u02b6\7\23\2\2\u02b6")
        buf.write("\u02b7\5\u00ccg\2\u02b7\27\3\2\2\2\u02b8\u02b9\5\36\20")
        buf.write("\2\u02b9\u02ba\7\13\2\2\u02ba\u02bb\5\36\20\2\u02bb\u02bc")
        buf.write("\3\2\2\2\u02bc\u02bd\7\13\2\2\u02bd\u02be\5\32\16\2\u02be")
        buf.write("\u02c4\3\2\2\2\u02bf\u02c0\5\32\16\2\u02c0\u02c1\7\13")
        buf.write("\2\2\u02c1\u02c2\5\32\16\2\u02c2\u02c4\3\2\2\2\u02c3\u02b8")
        buf.write("\3\2\2\2\u02c3\u02bf\3\2\2\2\u02c4\31\3\2\2\2\u02c5\u02c6")
        buf.write("\5\u0208\u0105\2\u02c6\u02c7\7\f\2\2\u02c7\u02c9\5\u0204")
        buf.write("\u0103\2\u02c8\u02ca\5\34\17\2\u02c9\u02c8\3\2\2\2\u02c9")
        buf.write("\u02ca\3\2\2\2\u02ca\33\3\2\2\2\u02cb\u02cc\7\23\2\2\u02cc")
        buf.write("\u02cd\5\u0228\u0115\2\u02cd\35\3\2\2\2\u02ce\u02cf\5")
        buf.write("\u0208\u0105\2\u02cf\u02d2\7\f\2\2\u02d0\u02d3\5 \21\2")
        buf.write("\u02d1\u02d3\5\"\22\2\u02d2\u02d0\3\2\2\2\u02d2\u02d1")
        buf.write("\3\2\2\2\u02d3\37\3\2\2\2\u02d4\u02d5\7!\2\2\u02d5\u02d6")
        buf.write("\7\3\2\2\u02d6\u02d7\7\n\2\2\u02d7!\3\2\2\2\u02d8\u02d9")
        buf.write("\7!\2\2\u02d9\u02de\5$\23\2\u02da\u02db\7\13\2\2\u02db")
        buf.write("\u02dd\5$\23\2\u02dc\u02da\3\2\2\2\u02dd\u02e0\3\2\2\2")
        buf.write("\u02de\u02dc\3\2\2\2\u02de\u02df\3\2\2\2\u02df\u02e1\3")
        buf.write("\2\2\2\u02e0\u02de\3\2\2\2\u02e1\u02e2\7\n\2\2\u02e2#")
        buf.write("\3\2\2\2\u02e3\u02e4\5\u0208\u0105\2\u02e4\u02e5\7\f\2")
        buf.write("\2\u02e5\u02e6\5\u0204\u0103\2\u02e6%\3\2\2\2\u02e7\u02ed")
        buf.write("\7\37\2\2\u02e8\u02e9\5(\25\2\u02e9\u02ea\7$\2\2\u02ea")
        buf.write("\u02ec\3\2\2\2\u02eb\u02e8\3\2\2\2\u02ec\u02ef\3\2\2\2")
        buf.write("\u02ed\u02eb\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02f1\3")
        buf.write("\2\2\2\u02ef\u02ed\3\2\2\2\u02f0\u02f2\5L\'\2\u02f1\u02f0")
        buf.write("\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f4\3\2\2\2\u02f3")
        buf.write("\u02f5\7$\2\2\u02f4\u02f3\3\2\2\2\u02f4\u02f5\3\2\2\2")
        buf.write("\u02f5\u02f6\3\2\2\2\u02f6\u02f7\7\6\2\2\u02f7\'\3\2\2")
        buf.write("\2\u02f8\u02fb\5\n\6\2\u02f9\u02fb\5F$\2\u02fa\u02f8\3")
        buf.write("\2\2\2\u02fa\u02f9\3\2\2\2\u02fb)\3\2\2\2\u02fc\u02fd")
        buf.write("\7J\2\2\u02fd\u02fe\7\u00ca\2\2\u02fe\u0300\5\u020a\u0106")
        buf.write("\2\u02ff\u0301\5,\27\2\u0300\u02ff\3\2\2\2\u0300\u0301")
        buf.write("\3\2\2\2\u0301+\3\2\2\2\u0302\u0303\7\23\2\2\u0303\u0305")
        buf.write("\5.\30\2\u0304\u0306\5\62\32\2\u0305\u0304\3\2\2\2\u0305")
        buf.write("\u0306\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u0309\7\37\2")
        buf.write("\2\u0308\u030a\5\64\33\2\u0309\u0308\3\2\2\2\u030a\u030b")
        buf.write("\3\2\2\2\u030b\u0309\3\2\2\2\u030b\u030c\3\2\2\2\u030c")
        buf.write("\u030d\3\2\2\2\u030d\u030e\7\6\2\2\u030e-\3\2\2\2\u030f")
        buf.write("\u0310\7!\2\2\u0310\u0315\5\60\31\2\u0311\u0312\7\13\2")
        buf.write("\2\u0312\u0314\5\60\31\2\u0313\u0311\3\2\2\2\u0314\u0317")
        buf.write("\3\2\2\2\u0315\u0313\3\2\2\2\u0315\u0316\3\2\2\2\u0316")
        buf.write("\u0318\3\2\2\2\u0317\u0315\3\2\2\2\u0318\u0319\7\n\2\2")
        buf.write("\u0319/\3\2\2\2\u031a\u031b\5\u0208\u0105\2\u031b\u031c")
        buf.write("\7\f\2\2\u031c\u031d\5\u0204\u0103\2\u031d\61\3\2\2\2")
        buf.write("\u031e\u031f\7 \2\2\u031f\u0320\5\60\31\2\u0320\u0321")
        buf.write("\7\7\2\2\u0321\63\3\2\2\2\u0322\u0324\5\66\34\2\u0323")
        buf.write("\u0325\58\35\2\u0324\u0323\3\2\2\2\u0324\u0325\3\2\2\2")
        buf.write("\u0325\u0326\3\2\2\2\u0326\u0327\7\23\2\2\u0327\u0329")
        buf.write("\5<\37\2\u0328\u032a\7$\2\2\u0329\u0328\3\2\2\2\u0329")
        buf.write("\u032a\3\2\2\2\u032a\65\3\2\2\2\u032b\u032c\7!\2\2\u032c")
        buf.write("\u0331\5:\36\2\u032d\u032e\7\13\2\2\u032e\u0330\5:\36")
        buf.write("\2\u032f\u032d\3\2\2\2\u0330\u0333\3\2\2\2\u0331\u032f")
        buf.write("\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0334\3\2\2\2\u0333")
        buf.write("\u0331\3\2\2\2\u0334\u0335\7\n\2\2\u0335\67\3\2\2\2\u0336")
        buf.write("\u0337\7\21\2\2\u0337\u0338\7 \2\2\u0338\u0339\5:\36\2")
        buf.write("\u0339\u033a\7\7\2\2\u033a9\3\2\2\2\u033b\u033c\5\u0248")
        buf.write("\u0125\2\u033c;\3\2\2\2\u033d\u0343\7\37\2\2\u033e\u033f")
        buf.write("\5(\25\2\u033f\u0340\7$\2\2\u0340\u0342\3\2\2\2\u0341")
        buf.write("\u033e\3\2\2\2\u0342\u0345\3\2\2\2\u0343\u0341\3\2\2\2")
        buf.write("\u0343\u0344\3\2\2\2\u0344\u0346\3\2\2\2\u0345\u0343\3")
        buf.write("\2\2\2\u0346\u0347\5L\'\2\u0347\u0348\7\6\2\2\u0348=\3")
        buf.write("\2\2\2\u0349\u034a\7\u00de\2\2\u034a\u034b\7(\2\2\u034b")
        buf.write("\u034c\7\u00f8\2\2\u034c\u034d\7!\2\2\u034d\u0352\5@!")
        buf.write("\2\u034e\u034f\7\13\2\2\u034f\u0351\5@!\2\u0350\u034e")
        buf.write("\3\2\2\2\u0351\u0354\3\2\2\2\u0352\u0350\3\2\2\2\u0352")
        buf.write("\u0353\3\2\2\2\u0353\u0355\3\2\2\2\u0354\u0352\3\2\2\2")
        buf.write("\u0355\u0356\7\n\2\2\u0356?\3\2\2\2\u0357\u035a\5\u020a")
        buf.write("\u0106\2\u0358\u035a\5\u01e8\u00f5\2\u0359\u0357\3\2\2")
        buf.write("\2\u0359\u0358\3\2\2\2\u035aA\3\2\2\2\u035b\u035c\7\u00e6")
        buf.write("\2\2\u035c\u035f\5\u021a\u010e\2\u035d\u035e\7\23\2\2")
        buf.write("\u035e\u0360\5D#\2\u035f\u035d\3\2\2\2\u035f\u0360\3\2")
        buf.write("\2\2\u0360C\3\2\2\2\u0361\u0364\5\u021a\u010e\2\u0362")
        buf.write("\u0364\5\u0228\u0115\2\u0363\u0361\3\2\2\2\u0363\u0362")
        buf.write("\3\2\2\2\u0364E\3\2\2\2\u0365\u0366\7J\2\2\u0366\u0367")
        buf.write("\7\u00d7\2\2\u0367\u0368\7!\2\2\u0368\u036d\5H%\2\u0369")
        buf.write("\u036a\7\13\2\2\u036a\u036c\5H%\2\u036b\u0369\3\2\2\2")
        buf.write("\u036c\u036f\3\2\2\2\u036d\u036b\3\2\2\2\u036d\u036e\3")
        buf.write("\2\2\2\u036e\u0370\3\2\2\2\u036f\u036d\3\2\2\2\u0370\u0371")
        buf.write("\7\n\2\2\u0371G\3\2\2\2\u0372\u0373\5\u0208\u0105\2\u0373")
        buf.write("\u0374\7\f\2\2\u0374\u0376\5\u0204\u0103\2\u0375\u0377")
        buf.write("\5\34\17\2\u0376\u0375\3\2\2\2\u0376\u0377\3\2\2\2\u0377")
        buf.write("I\3\2\2\2\u0378\u0379\5L\'\2\u0379K\3\2\2\2\u037a\u037b")
        buf.write("\5N(\2\u037bM\3\2\2\2\u037c\u0380\5T+\2\u037d\u037f\5")
        buf.write("P)\2\u037e\u037d\3\2\2\2\u037f\u0382\3\2\2\2\u0380\u037e")
        buf.write("\3\2\2\2\u0380\u0381\3\2\2\2\u0381O\3\2\2\2\u0382\u0380")
        buf.write("\3\2\2\2\u0383\u0384\7\5\2\2\u0384\u0385\5V,\2\u0385Q")
        buf.write("\3\2\2\2\u0386\u038a\5V,\2\u0387\u0389\5P)\2\u0388\u0387")
        buf.write("\3\2\2\2\u0389\u038c\3\2\2\2\u038a\u0388\3\2\2\2\u038a")
        buf.write("\u038b\3\2\2\2\u038bS\3\2\2\2\u038c\u038a\3\2\2\2\u038d")
        buf.write("\u0394\5X-\2\u038e\u0394\5\u0110\u0089\2\u038f\u0394\5")
        buf.write("\u00c8e\2\u0390\u0394\5\u01d2\u00ea\2\u0391\u0394\5\u017c")
        buf.write("\u00bf\2\u0392\u0394\5\u017e\u00c0\2\u0393\u038d\3\2\2")
        buf.write("\2\u0393\u038e\3\2\2\2\u0393\u038f\3\2\2\2\u0393\u0390")
        buf.write("\3\2\2\2\u0393\u0391\3\2\2\2\u0393\u0392\3\2\2\2\u0394")
        buf.write("U\3\2\2\2\u0395\u03c7\5\\/\2\u0396\u03c7\5^\60\2\u0397")
        buf.write("\u03c7\5`\61\2\u0398\u03c7\5b\62\2\u0399\u03c7\5f\64\2")
        buf.write("\u039a\u03c7\5r:\2\u039b\u03c7\5p9\2\u039c\u03c7\5t;\2")
        buf.write("\u039d\u03c7\5z>\2\u039e\u03c7\5\u0096L\2\u039f\u03c7")
        buf.write("\5\u00a0Q\2\u03a0\u03c7\5\u00a2R\2\u03a1\u03c7\5\u00a4")
        buf.write("S\2\u03a2\u03c7\5\u00b4[\2\u03a3\u03c7\5\u00bc_\2\u03a4")
        buf.write("\u03c7\5\u00b6\\\2\u03a5\u03c7\5\u00be`\2\u03a6\u03c7")
        buf.write("\5\u00c0a\2\u03a7\u03c7\5\u00c6d\2\u03a8\u03c7\5\u00ce")
        buf.write("h\2\u03a9\u03c7\5\u00d6l\2\u03aa\u03c7\5\u00eex\2\u03ab")
        buf.write("\u03c7\5\u00e4s\2\u03ac\u03c7\5l\67\2\u03ad\u03c7\5\u00f2")
        buf.write("z\2\u03ae\u03c7\5\u0100\u0081\2\u03af\u03c7\5\u00fe\u0080")
        buf.write("\2\u03b0\u03c7\5\u0104\u0083\2\u03b1\u03c7\5\u010c\u0087")
        buf.write("\2\u03b2\u03c7\5\u0116\u008c\2\u03b3\u03c7\5\u0112\u008a")
        buf.write("\2\u03b4\u03c7\5\u0118\u008d\2\u03b5\u03c7\5\u011a\u008e")
        buf.write("\2\u03b6\u03c7\5\u0114\u008b\2\u03b7\u03c7\5\u011e\u0090")
        buf.write("\2\u03b8\u03c7\5\u0122\u0092\2\u03b9\u03c7\5\u0130\u0099")
        buf.write("\2\u03ba\u03c7\5\u012e\u0098\2\u03bb\u03c7\5\u0132\u009a")
        buf.write("\2\u03bc\u03c7\5\u0142\u00a2\2\u03bd\u03c7\5\u0148\u00a5")
        buf.write("\2\u03be\u03c7\5\u014a\u00a6\2\u03bf\u03c7\5\u0150\u00a9")
        buf.write("\2\u03c0\u03c7\5\u0156\u00ac\2\u03c1\u03c7\5\u015a\u00ae")
        buf.write("\2\u03c2\u03c7\5\u0158\u00ad\2\u03c3\u03c7\5\u015e\u00b0")
        buf.write("\2\u03c4\u03c7\5\u0164\u00b3\2\u03c5\u03c7\5\u0168\u00b5")
        buf.write("\2\u03c6\u0395\3\2\2\2\u03c6\u0396\3\2\2\2\u03c6\u0397")
        buf.write("\3\2\2\2\u03c6\u0398\3\2\2\2\u03c6\u0399\3\2\2\2\u03c6")
        buf.write("\u039a\3\2\2\2\u03c6\u039b\3\2\2\2\u03c6\u039c\3\2\2\2")
        buf.write("\u03c6\u039d\3\2\2\2\u03c6\u039e\3\2\2\2\u03c6\u039f\3")
        buf.write("\2\2\2\u03c6\u03a0\3\2\2\2\u03c6\u03a1\3\2\2\2\u03c6\u03a2")
        buf.write("\3\2\2\2\u03c6\u03a3\3\2\2\2\u03c6\u03a4\3\2\2\2\u03c6")
        buf.write("\u03a5\3\2\2\2\u03c6\u03a6\3\2\2\2\u03c6\u03a7\3\2\2\2")
        buf.write("\u03c6\u03a8\3\2\2\2\u03c6\u03a9\3\2\2\2\u03c6\u03aa\3")
        buf.write("\2\2\2\u03c6\u03ab\3\2\2\2\u03c6\u03ac\3\2\2\2\u03c6\u03ad")
        buf.write("\3\2\2\2\u03c6\u03ae\3\2\2\2\u03c6\u03af\3\2\2\2\u03c6")
        buf.write("\u03b0\3\2\2\2\u03c6\u03b1\3\2\2\2\u03c6\u03b2\3\2\2\2")
        buf.write("\u03c6\u03b3\3\2\2\2\u03c6\u03b4\3\2\2\2\u03c6\u03b5\3")
        buf.write("\2\2\2\u03c6\u03b6\3\2\2\2\u03c6\u03b7\3\2\2\2\u03c6\u03b8")
        buf.write("\3\2\2\2\u03c6\u03b9\3\2\2\2\u03c6\u03ba\3\2\2\2\u03c6")
        buf.write("\u03bb\3\2\2\2\u03c6\u03bc\3\2\2\2\u03c6\u03bd\3\2\2\2")
        buf.write("\u03c6\u03be\3\2\2\2\u03c6\u03bf\3\2\2\2\u03c6\u03c0\3")
        buf.write("\2\2\2\u03c6\u03c1\3\2\2\2\u03c6\u03c2\3\2\2\2\u03c6\u03c3")
        buf.write("\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c6\u03c5\3\2\2\2\u03c7")
        buf.write("W\3\2\2\2\u03c8\u03cd\5z>\2\u03c9\u03cd\5\u0142\u00a2")
        buf.write("\2\u03ca\u03cd\5\u0164\u00b3\2\u03cb\u03cd\5l\67\2\u03cc")
        buf.write("\u03c8\3\2\2\2\u03cc\u03c9\3\2\2\2\u03cc\u03ca\3\2\2\2")
        buf.write("\u03cc\u03cb\3\2\2\2\u03cdY\3\2\2\2\u03ce\u03e8\5b\62")
        buf.write("\2\u03cf\u03e8\5p9\2\u03d0\u03e8\5\u0168\u00b5\2\u03d1")
        buf.write("\u03e8\5\u00f2z\2\u03d2\u03e8\5\u00fe\u0080\2\u03d3\u03e8")
        buf.write("\5\u0156\u00ac\2\u03d4\u03e8\5\u015e\u00b0\2\u03d5\u03e8")
        buf.write("\5\u0116\u008c\2\u03d6\u03e8\5\u0112\u008a\2\u03d7\u03e8")
        buf.write("\5\u0118\u008d\2\u03d8\u03e8\5\u011a\u008e\2\u03d9\u03e8")
        buf.write("\5\u0114\u008b\2\u03da\u03e8\5\u0150\u00a9\2\u03db\u03e8")
        buf.write("\5f\64\2\u03dc\u03e8\5\u015a\u00ae\2\u03dd\u03e8\5\u0158")
        buf.write("\u00ad\2\u03de\u03e8\5\u014a\u00a6\2\u03df\u03e8\5\u00ee")
        buf.write("x\2\u03e0\u03e8\5\u011e\u0090\2\u03e1\u03e8\5\u0130\u0099")
        buf.write("\2\u03e2\u03e8\5\u012e\u0098\2\u03e3\u03e8\5\\/\2\u03e4")
        buf.write("\u03e8\5\u00be`\2\u03e5\u03e8\5r:\2\u03e6\u03e8\5\u0132")
        buf.write("\u009a\2\u03e7\u03ce\3\2\2\2\u03e7\u03cf\3\2\2\2\u03e7")
        buf.write("\u03d0\3\2\2\2\u03e7\u03d1\3\2\2\2\u03e7\u03d2\3\2\2\2")
        buf.write("\u03e7\u03d3\3\2\2\2\u03e7\u03d4\3\2\2\2\u03e7\u03d5\3")
        buf.write("\2\2\2\u03e7\u03d6\3\2\2\2\u03e7\u03d7\3\2\2\2\u03e7\u03d8")
        buf.write("\3\2\2\2\u03e7\u03d9\3\2\2\2\u03e7\u03da\3\2\2\2\u03e7")
        buf.write("\u03db\3\2\2\2\u03e7\u03dc\3\2\2\2\u03e7\u03dd\3\2\2\2")
        buf.write("\u03e7\u03de\3\2\2\2\u03e7\u03df\3\2\2\2\u03e7\u03e0\3")
        buf.write("\2\2\2\u03e7\u03e1\3\2\2\2\u03e7\u03e2\3\2\2\2\u03e7\u03e3")
        buf.write("\3\2\2\2\u03e7\u03e4\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e7")
        buf.write("\u03e6\3\2\2\2\u03e8[\3\2\2\2\u03e9\u03ed\7\61\2\2\u03ea")
        buf.write("\u03ec\5\u0172\u00ba\2\u03eb\u03ea\3\2\2\2\u03ec\u03ef")
        buf.write("\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee")
        buf.write("\u03f0\3\2\2\2\u03ef\u03ed\3\2\2\2\u03f0\u03f1\5\u021c")
        buf.write("\u010f\2\u03f1]\3\2\2\2\u03f2\u03f3\7\63\2\2\u03f3\u03f4")
        buf.write("\5\u01f2\u00fa\2\u03f4_\3\2\2\2\u03f5\u03f9\7?\2\2\u03f6")
        buf.write("\u03f8\5\u0172\u00ba\2\u03f7\u03f6\3\2\2\2\u03f8\u03fb")
        buf.write("\3\2\2\2\u03f9\u03f7\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa")
        buf.write("a\3\2\2\2\u03fb\u03f9\3\2\2\2\u03fc\u0400\7D\2\2\u03fd")
        buf.write("\u03ff\5\u0172\u00ba\2\u03fe\u03fd\3\2\2\2\u03ff\u0402")
        buf.write("\3\2\2\2\u0400\u03fe\3\2\2\2\u0400\u0401\3\2\2\2\u0401")
        buf.write("c\3\2\2\2\u0402\u0400\3\2\2\2\u0403\u0404\7\61\2\2\u0404")
        buf.write("\u0405\5\u0212\u010a\2\u0405e\3\2\2\2\u0406\u040a\7O\2")
        buf.write("\2\u0407\u0409\5\u0172\u00ba\2\u0408\u0407\3\2\2\2\u0409")
        buf.write("\u040c\3\2\2\2\u040a\u0408\3\2\2\2\u040a\u040b\3\2\2\2")
        buf.write("\u040b\u040f\3\2\2\2\u040c\u040a\3\2\2\2\u040d\u0410\5")
        buf.write("h\65\2\u040e\u0410\5j\66\2\u040f\u040d\3\2\2\2\u040f\u040e")
        buf.write("\3\2\2\2\u0410g\3\2\2\2\u0411\u0412\7\3\2\2\u0412i\3\2")
        buf.write("\2\2\u0413\u0418\5\u017e\u00c0\2\u0414\u0415\7\13\2\2")
        buf.write("\u0415\u0417\5\u017e\u00c0\2\u0416\u0414\3\2\2\2\u0417")
        buf.write("\u041a\3\2\2\2\u0418\u0416\3\2\2\2\u0418\u0419\3\2\2\2")
        buf.write("\u0419k\3\2\2\2\u041a\u0418\3\2\2\2\u041b\u041f\7T\2\2")
        buf.write("\u041c\u041e\5\u0172\u00ba\2\u041d\u041c\3\2\2\2\u041e")
        buf.write("\u0421\3\2\2\2\u041f\u041d\3\2\2\2\u041f\u0420\3\2\2\2")
        buf.write("\u0420\u0422\3\2\2\2\u0421\u041f\3\2\2\2\u0422\u0424\5")
        buf.write("\u01c0\u00e1\2\u0423\u0425\5n8\2\u0424\u0423\3\2\2\2\u0424")
        buf.write("\u0425\3\2\2\2\u0425m\3\2\2\2\u0426\u0427\7\f\2\2\u0427")
        buf.write("\u0428\5\u01f2\u00fa\2\u0428o\3\2\2\2\u0429\u042a\7X\2")
        buf.write("\2\u042a\u042f\5\u0176\u00bc\2\u042b\u042c\7\13\2\2\u042c")
        buf.write("\u042e\5\u0176\u00bc\2\u042d\u042b\3\2\2\2\u042e\u0431")
        buf.write("\3\2\2\2\u042f\u042d\3\2\2\2\u042f\u0430\3\2\2\2\u0430")
        buf.write("q\3\2\2\2\u0431\u042f\3\2\2\2\u0432\u0433\7V\2\2\u0433")
        buf.write("s\3\2\2\2\u0434\u0435\7[\2\2\u0435\u0436\7;\2\2\u0436")
        buf.write("\u043b\5\u01d4\u00eb\2\u0437\u0438\7\13\2\2\u0438\u043a")
        buf.write("\5\u01d4\u00eb\2\u0439\u0437\3\2\2\2\u043a\u043d\3\2\2")
        buf.write("\2\u043b\u0439\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u0440")
        buf.write("\3\2\2\2\u043d\u043b\3\2\2\2\u043e\u0441\5v<\2\u043f\u0441")
        buf.write("\5x=\2\u0440\u043e\3\2\2\2\u0440\u043f\3\2\2\2\u0440\u0441")
        buf.write("\3\2\2\2\u0441u\3\2\2\2\u0442\u0443\7\u0106\2\2\u0443")
        buf.write("\u0444\5Z.\2\u0444w\3\2\2\2\u0445\u0446\7\u0106\2\2\u0446")
        buf.write("\u0447\7!\2\2\u0447\u0448\5\u009cO\2\u0448\u0449\7\n\2")
        buf.write("\2\u0449y\3\2\2\2\u044a\u044c\7]\2\2\u044b\u044d\5\u01ce")
        buf.write("\u00e8\2\u044c\u044b\3\2\2\2\u044c\u044d\3\2\2\2\u044d")
        buf.write("\u044f\3\2\2\2\u044e\u0450\5|?\2\u044f\u044e\3\2\2\2\u044f")
        buf.write("\u0450\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0454\5\u017e")
        buf.write("\u00c0\2\u0452\u0455\5\u0080A\2\u0453\u0455\5\u008aF\2")
        buf.write("\u0454\u0452\3\2\2\2\u0454\u0453\3\2\2\2\u0454\u0455\3")
        buf.write("\2\2\2\u0455\u0457\3\2\2\2\u0456\u0458\5\u008cG\2\u0457")
        buf.write("\u0456\3\2\2\2\u0457\u0458\3\2\2\2\u0458{\3\2\2\2\u0459")
        buf.write("\u045b\5\u0172\u00ba\2\u045a\u0459\3\2\2\2\u045b\u045e")
        buf.write("\3\2\2\2\u045c\u045a\3\2\2\2\u045c\u045d\3\2\2\2\u045d")
        buf.write("\u0460\3\2\2\2\u045e\u045c\3\2\2\2\u045f\u0461\5~@\2\u0460")
        buf.write("\u045f\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0462\3\2\2\2")
        buf.write("\u0462\u0463\7\u0105\2\2\u0463}\3\2\2\2\u0464\u0465\7")
        buf.write("\u0084\2\2\u0465\u0466\7!\2\2\u0466\u046b\5\u0092J\2\u0467")
        buf.write("\u0468\7\13\2\2\u0468\u046a\5\u0092J\2\u0469\u0467\3\2")
        buf.write("\2\2\u046a\u046d\3\2\2\2\u046b\u0469\3\2\2\2\u046b\u046c")
        buf.write("\3\2\2\2\u046c\u046e\3\2\2\2\u046d\u046b\3\2\2\2\u046e")
        buf.write("\u046f\7\n\2\2\u046f\177\3\2\2\2\u0470\u0471\7\u00d0\2")
        buf.write("\2\u0471\u0476\5\u0082B\2\u0472\u0473\7\13\2\2\u0473\u0475")
        buf.write("\5\u0082B\2\u0474\u0472\3\2\2\2\u0475\u0478\3\2\2\2\u0476")
        buf.write("\u0474\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u0081\3\2\2\2")
        buf.write("\u0478\u0476\3\2\2\2\u0479\u047c\5\u0084C\2\u047a\u047c")
        buf.write("\5\u0088E\2\u047b\u0479\3\2\2\2\u047b\u047a\3\2\2\2\u047c")
        buf.write("\u0083\3\2\2\2\u047d\u047f\5\u0208\u0105\2\u047e\u0480")
        buf.write("\5\u0086D\2\u047f\u047e\3\2\2\2\u047f\u0480\3\2\2\2\u0480")
        buf.write("\u0085\3\2\2\2\u0481\u0482\7\f\2\2\u0482\u0483\5\u0206")
        buf.write("\u0104\2\u0483\u0087\3\2\2\2\u0484\u0485\7\u00c2\2\2\u0485")
        buf.write("\u0486\7!\2\2\u0486\u0487\7\3\2\2\u0487\u0488\7\n\2\2")
        buf.write("\u0488\u0089\3\2\2\2\u0489\u048a\7\u00d6\2\2\u048a\u008b")
        buf.write("\3\2\2\2\u048b\u048e\7\u00d2\2\2\u048c\u048f\5\u008eH")
        buf.write("\2\u048d\u048f\5\u0090I\2\u048e\u048c\3\2\2\2\u048e\u048d")
        buf.write("\3\2\2\2\u048f\u008d\3\2\2\2\u0490\u0491\7\3\2\2\u0491")
        buf.write("\u008f\3\2\2\2\u0492\u0497\5\u0084C\2\u0493\u0494\7\13")
        buf.write("\2\2\u0494\u0496\5\u0084C\2\u0495\u0493\3\2\2\2\u0496")
        buf.write("\u0499\3\2\2\2\u0497\u0495\3\2\2\2\u0497\u0498\3\2\2\2")
        buf.write("\u0498\u0091\3\2\2\2\u0499\u0497\3\2\2\2\u049a\u049d\5")
        buf.write("\u0094K\2\u049b\u049d\5\u01e8\u00f5\2\u049c\u049a\3\2")
        buf.write("\2\2\u049c\u049b\3\2\2\2\u049d\u0093\3\2\2\2\u049e\u04a3")
        buf.write("\5\u01e2\u00f2\2\u049f\u04a0\7\5\2\2\u04a0\u04a2\5\\/")
        buf.write("\2\u04a1\u049f\3\2\2\2\u04a2\u04a5\3\2\2\2\u04a3\u04a1")
        buf.write("\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u0095\3\2\2\2\u04a5")
        buf.write("\u04a3\3\2\2\2\u04a6\u04a8\7`\2\2\u04a7\u04a9\5\u0098")
        buf.write("M\2\u04a8\u04a7\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04a8")
        buf.write("\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u0097\3\2\2\2\u04ac")
        buf.write("\u04ae\5\u009aN\2\u04ad\u04ac\3\2\2\2\u04ad\u04ae\3\2")
        buf.write("\2\2\u04ae\u04af\3\2\2\2\u04af\u04b0\7!\2\2\u04b0\u04b1")
        buf.write("\5\u009cO\2\u04b1\u04b2\7\n\2\2\u04b2\u0099\3\2\2\2\u04b3")
        buf.write("\u04b4\5\u021c\u010f\2\u04b4\u04b5\7\23\2\2\u04b5\u009b")
        buf.write("\3\2\2\2\u04b6\u04ba\5Z.\2\u04b7\u04b9\5\u009eP\2\u04b8")
        buf.write("\u04b7\3\2\2\2\u04b9\u04bc\3\2\2\2\u04ba\u04b8\3\2\2\2")
        buf.write("\u04ba\u04bb\3\2\2\2\u04bb\u009d\3\2\2\2\u04bc\u04ba\3")
        buf.write("\2\2\2\u04bd\u04be\7\5\2\2\u04be\u04bf\5Z.\2\u04bf\u009f")
        buf.write("\3\2\2\2\u04c0\u04c1\7b\2\2\u04c1\u00a1\3\2\2\2\u04c2")
        buf.write("\u04c6\7e\2\2\u04c3\u04c5\5\u0172\u00ba\2\u04c4\u04c3")
        buf.write("\3\2\2\2\u04c5\u04c8\3\2\2\2\u04c6\u04c4\3\2\2\2\u04c6")
        buf.write("\u04c7\3\2\2\2\u04c7\u00a3\3\2\2\2\u04c8\u04c6\3\2\2\2")
        buf.write("\u04c9\u04cd\7f\2\2\u04ca\u04cc\5\u0172\u00ba\2\u04cb")
        buf.write("\u04ca\3\2\2\2\u04cc\u04cf\3\2\2\2\u04cd\u04cb\3\2\2\2")
        buf.write("\u04cd\u04ce\3\2\2\2\u04ce\u04d0\3\2\2\2\u04cf\u04cd\3")
        buf.write("\2\2\2\u04d0\u04d1\5\u00a6T\2\u04d1\u04d2\7\13\2\2\u04d2")
        buf.write("\u04d3\5\u00a6T\2\u04d3\u04d5\3\2\2\2\u04d4\u04d6\5\u00b0")
        buf.write("Y\2\u04d5\u04d4\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6\u04d8")
        buf.write("\3\2\2\2\u04d7\u04d9\5\u00b2Z\2\u04d8\u04d7\3\2\2\2\u04d8")
        buf.write("\u04d9\3\2\2\2\u04d9\u00a5\3\2\2\2\u04da\u04de\5\u00a8")
        buf.write("U\2\u04db\u04de\5\u00aaV\2\u04dc\u04de\5\u00acW\2\u04dd")
        buf.write("\u04da\3\2\2\2\u04dd\u04db\3\2\2\2\u04dd\u04dc\3\2\2\2")
        buf.write("\u04de\u00a7\3\2\2\2\u04df\u04e0\7!\2\2\u04e0\u04e1\5")
        buf.write("\u021c\u010f\2\u04e1\u04e2\7\n\2\2\u04e2\u00a9\3\2\2\2")
        buf.write("\u04e3\u04e4\t\2\2\2\u04e4\u00ab\3\2\2\2\u04e5\u04e6\t")
        buf.write("\3\2\2\u04e6\u04e8\5\u021c\u010f\2\u04e7\u04e9\5\u00ae")
        buf.write("X\2\u04e8\u04e7\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ea")
        buf.write("\3\2\2\2\u04ea\u04eb\t\4\2\2\u04eb\u00ad\3\2\2\2\u04ec")
        buf.write("\u04ed\7\3\2\2\u04ed\u04ee\5\u01a6\u00d4\2\u04ee\u04ef")
        buf.write("\7\22\2\2\u04ef\u04f0\5\u01a6\u00d4\2\u04f0\u00af\3\2")
        buf.write("\2\2\u04f1\u04f2\7\u0105\2\2\u04f2\u04f3\5L\'\2\u04f3")
        buf.write("\u00b1\3\2\2\2\u04f4\u04f5\7\u00d0\2\2\u04f5\u04fa\5\u0176")
        buf.write("\u00bc\2\u04f6\u04f7\7\13\2\2\u04f7\u04f9\5\u0176\u00bc")
        buf.write("\2\u04f8\u04f6\3\2\2\2\u04f9\u04fc\3\2\2\2\u04fa\u04f8")
        buf.write("\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb\u00b3\3\2\2\2\u04fc")
        buf.write("\u04fa\3\2\2\2\u04fd\u04fe\7g\2\2\u04fe\u0500\5\u01a6")
        buf.write("\u00d4\2\u04ff\u0501\5\u00c2b\2\u0500\u04ff\3\2\2\2\u0500")
        buf.write("\u0501\3\2\2\2\u0501\u00b5\3\2\2\2\u0502\u0503\7i\2\2")
        buf.write("\u0503\u0504\5\u00b8]\2\u0504\u0505\7\13\2\2\u0505\u0506")
        buf.write("\5\u00b8]\2\u0506\u00b7\3\2\2\2\u0507\u0509\t\5\2\2\u0508")
        buf.write("\u050a\5\u00ba^\2\u0509\u0508\3\2\2\2\u0509\u050a\3\2")
        buf.write("\2\2\u050a\u050e\3\2\2\2\u050b\u050d\5\u0172\u00ba\2\u050c")
        buf.write("\u050b\3\2\2\2\u050d\u0510\3\2\2\2\u050e\u050c\3\2\2\2")
        buf.write("\u050e\u050f\3\2\2\2\u050f\u00b9\3\2\2\2\u0510\u050e\3")
        buf.write("\2\2\2\u0511\u0512\7\61\2\2\u0512\u0513\5\u021c\u010f")
        buf.write("\2\u0513\u00bb\3\2\2\2\u0514\u0518\7h\2\2\u0515\u0517")
        buf.write("\5\u0172\u00ba\2\u0516\u0515\3\2\2\2\u0517\u051a\3\2\2")
        buf.write("\2\u0518\u0516\3\2\2\2\u0518\u0519\3\2\2\2\u0519\u051b")
        buf.write("\3\2\2\2\u051a\u0518\3\2\2\2\u051b\u051c\5\u00a6T\2\u051c")
        buf.write("\u051d\7\13\2\2\u051d\u051e\5\u00a6T\2\u051e\u0520\3\2")
        buf.write("\2\2\u051f\u0521\5\u00b0Y\2\u0520\u051f\3\2\2\2\u0520")
        buf.write("\u0521\3\2\2\2\u0521\u0523\3\2\2\2\u0522\u0524\5\u00b2")
        buf.write("Z\2\u0523\u0522\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u00bd")
        buf.write("\3\2\2\2\u0525\u0526\7\u0087\2\2\u0526\u0527\5\u01bc\u00df")
        buf.write("\2\u0527\u00bf\3\2\2\2\u0528\u052c\7\u008a\2\2\u0529\u052b")
        buf.write("\5\u0172\u00ba\2\u052a\u0529\3\2\2\2\u052b\u052e\3\2\2")
        buf.write("\2\u052c\u052a\3\2\2\2\u052c\u052d\3\2\2\2\u052d\u052f")
        buf.write("\3\2\2\2\u052e\u052c\3\2\2\2\u052f\u0532\5\u017e\u00c0")
        buf.write("\2\u0530\u0533\5\u00c2b\2\u0531\u0533\5\u00c4c\2\u0532")
        buf.write("\u0530\3\2\2\2\u0532\u0531\3\2\2\2\u0532\u0533\3\2\2\2")
        buf.write("\u0533\u00c1\3\2\2\2\u0534\u053d\7\u00bc\2\2\u0535\u053a")
        buf.write("\5\u017e\u00c0\2\u0536\u0537\7\13\2\2\u0537\u0539\5\u017e")
        buf.write("\u00c0\2\u0538\u0536\3\2\2\2\u0539\u053c\3\2\2\2\u053a")
        buf.write("\u0538\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u053e\3\2\2\2")
        buf.write("\u053c\u053a\3\2\2\2\u053d\u0535\3\2\2\2\u053d\u053e\3")
        buf.write("\2\2\2\u053e\u00c3\3\2\2\2\u053f\u0540\7\u0105\2\2\u0540")
        buf.write("\u0541\5\u017e\u00c0\2\u0541\u00c5\3\2\2\2\u0542\u0546")
        buf.write("\7\u0096\2\2\u0543\u0545\5\u0172\u00ba\2\u0544\u0543\3")
        buf.write("\2\2\2\u0545\u0548\3\2\2\2\u0546\u0544\3\2\2\2\u0546\u0547")
        buf.write("\3\2\2\2\u0547\u0549\3\2\2\2\u0548\u0546\3\2\2\2\u0549")
        buf.write("\u054a\5\u017e\u00c0\2\u054a\u054b\5\u00c2b\2\u054b\u00c7")
        buf.write("\3\2\2\2\u054c\u0550\7\u0098\2\2\u054d\u054f\5\u0172\u00ba")
        buf.write("\2\u054e\u054d\3\2\2\2\u054f\u0552\3\2\2\2\u0550\u054e")
        buf.write("\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0553\3\2\2\2\u0552")
        buf.write("\u0550\3\2\2\2\u0553\u0554\5\u00caf\2\u0554\u0555\7\61")
        buf.write("\2\2\u0555\u0556\5\u021c\u010f\2\u0556\u0557\7!\2\2\u0557")
        buf.write("\u055c\5\6\4\2\u0558\u0559\7$\2\2\u0559\u055b\5\6\4\2")
        buf.write("\u055a\u0558\3\2\2\2\u055b\u055e\3\2\2\2\u055c\u055a\3")
        buf.write("\2\2\2\u055c\u055d\3\2\2\2\u055d\u0560\3\2\2\2\u055e\u055c")
        buf.write("\3\2\2\2\u055f\u0561\7$\2\2\u0560\u055f\3\2\2\2\u0560")
        buf.write("\u0561\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u0563\7\n\2\2")
        buf.write("\u0563\u00c9\3\2\2\2\u0564\u0568\5\u00ccg\2\u0565\u0568")
        buf.write("\5\u020a\u0106\2\u0566\u0568\5\u01d4\u00eb\2\u0567\u0564")
        buf.write("\3\2\2\2\u0567\u0565\3\2\2\2\u0567\u0566\3\2\2\2\u0568")
        buf.write("\u00cb\3\2\2\2\u0569\u056a\7S\2\2\u056a\u056b\7 \2\2\u056b")
        buf.write("\u0570\5\u017e\u00c0\2\u056c\u056d\7\13\2\2\u056d\u056f")
        buf.write("\5\u017e\u00c0\2\u056e\u056c\3\2\2\2\u056f\u0572\3\2\2")
        buf.write("\2\u0570\u056e\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0573")
        buf.write("\3\2\2\2\u0572\u0570\3\2\2\2\u0573\u0574\7\7\2\2\u0574")
        buf.write("\u00cd\3\2\2\2\u0575\u0579\7\u0099\2\2\u0576\u0578\5\u0172")
        buf.write("\u00ba\2\u0577\u0576\3\2\2\2\u0578\u057b\3\2\2\2\u0579")
        buf.write("\u0577\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057c\3\2\2\2")
        buf.write("\u057b\u0579\3\2\2\2\u057c\u057d\5\u020a\u0106\2\u057d")
        buf.write("\u057e\t\6\2\2\u057e\u0581\5\u020a\u0106\2\u057f\u0582")
        buf.write("\5\u00d0i\2\u0580\u0582\5\u00d2j\2\u0581\u057f\3\2\2\2")
        buf.write("\u0581\u0580\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0584\3")
        buf.write("\2\2\2\u0583\u0585\5\u00d4k\2\u0584\u0583\3\2\2\2\u0584")
        buf.write("\u0585\3\2\2\2\u0585\u00cf\3\2\2\2\u0586\u0587\7\u010b")
        buf.write("\2\2\u0587\u0588\7\23\2\2\u0588\u0589\5\u021c\u010f\2")
        buf.write("\u0589\u00d1\3\2\2\2\u058a\u058b\7\u0106\2\2\u058b\u058c")
        buf.write("\5\u01a6\u00d4\2\u058c\u058d\7\u00bc\2\2\u058d\u058e\5")
        buf.write("\u020a\u0106\2\u058e\u00d3\3\2\2\2\u058f\u0590\7\u00c9")
        buf.write("\2\2\u0590\u0591\5\u01d6\u00ec\2\u0591\u0592\7!\2\2\u0592")
        buf.write("\u0593\5\u016a\u00b6\2\u0593\u0594\7\n\2\2\u0594\u00d5")
        buf.write("\3\2\2\2\u0595\u0599\7\u009a\2\2\u0596\u0598\5\u0172\u00ba")
        buf.write("\2\u0597\u0596\3\2\2\2\u0598\u059b\3\2\2\2\u0599\u0597")
        buf.write("\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059c\3\2\2\2\u059b")
        buf.write("\u0599\3\2\2\2\u059c\u05a1\5\u00dan\2\u059d\u059e\7\13")
        buf.write("\2\2\u059e\u05a0\5\u00dan\2\u059f\u059d\3\2\2\2\u05a0")
        buf.write("\u05a3\3\2\2\2\u05a1\u059f\3\2\2\2\u05a1\u05a2\3\2\2\2")
        buf.write("\u05a2\u05a4\3\2\2\2\u05a3\u05a1\3\2\2\2\u05a4\u05a7\5")
        buf.write("\u00d8m\2\u05a5\u05a8\5\u00dep\2\u05a6\u05a8\5\u00e0q")
        buf.write("\2\u05a7\u05a5\3\2\2\2\u05a7\u05a6\3\2\2\2\u05a8\u05aa")
        buf.write("\3\2\2\2\u05a9\u05ab\5\u00e2r\2\u05aa\u05a9\3\2\2\2\u05aa")
        buf.write("\u05ab\3\2\2\2\u05ab\u00d7\3\2\2\2\u05ac\u05ad\7\u00bc")
        buf.write("\2\2\u05ad\u05ae\5\u0176\u00bc\2\u05ae\u00d9\3\2\2\2\u05af")
        buf.write("\u05b1\5\u0176\u00bc\2\u05b0\u05b2\5\u00dco\2\u05b1\u05b0")
        buf.write("\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u00db\3\2\2\2\u05b3")
        buf.write("\u05b4\7L\2\2\u05b4\u05b5\7\23\2\2\u05b5\u05b6\5\u0176")
        buf.write("\u00bc\2\u05b6\u00dd\3\2\2\2\u05b7\u05b8\7\u0084\2\2\u05b8")
        buf.write("\u05b9\7\u00d8\2\2\u05b9\u05ba\7!\2\2\u05ba\u05bb\5\u0176")
        buf.write("\u00bc\2\u05bb\u05bc\7\13\2\2\u05bc\u05bd\5\u0176\u00bc")
        buf.write("\2\u05bd\u05be\7\13\2\2\u05be\u05bf\5\u0176\u00bc\2\u05bf")
        buf.write("\u05c0\7\n\2\2\u05c0\u00df\3\2\2\2\u05c1\u05c2\7a\2\2")
        buf.write("\u05c2\u05c4\5\u0176\u00bc\2\u05c3\u05c1\3\2\2\2\u05c3")
        buf.write("\u05c4\3\2\2\2\u05c4\u05c7\3\2\2\2\u05c5\u05c6\7\u00f8")
        buf.write("\2\2\u05c6\u05c8\5\u0176\u00bc\2\u05c7\u05c5\3\2\2\2\u05c7")
        buf.write("\u05c8\3\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u05ca\7\u00ef")
        buf.write("\2\2\u05ca\u05cb\5\u0176\u00bc\2\u05cb\u00e1\3\2\2\2\u05cc")
        buf.write("\u05cd\7;\2\2\u05cd\u05d2\5\u0176\u00bc\2\u05ce\u05cf")
        buf.write("\7\13\2\2\u05cf\u05d1\5\u0176\u00bc\2\u05d0\u05ce\3\2")
        buf.write("\2\2\u05d1\u05d4\3\2\2\2\u05d2\u05d0\3\2\2\2\u05d2\u05d3")
        buf.write("\3\2\2\2\u05d3\u00e3\3\2\2\2\u05d4\u05d2\3\2\2\2\u05d5")
        buf.write("\u05d9\t\7\2\2\u05d6\u05d8\5\u0170\u00b9\2\u05d7\u05d6")
        buf.write("\3\2\2\2\u05d8\u05db\3\2\2\2\u05d9\u05d7\3\2\2\2\u05d9")
        buf.write("\u05da\3\2\2\2\u05da\u05dc\3\2\2\2\u05db\u05d9\3\2\2\2")
        buf.write("\u05dc\u05e1\5\u00eav\2\u05dd\u05de\7\13\2\2\u05de\u05e0")
        buf.write("\5\u00eav\2\u05df\u05dd\3\2\2\2\u05e0\u05e3\3\2\2\2\u05e1")
        buf.write("\u05df\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u05e5\3\2\2\2")
        buf.write("\u05e3\u05e1\3\2\2\2\u05e4\u05e6\5\u00e6t\2\u05e5\u05e4")
        buf.write("\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u05e8\3\2\2\2\u05e7")
        buf.write("\u05e9\5\u00e8u\2\u05e8\u05e7\3\2\2\2\u05e8\u05e9\3\2")
        buf.write("\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05eb\7\u00bc\2\2\u05eb")
        buf.write("\u05ec\7!\2\2\u05ec\u05ed\5\u016a\u00b6\2\u05ed\u05ee")
        buf.write("\7\n\2\2\u05ee\u00e5\3\2\2\2\u05ef\u05f0\7\u0092\2\2\u05f0")
        buf.write("\u05f1\7\u0133\2\2\u05f1\u00e7\3\2\2\2\u05f2\u05f3\7\u0082")
        buf.write("\2\2\u05f3\u05f4\7\u013d\2\2\u05f4\u00e9\3\2\2\2\u05f5")
        buf.write("\u05f7\5\u0176\u00bc\2\u05f6\u05f8\5\u00ecw\2\u05f7\u05f6")
        buf.write("\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u00eb\3\2\2\2\u05f9")
        buf.write("\u05fa\7\u00f8\2\2\u05fa\u05fb\7\u013b\2\2\u05fb\u00ed")
        buf.write("\3\2\2\2\u05fc\u0600\t\b\2\2\u05fd\u05ff\5\u0170\u00b9")
        buf.write("\2\u05fe\u05fd\3\2\2\2\u05ff\u0602\3\2\2\2\u0600\u05fe")
        buf.write("\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0603\3\2\2\2\u0602")
        buf.write("\u0600\3\2\2\2\u0603\u0608\5\u00f0y\2\u0604\u0605\7\13")
        buf.write("\2\2\u0605\u0607\5\u00f0y\2\u0606\u0604\3\2\2\2\u0607")
        buf.write("\u060a\3\2\2\2\u0608\u0606\3\2\2\2\u0608\u0609\3\2\2\2")
        buf.write("\u0609\u060c\3\2\2\2\u060a\u0608\3\2\2\2\u060b\u060d\5")
        buf.write("\u00e6t\2\u060c\u060b\3\2\2\2\u060c\u060d\3\2\2\2\u060d")
        buf.write("\u00ef\3\2\2\2\u060e\u0610\5\u0176\u00bc\2\u060f\u0611")
        buf.write("\5\u00ecw\2\u0610\u060f\3\2\2\2\u0610\u0611\3\2\2\2\u0611")
        buf.write("\u00f1\3\2\2\2\u0612\u0614\7\u00c4\2\2\u0613\u0615\5\u00f4")
        buf.write("{\2\u0614\u0613\3\2\2\2\u0614\u0615\3\2\2\2\u0615\u0616")
        buf.write("\3\2\2\2\u0616\u0617\5\u017e\u00c0\2\u0617\u0618\7\u0106")
        buf.write("\2\2\u0618\u0619\5\u00fa~\2\u0619\u00f3\3\2\2\2\u061a")
        buf.write("\u061b\7\u008b\2\2\u061b\u061c\7\23\2\2\u061c\u061e\t")
        buf.write("\t\2\2\u061d\u061f\5\u00f6|\2\u061e\u061d\3\2\2\2\u061e")
        buf.write("\u061f\3\2\2\2\u061f\u00f5\3\2\2\2\u0620\u0621\7_\2\2")
        buf.write("\u0621\u0622\7\23\2\2\u0622\u0623\7\u013e\2\2\u0623\u00f7")
        buf.write("\3\2\2\2\u0624\u0627\5\u020a\u0106\2\u0625\u0626\7\f\2")
        buf.write("\2\u0626\u0628\5\u0204\u0103\2\u0627\u0625\3\2\2\2\u0627")
        buf.write("\u0628\3\2\2\2\u0628\u00f9\3\2\2\2\u0629\u062b\5\u00f8")
        buf.write("}\2\u062a\u0629\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062f")
        buf.write("\3\2\2\2\u062c\u062e\5\u00fc\177\2\u062d\u062c\3\2\2\2")
        buf.write("\u062e\u0631\3\2\2\2\u062f\u062d\3\2\2\2\u062f\u0630\3")
        buf.write("\2\2\2\u0630\u0633\3\2\2\2\u0631\u062f\3\2\2\2\u0632\u0634")
        buf.write("\7\3\2\2\u0633\u0632\3\2\2\2\u0633\u0634\3\2\2\2\u0634")
        buf.write("\u00fb\3\2\2\2\u0635\u0637\7\3\2\2\u0636\u0635\3\2\2\2")
        buf.write("\u0636\u0637\3\2\2\2\u0637\u0638\3\2\2\2\u0638\u063a\5")
        buf.write("\u0248\u0125\2\u0639\u063b\5\u00f8}\2\u063a\u0639\3\2")
        buf.write("\2\2\u063a\u063b\3\2\2\2\u063b\u00fd\3\2\2\2\u063c\u063e")
        buf.write("\7\u00c6\2\2\u063d\u063f\5\u00f4{\2\u063e\u063d\3\2\2")
        buf.write("\2\u063e\u063f\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0641")
        buf.write("\5\u017e\u00c0\2\u0641\u0642\7\u0106\2\2\u0642\u0643\5")
        buf.write("\u00fa~\2\u0643\u00ff\3\2\2\2\u0644\u0645\7\u00c5\2\2")
        buf.write("\u0645\u0646\5\u017e\u00c0\2\u0646\u0648\5\u01f2\u00fa")
        buf.write("\2\u0647\u0649\5\u0102\u0082\2\u0648\u0647\3\2\2\2\u0648")
        buf.write("\u0649\3\2\2\2\u0649\u0101\3\2\2\2\u064a\u064b\7\u0106")
        buf.write("\2\2\u064b\u064c\7!\2\2\u064c\u0651\5\u0174\u00bb\2\u064d")
        buf.write("\u064e\7\13\2\2\u064e\u0650\5\u0174\u00bb\2\u064f\u064d")
        buf.write("\3\2\2\2\u0650\u0653\3\2\2\2\u0651\u064f\3\2\2\2\u0651")
        buf.write("\u0652\3\2\2\2\u0652\u0654\3\2\2\2\u0653\u0651\3\2\2\2")
        buf.write("\u0654\u0655\7\n\2\2\u0655\u0103\3\2\2\2\u0656\u065a\7")
        buf.write("\u00c7\2\2\u0657\u0659\5\u0172\u00ba\2\u0658\u0657\3\2")
        buf.write("\2\2\u0659\u065c\3\2\2\2\u065a\u0658\3\2\2\2\u065a\u065b")
        buf.write("\3\2\2\2\u065b\u065d\3\2\2\2\u065c\u065a\3\2\2\2\u065d")
        buf.write("\u065e\7;\2\2\u065e\u0660\5\u01d4\u00eb\2\u065f\u0661")
        buf.write("\5\u0106\u0084\2\u0660\u065f\3\2\2\2\u0660\u0661\3\2\2")
        buf.write("\2\u0661\u0664\3\2\2\2\u0662\u0665\5\u0108\u0085\2\u0663")
        buf.write("\u0665\5\u010a\u0086\2\u0664\u0662\3\2\2\2\u0664\u0663")
        buf.write("\3\2\2\2\u0665\u0105\3\2\2\2\u0666\u0669\7\u0084\2\2\u0667")
        buf.write("\u066a\5\u01c0\u00e1\2\u0668\u066a\5\u024a\u0126\2\u0669")
        buf.write("\u0667\3\2\2\2\u0669\u0668\3\2\2\2\u066a\u0107\3\2\2\2")
        buf.write("\u066b\u066c\7!\2\2\u066c\u066d\5R*\2\u066d\u066e\7\n")
        buf.write("\2\2\u066e\u0109\3\2\2\2\u066f\u0670\7\37\2\2\u0670\u0671")
        buf.write("\5N(\2\u0671\u0672\7\6\2\2\u0672\u010b\3\2\2\2\u0673\u0677")
        buf.write("\7\u00c8\2\2\u0674\u0676\5\u0172\u00ba\2\u0675\u0674\3")
        buf.write("\2\2\2\u0676\u0679\3\2\2\2\u0677\u0675\3\2\2\2\u0677\u0678")
        buf.write("\3\2\2\2\u0678\u067a\3\2\2\2\u0679\u0677\3\2\2\2\u067a")
        buf.write("\u067c\5\u01d4\u00eb\2\u067b\u067d\5\u010e\u0088\2\u067c")
        buf.write("\u067b\3\2\2\2\u067c\u067d\3\2\2\2\u067d\u067e\3\2\2\2")
        buf.write("\u067e\u067f\7!\2\2\u067f\u0680\5\u016a\u00b6\2\u0680")
        buf.write("\u0681\7\n\2\2\u0681\u010d\3\2\2\2\u0682\u0683\7\u0082")
        buf.write("\2\2\u0683\u0684\7\u013d\2\2\u0684\u010f\3\2\2\2\u0685")
        buf.write("\u0686\7\u00cf\2\2\u0686\u068b\5\u0176\u00bc\2\u0687\u0688")
        buf.write("\7\13\2\2\u0688\u068a\5\u0176\u00bc\2\u0689\u0687\3\2")
        buf.write("\2\2\u068a\u068d\3\2\2\2\u068b\u0689\3\2\2\2\u068b\u068c")
        buf.write("\3\2\2\2\u068c\u0111\3\2\2\2\u068d\u068b\3\2\2\2\u068e")
        buf.write("\u0697\7\u00d1\2\2\u068f\u0694\5\u0210\u0109\2\u0690\u0691")
        buf.write("\7\13\2\2\u0691\u0693\5\u0210\u0109\2\u0692\u0690\3\2")
        buf.write("\2\2\u0693\u0696\3\2\2\2\u0694\u0692\3\2\2\2\u0694\u0695")
        buf.write("\3\2\2\2\u0695\u0698\3\2\2\2\u0696\u0694\3\2\2\2\u0697")
        buf.write("\u068f\3\2\2\2\u0697\u0698\3\2\2\2\u0698\u0113\3\2\2\2")
        buf.write("\u0699\u069a\7\u00d3\2\2\u069a\u069f\5\u0210\u0109\2\u069b")
        buf.write("\u069c\7\13\2\2\u069c\u069e\5\u0210\u0109\2\u069d\u069b")
        buf.write("\3\2\2\2\u069e\u06a1\3\2\2\2\u069f\u069d\3\2\2\2\u069f")
        buf.write("\u06a0\3\2\2\2\u06a0\u0115\3\2\2\2\u06a1\u069f\3\2\2\2")
        buf.write("\u06a2\u06ab\7\u00d0\2\2\u06a3\u06a8\5\u0176\u00bc\2\u06a4")
        buf.write("\u06a5\7\13\2\2\u06a5\u06a7\5\u0176\u00bc\2\u06a6\u06a4")
        buf.write("\3\2\2\2\u06a7\u06aa\3\2\2\2\u06a8\u06a6\3\2\2\2\u06a8")
        buf.write("\u06a9\3\2\2\2\u06a9\u06ac\3\2\2\2\u06aa\u06a8\3\2\2\2")
        buf.write("\u06ab\u06a3\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u0117\3")
        buf.write("\2\2\2\u06ad\u06b6\7\u00d4\2\2\u06ae\u06b3\5\u0176\u00bc")
        buf.write("\2\u06af\u06b0\7\13\2\2\u06b0\u06b2\5\u0176\u00bc\2\u06b1")
        buf.write("\u06af\3\2\2\2\u06b2\u06b5\3\2\2\2\u06b3\u06b1\3\2\2\2")
        buf.write("\u06b3\u06b4\3\2\2\2\u06b4\u06b7\3\2\2\2\u06b5\u06b3\3")
        buf.write("\2\2\2\u06b6\u06ae\3\2\2\2\u06b6\u06b7\3\2\2\2\u06b7\u0119")
        buf.write("\3\2\2\2\u06b8\u06c1\7\u00d5\2\2\u06b9\u06be\5\u011c\u008f")
        buf.write("\2\u06ba\u06bb\7\13\2\2\u06bb\u06bd\5\u011c\u008f\2\u06bc")
        buf.write("\u06ba\3\2\2\2\u06bd\u06c0\3\2\2\2\u06be\u06bc\3\2\2\2")
        buf.write("\u06be\u06bf\3\2\2\2\u06bf\u06c2\3\2\2\2\u06c0\u06be\3")
        buf.write("\2\2\2\u06c1\u06b9\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u011b")
        buf.write("\3\2\2\2\u06c3\u06c5\5\u0210\u0109\2\u06c4\u06c6\t\n\2")
        buf.write("\2\u06c5\u06c4\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u011d")
        buf.write("\3\2\2\2\u06c7\u06cb\7\u00d9\2\2\u06c8\u06ca\5\u0170\u00b9")
        buf.write("\2\u06c9\u06c8\3\2\2\2\u06ca\u06cd\3\2\2\2\u06cb\u06c9")
        buf.write("\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06ce\3\2\2\2\u06cd")
        buf.write("\u06cb\3\2\2\2\u06ce\u06cf\7;\2\2\u06cf\u06d1\5\u0176")
        buf.write("\u00bc\2\u06d0\u06d2\5\u0120\u0091\2\u06d1\u06d0\3\2\2")
        buf.write("\2\u06d1\u06d2\3\2\2\2\u06d2\u011f\3\2\2\2\u06d3\u06d4")
        buf.write("\7\u0106\2\2\u06d4\u06d9\5\u0176\u00bc\2\u06d5\u06d6\7")
        buf.write("\13\2\2\u06d6\u06d8\5\u0176\u00bc\2\u06d7\u06d5\3\2\2")
        buf.write("\2\u06d8\u06db\3\2\2\2\u06d9\u06d7\3\2\2\2\u06d9\u06da")
        buf.write("\3\2\2\2\u06da\u0121\3\2\2\2\u06db\u06d9\3\2\2\2\u06dc")
        buf.write("\u06dd\7\u00dc\2\2\u06dd\u06e0\t\13\2\2\u06de\u06e1\5")
        buf.write("\u0124\u0093\2\u06df\u06e1\5\u0126\u0094\2\u06e0\u06de")
        buf.write("\3\2\2\2\u06e0\u06df\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1")
        buf.write("\u0123\3\2\2\2\u06e2\u06e3\7\u0106\2\2\u06e3\u06ec\7!")
        buf.write("\2\2\u06e4\u06e9\5\u0128\u0095\2\u06e5\u06e6\7\13\2\2")
        buf.write("\u06e6\u06e8\5\u0128\u0095\2\u06e7\u06e5\3\2\2\2\u06e8")
        buf.write("\u06eb\3\2\2\2\u06e9\u06e7\3\2\2\2\u06e9\u06ea\3\2\2\2")
        buf.write("\u06ea\u06ed\3\2\2\2\u06eb\u06e9\3\2\2\2\u06ec\u06e4\3")
        buf.write("\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06ef")
        buf.write("\7\n\2\2\u06ef\u0125\3\2\2\2\u06f0\u06f2\5\u012c\u0097")
        buf.write("\2\u06f1\u06f0\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3\u06f1")
        buf.write("\3\2\2\2\u06f3\u06f4\3\2\2\2\u06f4\u0127\3\2\2\2\u06f5")
        buf.write("\u06f6\7\u00f7\2\2\u06f6\u06f7\7\23\2\2\u06f7\u0729\5")
        buf.write("\u01a8\u00d5\2\u06f8\u06f9\7\u010f\2\2\u06f9\u06fa\7\23")
        buf.write("\2\2\u06fa\u0729\5\u020a\u0106\2\u06fb\u06fc\7\u00e5\2")
        buf.write("\2\u06fc\u06fd\7\23\2\2\u06fd\u0729\5\u012a\u0096\2\u06fe")
        buf.write("\u06ff\7\u0114\2\2\u06ff\u0700\7\23\2\2\u0700\u0729\5")
        buf.write("\u012a\u0096\2\u0701\u0702\7/\2\2\u0702\u0703\7\23\2\2")
        buf.write("\u0703\u0729\5\u012a\u0096\2\u0704\u0705\7\u008b\2\2\u0705")
        buf.write("\u0706\7\23\2\2\u0706\u0729\t\f\2\2\u0707\u0708\7\u0112")
        buf.write("\2\2\u0708\u0709\7\23\2\2\u0709\u0729\5\u01a8\u00d5\2")
        buf.write("\u070a\u070b\7\u0118\2\2\u070b\u070c\7\23\2\2\u070c\u0729")
        buf.write("\5\u01a8\u00d5\2\u070d\u070e\7\u010e\2\2\u070e\u070f\7")
        buf.write("\23\2\2\u070f\u0729\t\r\2\2\u0710\u0711\7\u0113\2\2\u0711")
        buf.write("\u0712\7\23\2\2\u0712\u0729\t\r\2\2\u0713\u0714\7\u008e")
        buf.write("\2\2\u0714\u0715\7\23\2\2\u0715\u0729\t\16\2\2\u0716\u0717")
        buf.write("\7\u0117\2\2\u0717\u0718\7\23\2\2\u0718\u0729\t\17\2\2")
        buf.write("\u0719\u071a\7)\2\2\u071a\u071b\7\23\2\2\u071b\u0729\7")
        buf.write("\u0138\2\2\u071c\u071d\7\u0116\2\2\u071d\u071e\7\23\2")
        buf.write("\2\u071e\u0729\5\u022e\u0118\2\u071f\u0720\7\u0115\2\2")
        buf.write("\u0720\u0721\7\23\2\2\u0721\u0729\5\u022e\u0118\2\u0722")
        buf.write("\u0723\7\u0111\2\2\u0723\u0724\7\23\2\2\u0724\u0729\5")
        buf.write("\u0228\u0115\2\u0725\u0726\7\u0110\2\2\u0726\u0727\7\23")
        buf.write("\2\2\u0727\u0729\5\u0228\u0115\2\u0728\u06f5\3\2\2\2\u0728")
        buf.write("\u06f8\3\2\2\2\u0728\u06fb\3\2\2\2\u0728\u06fe\3\2\2\2")
        buf.write("\u0728\u0701\3\2\2\2\u0728\u0704\3\2\2\2\u0728\u0707\3")
        buf.write("\2\2\2\u0728\u070a\3\2\2\2\u0728\u070d\3\2\2\2\u0728\u0710")
        buf.write("\3\2\2\2\u0728\u0713\3\2\2\2\u0728\u0716\3\2\2\2\u0728")
        buf.write("\u0719\3\2\2\2\u0728\u071c\3\2\2\2\u0728\u071f\3\2\2\2")
        buf.write("\u0728\u0722\3\2\2\2\u0728\u0725\3\2\2\2\u0729\u0129\3")
        buf.write("\2\2\2\u072a\u072f\5\u020c\u0107\2\u072b\u072c\7\13\2")
        buf.write("\2\u072c\u072e\5\u020c\u0107\2\u072d\u072b\3\2\2\2\u072e")
        buf.write("\u0731\3\2\2\2\u072f\u072d\3\2\2\2\u072f\u0730\3\2\2\2")
        buf.write("\u0730\u012b\3\2\2\2\u0731\u072f\3\2\2\2\u0732\u0733\7")
        buf.write("\u00f7\2\2\u0733\u0734\7\23\2\2\u0734\u0740\5\u0248\u0125")
        buf.write("\2\u0735\u0736\7\u008b\2\2\u0736\u0737\7\23\2\2\u0737")
        buf.write("\u0740\t\f\2\2\u0738\u0739\7\u0106\2\2\u0739\u0740\5\u0248")
        buf.write("\u0125\2\u073a\u073b\7;\2\2\u073b\u0740\5\u012a\u0096")
        buf.write("\2\u073c\u073d\7)\2\2\u073d\u073e\7\23\2\2\u073e\u0740")
        buf.write("\7\u0138\2\2\u073f\u0732\3\2\2\2\u073f\u0735\3\2\2\2\u073f")
        buf.write("\u0738\3\2\2\2\u073f\u073a\3\2\2\2\u073f\u073c\3\2\2\2")
        buf.write("\u0740\u012d\3\2\2\2\u0741\u0745\7\u00e0\2\2\u0742\u0744")
        buf.write("\5\u0170\u00b9\2\u0743\u0742\3\2\2\2\u0744\u0747\3\2\2")
        buf.write("\2\u0745\u0743\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u0748")
        buf.write("\3\2\2\2\u0747\u0745\3\2\2\2\u0748\u0749\5\u0176\u00bc")
        buf.write("\2\u0749\u074a\7\u00bb\2\2\u074a\u074b\5\u0176\u00bc\2")
        buf.write("\u074b\u012f\3\2\2\2\u074c\u0750\7\u00df\2\2\u074d\u074f")
        buf.write("\5\u0170\u00b9\2\u074e\u074d\3\2\2\2\u074f\u0752\3\2\2")
        buf.write("\2\u0750\u074e\3\2\2\2\u0750\u0751\3\2\2\2\u0751\u0753")
        buf.write("\3\2\2\2\u0752\u0750\3\2\2\2\u0753\u0754\5\u0176\u00bc")
        buf.write("\2\u0754\u0131\3\2\2\2\u0755\u0759\7\u00e1\2\2\u0756\u0758")
        buf.write("\5\u0172\u00ba\2\u0757\u0756\3\2\2\2\u0758\u075b\3\2\2")
        buf.write("\2\u0759\u0757\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u075d")
        buf.write("\3\2\2\2\u075b\u0759\3\2\2\2\u075c\u075e\5\u0134\u009b")
        buf.write("\2\u075d\u075c\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u0760")
        buf.write("\3\2\2\2\u075f\u0761\5\u0136\u009c\2\u0760\u075f\3\2\2")
        buf.write("\2\u0760\u0761\3\2\2\2\u0761\u0763\3\2\2\2\u0762\u0764")
        buf.write("\5\u0138\u009d\2\u0763\u0762\3\2\2\2\u0763\u0764\3\2\2")
        buf.write("\2\u0764\u0765\3\2\2\2\u0765\u0766\7\u0106\2\2\u0766\u0768")
        buf.write("\7!\2\2\u0767\u0769\5\u013a\u009e\2\u0768\u0767\3\2\2")
        buf.write("\2\u0769\u076a\3\2\2\2\u076a\u0768\3\2\2\2\u076a\u076b")
        buf.write("\3\2\2\2\u076b\u076c\3\2\2\2\u076c\u076d\7\n\2\2\u076d")
        buf.write("\u0133\3\2\2\2\u076e\u076f\7\u00bf\2\2\u076f\u0770\7;")
        buf.write("\2\2\u0770\u0771\5\u014c\u00a7\2\u0771\u0772\7\13\2\2")
        buf.write("\u0772\u0773\5\u014c\u00a7\2\u0773\u0135\3\2\2\2\u0774")
        buf.write("\u0775\7\u00c7\2\2\u0775\u0776\7;\2\2\u0776\u077b\5\u017e")
        buf.write("\u00c0\2\u0777\u0778\7\13\2\2\u0778\u077a\5\u017e\u00c0")
        buf.write("\2\u0779\u0777\3\2\2\2\u077a\u077d\3\2\2\2\u077b\u0779")
        buf.write("\3\2\2\2\u077b\u077c\3\2\2\2\u077c\u0137\3\2\2\2\u077d")
        buf.write("\u077b\3\2\2\2\u077e\u077f\7J\2\2\u077f\u0780\7!\2\2\u0780")
        buf.write("\u0785\5\32\16\2\u0781\u0782\7\13\2\2\u0782\u0784\5\32")
        buf.write("\16\2\u0783\u0781\3\2\2\2\u0784\u0787\3\2\2\2\u0785\u0783")
        buf.write("\3\2\2\2\u0785\u0786\3\2\2\2\u0786\u0788\3\2\2\2\u0787")
        buf.write("\u0785\3\2\2\2\u0788\u0789\7\n\2\2\u0789\u0139\3\2\2\2")
        buf.write("\u078a\u078b\7\u00ef\2\2\u078b\u078d\5\u0208\u0105\2\u078c")
        buf.write("\u078e\7\u00bd\2\2\u078d\u078c\3\2\2\2\u078d\u078e\3\2")
        buf.write("\2\2\u078e\u0790\3\2\2\2\u078f\u0791\5\u013c\u009f\2\u0790")
        buf.write("\u078f\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u0792\3\2\2\2")
        buf.write("\u0792\u0793\7\f\2\2\u0793\u0795\5\u017e\u00c0\2\u0794")
        buf.write("\u0796\5\u013e\u00a0\2\u0795\u0794\3\2\2\2\u0795\u0796")
        buf.write("\3\2\2\2\u0796\u0797\3\2\2\2\u0797\u0798\7$\2\2\u0798")
        buf.write("\u013b\3\2\2\2\u0799\u079a\7\u00c1\2\2\u079a\u079b\7\23")
        buf.write("\2\2\u079b\u079c\t\20\2\2\u079c\u013d\3\2\2\2\u079d\u079e")
        buf.write("\7&\2\2\u079e\u07a3\5\u0140\u00a1\2\u079f\u07a0\7\13\2")
        buf.write("\2\u07a0\u07a2\5\u0140\u00a1\2\u07a1\u079f\3\2\2\2\u07a2")
        buf.write("\u07a5\3\2\2\2\u07a3\u07a1\3\2\2\2\u07a3\u07a4\3\2\2\2")
        buf.write("\u07a4\u013f\3\2\2\2\u07a5\u07a3\3\2\2\2\u07a6\u07a7\5")
        buf.write("\u0208\u0105\2\u07a7\u07a8\7\23\2\2\u07a8\u07a9\5\u017e")
        buf.write("\u00c0\2\u07a9\u0141\3\2\2\2\u07aa\u07ae\7\u00e3\2\2\u07ab")
        buf.write("\u07ad\5\u0172\u00ba\2\u07ac\u07ab\3\2\2\2\u07ad\u07b0")
        buf.write("\3\2\2\2\u07ae\u07ac\3\2\2\2\u07ae\u07af\3\2\2\2\u07af")
        buf.write("\u07b2\3\2\2\2\u07b0\u07ae\3\2\2\2\u07b1\u07b3\5\u01ce")
        buf.write("\u00e8\2\u07b2\u07b1\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3")
        buf.write("\u07b5\3\2\2\2\u07b4\u07b6\5\u0146\u00a4\2\u07b5\u07b4")
        buf.write("\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6\u07ba\3\2\2\2\u07b7")
        buf.write("\u07bb\5\u017e\u00c0\2\u07b8\u07bb\5\u01c8\u00e5\2\u07b9")
        buf.write("\u07bb\5\u0144\u00a3\2\u07ba\u07b7\3\2\2\2\u07ba\u07b8")
        buf.write("\3\2\2\2\u07ba\u07b9\3\2\2\2\u07bb\u0143\3\2\2\2\u07bc")
        buf.write("\u07bd\7\3\2\2\u07bd\u07be\7-\2\2\u07be\u07bf\5\u017e")
        buf.write("\u00c0\2\u07bf\u0145\3\2\2\2\u07c0\u07c1\7\u0084\2\2\u07c1")
        buf.write("\u07c2\7!\2\2\u07c2\u07c7\5\u0092J\2\u07c3\u07c4\7\13")
        buf.write("\2\2\u07c4\u07c6\5\u0092J\2\u07c5\u07c3\3\2\2\2\u07c6")
        buf.write("\u07c9\3\2\2\2\u07c7\u07c5\3\2\2\2\u07c7\u07c8\3\2\2\2")
        buf.write("\u07c8\u07ca\3\2\2\2\u07c9\u07c7\3\2\2\2\u07ca\u07cb\7")
        buf.write("\n\2\2\u07cb\u0147\3\2\2\2\u07cc\u07d0\7\u00e4\2\2\u07cd")
        buf.write("\u07cf\5\u0170\u00b9\2\u07ce\u07cd\3\2\2\2\u07cf\u07d2")
        buf.write("\3\2\2\2\u07d0\u07ce\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1")
        buf.write("\u07d3\3\2\2\2\u07d2\u07d0\3\2\2\2\u07d3\u07d8\5\u0176")
        buf.write("\u00bc\2\u07d4\u07d5\7\13\2\2\u07d5\u07d7\5\u0176\u00bc")
        buf.write("\2\u07d6\u07d4\3\2\2\2\u07d7\u07da\3\2\2\2\u07d8\u07d6")
        buf.write("\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u0149\3\2\2\2\u07da")
        buf.write("\u07d8\3\2\2\2\u07db\u07df\t\21\2\2\u07dc\u07de\5\u0172")
        buf.write("\u00ba\2\u07dd\u07dc\3\2\2\2\u07de\u07e1\3\2\2\2\u07df")
        buf.write("\u07dd\3\2\2\2\u07df\u07e0\3\2\2\2\u07e0\u07e2\3\2\2\2")
        buf.write("\u07e1\u07df\3\2\2\2\u07e2\u07e3\7;\2\2\u07e3\u07e8\5")
        buf.write("\u014c\u00a7\2\u07e4\u07e5\7\13\2\2\u07e5\u07e7\5\u014c")
        buf.write("\u00a7\2\u07e6\u07e4\3\2\2\2\u07e7\u07ea\3\2\2\2\u07e8")
        buf.write("\u07e6\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u014b\3\2\2\2")
        buf.write("\u07ea\u07e8\3\2\2\2\u07eb\u07ec\5\u0176\u00bc\2\u07ec")
        buf.write("\u07ed\5\u014e\u00a8\2\u07ed\u014d\3\2\2\2\u07ee\u07f0")
        buf.write("\t\22\2\2\u07ef\u07ee\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0")
        buf.write("\u07f3\3\2\2\2\u07f1\u07f2\7\u00ba\2\2\u07f2\u07f4\t\23")
        buf.write("\2\2\u07f3\u07f1\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u014f")
        buf.write("\3\2\2\2\u07f5\u07f9\7\u00f0\2\2\u07f6\u07f8\5\u0170\u00b9")
        buf.write("\2\u07f7\u07f6\3\2\2\2\u07f8\u07fb\3\2\2\2\u07f9\u07f7")
        buf.write("\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u0804\3\2\2\2\u07fb")
        buf.write("\u07f9\3\2\2\2\u07fc\u0801\5\u0176\u00bc\2\u07fd\u07fe")
        buf.write("\7\13\2\2\u07fe\u0800\5\u0176\u00bc\2\u07ff\u07fd\3\2")
        buf.write("\2\2\u0800\u0803\3\2\2\2\u0801\u07ff\3\2\2\2\u0801\u0802")
        buf.write("\3\2\2\2\u0802\u0805\3\2\2\2\u0803\u0801\3\2\2\2\u0804")
        buf.write("\u07fc\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u0807\3\2\2\2")
        buf.write("\u0806\u0808\5\u0152\u00aa\2\u0807\u0806\3\2\2\2\u0807")
        buf.write("\u0808\3\2\2\2\u0808\u0151\3\2\2\2\u0809\u080a\7;\2\2")
        buf.write("\u080a\u080b\5\u0176\u00bc\2\u080b\u080c\7\13\2\2\u080c")
        buf.write("\u080d\5\u0176\u00bc\2\u080d\u080f\3\2\2\2\u080e\u0810")
        buf.write("\5\u0154\u00ab\2\u080f\u080e\3\2\2\2\u080f\u0810\3\2\2")
        buf.write("\2\u0810\u0153\3\2\2\2\u0811\u0812\79\2\2\u0812\u0813")
        buf.write("\7\23\2\2\u0813\u0814\5\u022c\u0117\2\u0814\u0155\3\2")
        buf.write("\2\2\u0815\u0819\t\24\2\2\u0816\u0818\5\u0170\u00b9\2")
        buf.write("\u0817\u0816\3\2\2\2\u0818\u081b\3\2\2\2\u0819\u0817\3")
        buf.write("\2\2\2\u0819\u081a\3\2\2\2\u081a\u081c\3\2\2\2\u081b\u0819")
        buf.write("\3\2\2\2\u081c\u081d\5\u0176\u00bc\2\u081d\u0157\3\2\2")
        buf.write("\2\u081e\u0822\7\u00f9\2\2\u081f\u0821\5\u0170\u00b9\2")
        buf.write("\u0820\u081f\3\2\2\2\u0821\u0824\3\2\2\2\u0822\u0820\3")
        buf.write("\2\2\2\u0822\u0823\3\2\2\2\u0823\u0825\3\2\2\2\u0824\u0822")
        buf.write("\3\2\2\2\u0825\u0826\5\u0176\u00bc\2\u0826\u0827\7;\2")
        buf.write("\2\u0827\u0828\5\u014c\u00a7\2\u0828\u0159\3\2\2\2\u0829")
        buf.write("\u082a\7\u00fa\2\2\u082a\u082b\5\u0176\u00bc\2\u082b\u082c")
        buf.write("\7\u00bb\2\2\u082c\u082e\5\u0176\u00bc\2\u082d\u082f\5")
        buf.write("\u015c\u00af\2\u082e\u082d\3\2\2\2\u082e\u082f\3\2\2\2")
        buf.write("\u082f\u015b\3\2\2\2\u0830\u0831\7;\2\2\u0831\u0832\5")
        buf.write("\u014c\u00a7\2\u0832\u015d\3\2\2\2\u0833\u0838\5\u0160")
        buf.write("\u00b1\2\u0834\u0835\7\13\2\2\u0835\u0837\5\u0160\u00b1")
        buf.write("\2\u0836\u0834\3\2\2\2\u0837\u083a\3\2\2\2\u0838\u0836")
        buf.write("\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u015f\3\2\2\2\u083a")
        buf.write("\u0838\3\2\2\2\u083b\u083d\7\u00fb\2\2\u083c\u083e\5\u0176")
        buf.write("\u00bc\2\u083d\u083c\3\2\2\2\u083d\u083e\3\2\2\2\u083e")
        buf.write("\u083f\3\2\2\2\u083f\u0840\7\u00bb\2\2\u0840\u0842\5\u0176")
        buf.write("\u00bc\2\u0841\u0843\5\u0162\u00b2\2\u0842\u0841\3\2\2")
        buf.write("\2\u0842\u0843\3\2\2\2\u0843\u0844\3\2\2\2\u0844\u0845")
        buf.write("\7;\2\2\u0845\u0846\5\u014c\u00a7\2\u0846\u0161\3\2\2")
        buf.write("\2\u0847\u0848\7\u0106\2\2\u0848\u0849\7\u00c0\2\2\u0849")
        buf.write("\u084a\7\23\2\2\u084a\u084b\5\u0176\u00bc\2\u084b\u0163")
        buf.write("\3\2\2\2\u084c\u0850\7\u0100\2\2\u084d\u084f\5\u0172\u00ba")
        buf.write("\2\u084e\u084d\3\2\2\2\u084f\u0852\3\2\2\2\u0850\u084e")
        buf.write("\3\2\2\2\u0850\u0851\3\2\2\2\u0851\u0853\3\2\2\2\u0852")
        buf.write("\u0850\3\2\2\2\u0853\u0858\5\u0166\u00b4\2\u0854\u0855")
        buf.write("\7\13\2\2\u0855\u0857\5\u0166\u00b4\2\u0856\u0854\3\2")
        buf.write("\2\2\u0857\u085a\3\2\2\2\u0858\u0856\3\2\2\2\u0858\u0859")
        buf.write("\3\2\2\2\u0859\u0165\3\2\2\2\u085a\u0858\3\2\2\2\u085b")
        buf.write("\u085f\5\u01e8\u00f5\2\u085c\u085f\5\u01e2\u00f2\2\u085d")
        buf.write("\u085f\5\u01d0\u00e9\2\u085e\u085b\3\2\2\2\u085e\u085c")
        buf.write("\3\2\2\2\u085e\u085d\3\2\2\2\u085f\u0167\3\2\2\2\u0860")
        buf.write("\u0864\t\25\2\2\u0861\u0863\5\u0170\u00b9\2\u0862\u0861")
        buf.write("\3\2\2\2\u0863\u0866\3\2\2\2\u0864\u0862\3\2\2\2\u0864")
        buf.write("\u0865\3\2\2\2\u0865\u0867\3\2\2\2\u0866\u0864\3\2\2\2")
        buf.write("\u0867\u0868\5\u0176\u00bc\2\u0868\u0169\3\2\2\2\u0869")
        buf.write("\u086c\5R*\2\u086a\u086c\5\u016c\u00b7\2\u086b\u0869\3")
        buf.write("\2\2\2\u086b\u086a\3\2\2\2\u086c\u016b\3\2\2\2\u086d\u0871")
        buf.write("\5\u01ee\u00f8\2\u086e\u0870\5\u016e\u00b8\2\u086f\u086e")
        buf.write("\3\2\2\2\u0870\u0873\3\2\2\2\u0871\u086f\3\2\2\2\u0871")
        buf.write("\u0872\3\2\2\2\u0872\u016d\3\2\2\2\u0873\u0871\3\2\2\2")
        buf.write("\u0874\u0875\7\5\2\2\u0875\u0876\5V,\2\u0876\u016f\3\2")
        buf.write("\2\2\u0877\u0878\t\26\2\2\u0878\u087b\7\23\2\2\u0879\u087c")
        buf.write("\5\u021a\u010e\2\u087a\u087c\5\u0228\u0115\2\u087b\u0879")
        buf.write("\3\2\2\2\u087b\u087a\3\2\2\2\u087c\u0171\3\2\2\2\u087d")
        buf.write("\u087e\t\27\2\2\u087e\u0881\7\23\2\2\u087f\u0882\5\u021a")
        buf.write("\u010e\2\u0880\u0882\5\u0228\u0115\2\u0881\u087f\3\2\2")
        buf.write("\2\u0881\u0880\3\2\2\2\u0882\u0173\3\2\2\2\u0883\u0884")
        buf.write("\7\u013e\2\2\u0884\u0887\7\23\2\2\u0885\u0888\5\u021a")
        buf.write("\u010e\2\u0886\u0888\5\u0228\u0115\2\u0887\u0885\3\2\2")
        buf.write("\2\u0887\u0886\3\2\2\2\u0888\u0175\3\2\2\2\u0889\u088b")
        buf.write("\5\u0178\u00bd\2\u088a\u0889\3\2\2\2\u088a\u088b\3\2\2")
        buf.write("\2\u088b\u088c\3\2\2\2\u088c\u088d\5\u017e\u00c0\2\u088d")
        buf.write("\u0177\3\2\2\2\u088e\u0891\5\u021e\u0110\2\u088f\u0891")
        buf.write("\5\u017a\u00be\2\u0890\u088e\3\2\2\2\u0890\u088f\3\2\2")
        buf.write("\2\u0891\u0892\3\2\2\2\u0892\u0893\7\23\2\2\u0893\u0179")
        buf.write("\3\2\2\2\u0894\u0895\7!\2\2\u0895\u089a\5\u021e\u0110")
        buf.write("\2\u0896\u0897\7\13\2\2\u0897\u0899\5\u021e\u0110\2\u0898")
        buf.write("\u0896\3\2\2\2\u0899\u089c\3\2\2\2\u089a\u0898\3\2\2\2")
        buf.write("\u089a\u089b\3\2\2\2\u089b\u089d\3\2\2\2\u089c\u089a\3")
        buf.write("\2\2\2\u089d\u089e\7\n\2\2\u089e\u017b\3\2\2\2\u089f\u08a0")
        buf.write("\5\u020a\u0106\2\u08a0\u08a1\7\21\2\2\u08a1\u08a2\5\u01c0")
        buf.write("\u00e1\2\u08a2\u017d\3\2\2\2\u08a3\u08a4\5\u0180\u00c1")
        buf.write("\2\u08a4\u017f\3\2\2\2\u08a5\u08a9\5\u0184\u00c3\2\u08a6")
        buf.write("\u08a8\5\u0182\u00c2\2\u08a7\u08a6\3\2\2\2\u08a8\u08ab")
        buf.write("\3\2\2\2\u08a9\u08a7\3\2\2\2\u08a9\u08aa\3\2\2\2\u08aa")
        buf.write("\u0181\3\2\2\2\u08ab\u08a9\3\2\2\2\u08ac\u08ad\7\u00be")
        buf.write("\2\2\u08ad\u08ae\5\u0184\u00c3\2\u08ae\u0183\3\2\2\2\u08af")
        buf.write("\u08b3\5\u0188\u00c5\2\u08b0\u08b2\5\u0186\u00c4\2\u08b1")
        buf.write("\u08b0\3\2\2\2\u08b2\u08b5\3\2\2\2\u08b3\u08b1\3\2\2\2")
        buf.write("\u08b3\u08b4\3\2\2\2\u08b4\u0185\3\2\2\2\u08b5\u08b3\3")
        buf.write("\2\2\2\u08b6\u08b7\7-\2\2\u08b7\u08b8\5\u0188\u00c5\2")
        buf.write("\u08b8\u0187\3\2\2\2\u08b9\u08bf\5\u0192\u00ca\2\u08ba")
        buf.write("\u08bf\5\u018a\u00c6\2\u08bb\u08bf\5\u018c\u00c7\2\u08bc")
        buf.write("\u08bf\5\u018e\u00c8\2\u08bd\u08bf\5\u0190\u00c9\2\u08be")
        buf.write("\u08b9\3\2\2\2\u08be\u08ba\3\2\2\2\u08be\u08bb\3\2\2\2")
        buf.write("\u08be\u08bc\3\2\2\2\u08be\u08bd\3\2\2\2\u08bf\u0189\3")
        buf.write("\2\2\2\u08c0\u08c1\5\u0192\u00ca\2\u08c1\u08c2\t\30\2")
        buf.write("\2\u08c2\u08c3\5\u0192\u00ca\2\u08c3\u018b\3\2\2\2\u08c4")
        buf.write("\u08c5\5\u0192\u00ca\2\u08c5\u08c6\t\31\2\2\u08c6\u08c7")
        buf.write("\7!\2\2\u08c7\u08cc\5\u01a6\u00d4\2\u08c8\u08c9\7\13\2")
        buf.write("\2\u08c9\u08cb\5\u01a6\u00d4\2\u08ca\u08c8\3\2\2\2\u08cb")
        buf.write("\u08ce\3\2\2\2\u08cc\u08ca\3\2\2\2\u08cc\u08cd\3\2\2\2")
        buf.write("\u08cd\u08cf\3\2\2\2\u08ce\u08cc\3\2\2\2\u08cf\u08d0\7")
        buf.write("\n\2\2\u08d0\u018d\3\2\2\2\u08d1\u08d2\5\u0192\u00ca\2")
        buf.write("\u08d2\u08d3\t\32\2\2\u08d3\u08d4\7!\2\2\u08d4\u08d5\5")
        buf.write("\u01a6\u00d4\2\u08d5\u08d6\7\22\2\2\u08d6\u08d7\5\u01a6")
        buf.write("\u00d4\2\u08d7\u08d8\7\n\2\2\u08d8\u018f\3\2\2\2\u08d9")
        buf.write("\u08da\7\3\2\2\u08da\u08db\7\24\2\2\u08db\u08dc\5\u0192")
        buf.write("\u00ca\2\u08dc\u0191\3\2\2\2\u08dd\u08e0\5\u0194\u00cb")
        buf.write("\2\u08de\u08df\t\33\2\2\u08df\u08e1\5\u0194\u00cb\2\u08e0")
        buf.write("\u08de\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u0193\3\2\2\2")
        buf.write("\u08e2\u08e6\5\u0198\u00cd\2\u08e3\u08e5\5\u0196\u00cc")
        buf.write("\2\u08e4\u08e3\3\2\2\2\u08e5\u08e8\3\2\2\2\u08e6\u08e4")
        buf.write("\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u0195\3\2\2\2\u08e8")
        buf.write("\u08e6\3\2\2\2\u08e9\u08ea\t\34\2\2\u08ea\u08eb\5\u0198")
        buf.write("\u00cd\2\u08eb\u0197\3\2\2\2\u08ec\u08f0\5\u019c\u00cf")
        buf.write("\2\u08ed\u08ef\5\u019a\u00ce\2\u08ee\u08ed\3\2\2\2\u08ef")
        buf.write("\u08f2\3\2\2\2\u08f0\u08ee\3\2\2\2\u08f0\u08f1\3\2\2\2")
        buf.write("\u08f1\u0199\3\2\2\2\u08f2\u08f0\3\2\2\2\u08f3\u08f4\t")
        buf.write("\35\2\2\u08f4\u08f5\5\u019c\u00cf\2\u08f5\u019b\3\2\2")
        buf.write("\2\u08f6\u08f9\5\u019e\u00d0\2\u08f7\u08f9\5\u01a4\u00d3")
        buf.write("\2\u08f8\u08f6\3\2\2\2\u08f8\u08f7\3\2\2\2\u08f9\u019d")
        buf.write("\3\2\2\2\u08fa\u08fe\5\u01a6\u00d4\2\u08fb\u08fd\5\u01a0")
        buf.write("\u00d1\2\u08fc\u08fb\3\2\2\2\u08fd\u0900\3\2\2\2\u08fe")
        buf.write("\u08fc\3\2\2\2\u08fe\u08ff\3\2\2\2\u08ff\u019f\3\2\2\2")
        buf.write("\u0900\u08fe\3\2\2\2\u0901\u0904\5\u01a2\u00d2\2\u0902")
        buf.write("\u0904\7\f\2\2\u0903\u0901\3\2\2\2\u0903\u0902\3\2\2\2")
        buf.write("\u0904\u0905\3\2\2\2\u0905\u0906\5\u01a6\u00d4\2\u0906")
        buf.write("\u01a1\3\2\2\2\u0907\u0908\t\36\2\2\u0908\u01a3\3\2\2")
        buf.write("\2\u0909\u090a\7\3\2\2\u090a\u090b\5\u01a2\u00d2\2\u090b")
        buf.write("\u090c\5\u01a6\u00d4\2\u090c\u01a5\3\2\2\2\u090d\u090f")
        buf.write("\t\34\2\2\u090e\u090d\3\2\2\2\u090e\u090f\3\2\2\2\u090f")
        buf.write("\u0910\3\2\2\2\u0910\u0911\5\u01a8\u00d5\2\u0911\u01a7")
        buf.write("\3\2\2\2\u0912\u0916\5\u01aa\u00d6\2\u0913\u0916\5\u01ac")
        buf.write("\u00d7\2\u0914\u0916\5\u01b8\u00dd\2\u0915\u0912\3\2\2")
        buf.write("\2\u0915\u0913\3\2\2\2\u0915\u0914\3\2\2\2\u0916\u01a9")
        buf.write("\3\2\2\2\u0917\u091b\5\u01bc\u00df\2\u0918\u091b\5\u01ca")
        buf.write("\u00e6\2\u0919\u091b\5\u01b6\u00dc\2\u091a\u0917\3\2\2")
        buf.write("\2\u091a\u0918\3\2\2\2\u091a\u0919\3\2\2\2\u091b\u01ab")
        buf.write("\3\2\2\2\u091c\u091e\5\u01aa\u00d6\2\u091d\u091f\5\u01ae")
        buf.write("\u00d8\2\u091e\u091d\3\2\2\2\u091f\u0920\3\2\2\2\u0920")
        buf.write("\u091e\3\2\2\2\u0920\u0921\3\2\2\2\u0921\u01ad\3\2\2\2")
        buf.write("\u0922\u0926\5\u01b0\u00d9\2\u0923\u0926\5\u01b2\u00da")
        buf.write("\2\u0924\u0926\5\u01b4\u00db\2\u0925\u0922\3\2\2\2\u0925")
        buf.write("\u0923\3\2\2\2\u0925\u0924\3\2\2\2\u0926\u01af\3\2\2\2")
        buf.write("\u0927\u0928\7\21\2\2\u0928\u0929\5\u021c\u010f\2\u0929")
        buf.write("\u01b1\3\2\2\2\u092a\u092b\7 \2\2\u092b\u092c\5\u017e")
        buf.write("\u00c0\2\u092c\u092d\7\7\2\2\u092d\u01b3\3\2\2\2\u092e")
        buf.write("\u092f\7\21\2\2\u092f\u0930\7 \2\2\u0930\u0931\5\u017e")
        buf.write("\u00c0\2\u0931\u0932\7\7\2\2\u0932\u01b5\3\2\2\2\u0933")
        buf.write("\u0935\7\u00fc\2\2\u0934\u0936\5\u01ba\u00de\2\u0935\u0934")
        buf.write("\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u0937\3\2\2\2\u0937")
        buf.write("\u0938\7!\2\2\u0938\u0939\5N(\2\u0939\u093a\7\n\2\2\u093a")
        buf.write("\u01b7\3\2\2\2\u093b\u093d\7\u00fd\2\2\u093c\u093e\5\u01ba")
        buf.write("\u00de\2\u093d\u093c\3\2\2\2\u093d\u093e\3\2\2\2\u093e")
        buf.write("\u093f\3\2\2\2\u093f\u0940\7!\2\2\u0940\u0941\5N(\2\u0941")
        buf.write("\u0942\7\n\2\2\u0942\u01b9\3\2\2\2\u0943\u0944\7\u008b")
        buf.write("\2\2\u0944\u0945\7\23\2\2\u0945\u0946\7\u00a5\2\2\u0946")
        buf.write("\u01bb\3\2\2\2\u0947\u094b\5\u01c0\u00e1\2\u0948\u094a")
        buf.write("\5\u01be\u00e0\2\u0949\u0948\3\2\2\2\u094a\u094d\3\2\2")
        buf.write("\2\u094b\u0949\3\2\2\2\u094b\u094c\3\2\2\2\u094c\u01bd")
        buf.write("\3\2\2\2\u094d\u094b\3\2\2\2\u094e\u094f\7\21\2\2\u094f")
        buf.write("\u0950\5\u01c0\u00e1\2\u0950\u01bf\3\2\2\2\u0951\u0954")
        buf.write("\5\u01c2\u00e2\2\u0952\u0954\5\u01c6\u00e4\2\u0953\u0951")
        buf.write("\3\2\2\2\u0953\u0952\3\2\2\2\u0954\u01c1\3\2\2\2\u0955")
        buf.write("\u0956\5\u020a\u0106\2\u0956\u095f\7!\2\2\u0957\u095c")
        buf.write("\5\u01c4\u00e3\2\u0958\u0959\7\13\2\2\u0959\u095b\5\u01c4")
        buf.write("\u00e3\2\u095a\u0958\3\2\2\2\u095b\u095e\3\2\2\2\u095c")
        buf.write("\u095a\3\2\2\2\u095c\u095d\3\2\2\2\u095d\u0960\3\2\2\2")
        buf.write("\u095e\u095c\3\2\2\2\u095f\u0957\3\2\2\2\u095f\u0960\3")
        buf.write("\2\2\2\u0960\u0961\3\2\2\2\u0961\u0962\7\n\2\2\u0962\u01c3")
        buf.write("\3\2\2\2\u0963\u0966\5\u0176\u00bc\2\u0964\u0966\5\u01c8")
        buf.write("\u00e5\2\u0965\u0963\3\2\2\2\u0965\u0964\3\2\2\2\u0966")
        buf.write("\u01c5\3\2\2\2\u0967\u0968\7D\2\2\u0968\u096a\7!\2\2\u0969")
        buf.write("\u096b\5\u0176\u00bc\2\u096a\u0969\3\2\2\2\u096a\u096b")
        buf.write("\3\2\2\2\u096b\u096c\3\2\2\2\u096c\u096d\7\n\2\2\u096d")
        buf.write("\u01c7\3\2\2\2\u096e\u096f\7\3\2\2\u096f\u01c9\3\2\2\2")
        buf.write("\u0970\u0978\5\u022a\u0116\2\u0971\u0978\5\u01cc\u00e7")
        buf.write("\2\u0972\u0978\5\u01f0\u00f9\2\u0973\u0978\5\u01f6\u00fc")
        buf.write("\2\u0974\u0978\5\u01ee\u00f8\2\u0975\u0978\5\u01fc\u00ff")
        buf.write("\2\u0976\u0978\5\u01d0\u00e9\2\u0977\u0970\3\2\2\2\u0977")
        buf.write("\u0971\3\2\2\2\u0977\u0972\3\2\2\2\u0977\u0973\3\2\2\2")
        buf.write("\u0977\u0974\3\2\2\2\u0977\u0975\3\2\2\2\u0977\u0976\3")
        buf.write("\2\2\2\u0978\u01cb\3\2\2\2\u0979\u097b\5\u020a\u0106\2")
        buf.write("\u097a\u097c\5\u01ce\u00e8\2\u097b\u097a\3\2\2\2\u097b")
        buf.write("\u097c\3\2\2\2\u097c\u01cd\3\2\2\2\u097d\u097e\7H\2\2")
        buf.write("\u097e\u097f\7\23\2\2\u097f\u0980\t\37\2\2\u0980\u01cf")
        buf.write("\3\2\2\2\u0981\u0982\7!\2\2\u0982\u0983\5L\'\2\u0983\u0984")
        buf.write("\7\n\2\2\u0984\u01d1\3\2\2\2\u0985\u0986\7\u00d8\2\2\u0986")
        buf.write("\u0987\5\u020a\u0106\2\u0987\u0988\7a\2\2\u0988\u0989")
        buf.write("\5\u017e\u00c0\2\u0989\u098a\7\u00f8\2\2\u098a\u098b\5")
        buf.write("\u017e\u00c0\2\u098b\u098c\7\u00ef\2\2\u098c\u098d\5\u017e")
        buf.write("\u00c0\2\u098d\u01d3\3\2\2\2\u098e\u0991\5\u01e2\u00f2")
        buf.write("\2\u098f\u0991\5\u01d6\u00ec\2\u0990\u098e\3\2\2\2\u0990")
        buf.write("\u098f\3\2\2\2\u0991\u01d5\3\2\2\2\u0992\u0994\5\u01e2")
        buf.write("\u00f2\2\u0993\u0995\5\u01d8\u00ed\2\u0994\u0993\3\2\2")
        buf.write("\2\u0995\u0996\3\2\2\2\u0996\u0994\3\2\2\2\u0996\u0997")
        buf.write("\3\2\2\2\u0997\u01d7\3\2\2\2\u0998\u099c\5\u01da\u00ee")
        buf.write("\2\u0999\u099c\5\u01dc\u00ef\2\u099a\u099c\5\u01de\u00f0")
        buf.write("\2\u099b\u0998\3\2\2\2\u099b\u0999\3\2\2\2\u099b\u099a")
        buf.write("\3\2\2\2\u099c\u01d9\3\2\2\2\u099d\u099e\7\21\2\2\u099e")
        buf.write("\u099f\5\u01e0\u00f1\2\u099f\u01db\3\2\2\2\u09a0\u09a1")
        buf.write("\7 \2\2\u09a1\u09a2\5\u017e\u00c0\2\u09a2\u09a3\7\7\2")
        buf.write("\2\u09a3\u01dd\3\2\2\2\u09a4\u09a5\7\21\2\2\u09a5\u09a6")
        buf.write("\7 \2\2\u09a6\u09a7\5\u017e\u00c0\2\u09a7\u09a8\7\7\2")
        buf.write("\2\u09a8\u01df\3\2\2\2\u09a9\u09ad\5\u01e4\u00f3\2\u09aa")
        buf.write("\u09ad\5\u021e\u0110\2\u09ab\u09ad\5\u01e6\u00f4\2\u09ac")
        buf.write("\u09a9\3\2\2\2\u09ac\u09aa\3\2\2\2\u09ac\u09ab\3\2\2\2")
        buf.write("\u09ad\u01e1\3\2\2\2\u09ae\u09af\5\u01e0\u00f1\2\u09af")
        buf.write("\u01e3\3\2\2\2\u09b0\u09b1\7\4\2\2\u09b1\u01e5\3\2\2\2")
        buf.write("\u09b2\u09b3\t \2\2\u09b3\u01e7\3\2\2\2\u09b4\u09b8\5")
        buf.write("\u020e\u0108\2\u09b5\u09b8\5\u01bc\u00df\2\u09b6\u09b8")
        buf.write("\5\u01ea\u00f6\2\u09b7\u09b4\3\2\2\2\u09b7\u09b5\3\2\2")
        buf.write("\2\u09b7\u09b6\3\2\2\2\u09b8\u01e9\3\2\2\2\u09b9\u09ba")
        buf.write("\5\u01bc\u00df\2\u09ba\u09bb\7\21\2\2\u09bb\u09bc\5\u01ec")
        buf.write("\u00f7\2\u09bc\u01eb\3\2\2\2\u09bd\u09c0\5\u0222\u0112")
        buf.write("\2\u09be\u09c0\5\u01e0\u00f1\2\u09bf\u09bd\3\2\2\2\u09bf")
        buf.write("\u09be\3\2\2\2\u09c0\u01ed\3\2\2\2\u09c1\u09c2\7C\2\2")
        buf.write("\u09c2\u09c3\7\u013d\2\2\u09c3\u09c4\5\u01f2\u00fa\2\u09c4")
        buf.write("\u01ef\3\2\2\2\u09c5\u09c9\7I\2\2\u09c6\u09c8\5\u0172")
        buf.write("\u00ba\2\u09c7\u09c6\3\2\2\2\u09c8\u09cb\3\2\2\2\u09c9")
        buf.write("\u09c7\3\2\2\2\u09c9\u09ca\3\2\2\2\u09ca\u09cc\3\2\2\2")
        buf.write("\u09cb\u09c9\3\2\2\2\u09cc\u09cd\5\u01f2\u00fa\2\u09cd")
        buf.write("\u09cf\7 \2\2\u09ce\u09d0\5\u0228\u0115\2\u09cf\u09ce")
        buf.write("\3\2\2\2\u09cf\u09d0\3\2\2\2\u09d0\u09d5\3\2\2\2\u09d1")
        buf.write("\u09d2\7\13\2\2\u09d2\u09d4\5\u0228\u0115\2\u09d3\u09d1")
        buf.write("\3\2\2\2\u09d4\u09d7\3\2\2\2\u09d5\u09d3\3\2\2\2\u09d5")
        buf.write("\u09d6\3\2\2\2\u09d6\u09d9\3\2\2\2\u09d7\u09d5\3\2\2\2")
        buf.write("\u09d8\u09da\7\13\2\2\u09d9\u09d8\3\2\2\2\u09d9\u09da")
        buf.write("\3\2\2\2\u09da\u09db\3\2\2\2\u09db\u09dc\7\7\2\2\u09dc")
        buf.write("\u01f1\3\2\2\2\u09dd\u09df\7!\2\2\u09de\u09e0\5\u01f4")
        buf.write("\u00fb\2\u09df\u09de\3\2\2\2\u09df\u09e0\3\2\2\2\u09e0")
        buf.write("\u09e5\3\2\2\2\u09e1\u09e2\7\13\2\2\u09e2\u09e4\5\u01f4")
        buf.write("\u00fb\2\u09e3\u09e1\3\2\2\2\u09e4\u09e7\3\2\2\2\u09e5")
        buf.write("\u09e3\3\2\2\2\u09e5\u09e6\3\2\2\2\u09e6\u09e9\3\2\2\2")
        buf.write("\u09e7\u09e5\3\2\2\2\u09e8\u09ea\7\13\2\2\u09e9\u09e8")
        buf.write("\3\2\2\2\u09e9\u09ea\3\2\2\2\u09ea\u09eb\3\2\2\2\u09eb")
        buf.write("\u09ec\7\n\2\2\u09ec\u01f3\3\2\2\2\u09ed\u09ee\5\u0208")
        buf.write("\u0105\2\u09ee\u09ef\7\f\2\2\u09ef\u09f0\5\u0204\u0103")
        buf.write("\2\u09f0\u01f5\3\2\2\2\u09f1\u09f5\t!\2\2\u09f2\u09f4")
        buf.write("\5\u0172\u00ba\2\u09f3\u09f2\3\2\2\2\u09f4\u09f7\3\2\2")
        buf.write("\2\u09f5\u09f3\3\2\2\2\u09f5\u09f6\3\2\2\2\u09f6\u09f8")
        buf.write("\3\2\2\2\u09f7\u09f5\3\2\2\2\u09f8\u09f9\5\u01f2\u00fa")
        buf.write("\2\u09f9\u09fa\7 \2\2\u09fa\u09ff\5\u0248\u0125\2\u09fb")
        buf.write("\u09fc\7\13\2\2\u09fc\u09fe\5\u0248\u0125\2\u09fd\u09fb")
        buf.write("\3\2\2\2\u09fe\u0a01\3\2\2\2\u09ff\u09fd\3\2\2\2\u09ff")
        buf.write("\u0a00\3\2\2\2\u0a00\u0a02\3\2\2\2\u0a01\u09ff\3\2\2\2")
        buf.write("\u0a02\u0a04\7\7\2\2\u0a03\u0a05\5\u01f8\u00fd\2\u0a04")
        buf.write("\u0a03\3\2\2\2\u0a04\u0a05\3\2\2\2\u0a05\u01f7\3\2\2\2")
        buf.write("\u0a06\u0a07\7\u0106\2\2\u0a07\u0a13\7!\2\2\u0a08\u0a0d")
        buf.write("\5\u01fa\u00fe\2\u0a09\u0a0a\7\13\2\2\u0a0a\u0a0c\5\u01fa")
        buf.write("\u00fe\2\u0a0b\u0a09\3\2\2\2\u0a0c\u0a0f\3\2\2\2\u0a0d")
        buf.write("\u0a0b\3\2\2\2\u0a0d\u0a0e\3\2\2\2\u0a0e\u0a11\3\2\2\2")
        buf.write("\u0a0f\u0a0d\3\2\2\2\u0a10\u0a12\7\13\2\2\u0a11\u0a10")
        buf.write("\3\2\2\2\u0a11\u0a12\3\2\2\2\u0a12\u0a14\3\2\2\2\u0a13")
        buf.write("\u0a08\3\2\2\2\u0a13\u0a14\3\2\2\2\u0a14\u0a15\3\2\2\2")
        buf.write("\u0a15\u0a16\7\n\2\2\u0a16\u01f9\3\2\2\2\u0a17\u0a18\5")
        buf.write("\u0208\u0105\2\u0a18\u0a1c\7\23\2\2\u0a19\u0a1d\5\u0248")
        buf.write("\u0125\2\u0a1a\u0a1d\t\"\2\2\u0a1b\u0a1d\5\u0208\u0105")
        buf.write("\2\u0a1c\u0a19\3\2\2\2\u0a1c\u0a1a\3\2\2\2\u0a1c\u0a1b")
        buf.write("\3\2\2\2\u0a1d\u01fb\3\2\2\2\u0a1e\u0a1f\7\u009e\2\2\u0a1f")
        buf.write("\u0a20\7!\2\2\u0a20\u0a21\5\u0248\u0125\2\u0a21\u0a22")
        buf.write("\7\n\2\2\u0a22\u0a23\5\u01fe\u0100\2\u0a23\u0a24\5\u0200")
        buf.write("\u0101\2\u0a24\u0a25\5\u0202\u0102\2\u0a25\u01fd\3\2\2")
        buf.write("\2\u0a26\u0a27\7\67\2\2\u0a27\u0a28\7!\2\2\u0a28\u0a29")
        buf.write("\5L\'\2\u0a29\u0a2a\7\n\2\2\u0a2a\u01ff\3\2\2\2\u0a2b")
        buf.write("\u0a2c\7M\2\2\u0a2c\u0a2d\7!\2\2\u0a2d\u0a2e\5L\'\2\u0a2e")
        buf.write("\u0a2f\7\n\2\2\u0a2f\u0201\3\2\2\2\u0a30\u0a31\7*\2\2")
        buf.write("\u0a31\u0a32\7!\2\2\u0a32\u0a33\5\u0150\u00a9\2\u0a33")
        buf.write("\u0a34\7\n\2\2\u0a34\u0203\3\2\2\2\u0a35\u0a36\t#\2\2")
        buf.write("\u0a36\u0205\3\2\2\2\u0a37\u0a38\t$\2\2\u0a38\u0207\3")
        buf.write("\2\2\2\u0a39\u0a3a\5\u021e\u0110\2\u0a3a\u0209\3\2\2\2")
        buf.write("\u0a3b\u0a3c\5\u021c\u010f\2\u0a3c\u020b\3\2\2\2\u0a3d")
        buf.write("\u0a3e\5\u021e\u0110\2\u0a3e\u020d\3\2\2\2\u0a3f\u0a40")
        buf.write("\5\u0222\u0112\2\u0a40\u020f\3\2\2\2\u0a41\u0a44\5\u020a")
        buf.write("\u0106\2\u0a42\u0a44\5\u020e\u0108\2\u0a43\u0a41\3\2\2")
        buf.write("\2\u0a43\u0a42\3\2\2\2\u0a44\u0211\3\2\2\2\u0a45\u0a46")
        buf.write("\7\u013e\2\2\u0a46\u0213\3\2\2\2\u0a47\u0a48\t%\2\2\u0a48")
        buf.write("\u0215\3\2\2\2\u0a49\u0a4a\t&\2\2\u0a4a\u0217\3\2\2\2")
        buf.write("\u0a4b\u0a4c\7 \2\2\u0a4c\u0a4d\5\u0248\u0125\2\u0a4d")
        buf.write("\u0a4e\7\7\2\2\u0a4e\u0219\3\2\2\2\u0a4f\u0a52\5\u0212")
        buf.write("\u010a\2\u0a50\u0a52\5\u0214\u010b\2\u0a51\u0a4f\3\2\2")
        buf.write("\2\u0a51\u0a50\3\2\2\2\u0a52\u021b\3\2\2\2\u0a53\u0a57")
        buf.write("\5\u0212\u010a\2\u0a54\u0a57\5\u0214\u010b\2\u0a55\u0a57")
        buf.write("\5\u0218\u010d\2\u0a56\u0a53\3\2\2\2\u0a56\u0a54\3\2\2")
        buf.write("\2\u0a56\u0a55\3\2\2\2\u0a57\u021d\3\2\2\2\u0a58\u0a5d")
        buf.write("\5\u0212\u010a\2\u0a59\u0a5d\5\u0214\u010b\2\u0a5a\u0a5d")
        buf.write("\5\u0216\u010c\2\u0a5b\u0a5d\5\u0218\u010d\2\u0a5c\u0a58")
        buf.write("\3\2\2\2\u0a5c\u0a59\3\2\2\2\u0a5c\u0a5a\3\2\2\2\u0a5c")
        buf.write("\u0a5b\3\2\2\2\u0a5d\u021f\3\2\2\2\u0a5e\u0a62\5\u0212")
        buf.write("\u010a\2\u0a5f\u0a62\5\u0214\u010b\2\u0a60\u0a62\5\u0216")
        buf.write("\u010c\2\u0a61\u0a5e\3\2\2\2\u0a61\u0a5f\3\2\2\2\u0a61")
        buf.write("\u0a60\3\2\2\2\u0a62\u0221\3\2\2\2\u0a63\u0a65\5\u0224")
        buf.write("\u0113\2\u0a64\u0a63\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65")
        buf.write("\u0a66\3\2\2\2\u0a66\u0a6a\7\3\2\2\u0a67\u0a69\5\u0226")
        buf.write("\u0114\2\u0a68\u0a67\3\2\2\2\u0a69\u0a6c\3\2\2\2\u0a6a")
        buf.write("\u0a68\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b\u0223\3\2\2\2")
        buf.write("\u0a6c\u0a6a\3\2\2\2\u0a6d\u0a71\7\u013e\2\2\u0a6e\u0a71")
        buf.write("\5\u0214\u010b\2\u0a6f\u0a71\5\u0216\u010c\2\u0a70\u0a6d")
        buf.write("\3\2\2\2\u0a70\u0a6e\3\2\2\2\u0a70\u0a6f\3\2\2\2\u0a71")
        buf.write("\u0225\3\2\2\2\u0a72\u0a78\7\u013e\2\2\u0a73\u0a78\5\u0214")
        buf.write("\u010b\2\u0a74\u0a78\5\u0216\u010c\2\u0a75\u0a78\7\u0133")
        buf.write("\2\2\u0a76\u0a78\7\3\2\2\u0a77\u0a72\3\2\2\2\u0a77\u0a73")
        buf.write("\3\2\2\2\u0a77\u0a74\3\2\2\2\u0a77\u0a75\3\2\2\2\u0a77")
        buf.write("\u0a76\3\2\2\2\u0a78\u0227\3\2\2\2\u0a79\u0a7c\5\u0230")
        buf.write("\u0119\2\u0a7a\u0a7c\5\u022a\u0116\2\u0a7b\u0a79\3\2\2")
        buf.write("\2\u0a7b\u0a7a\3\2\2\2\u0a7c\u0229\3\2\2\2\u0a7d\u0a89")
        buf.write("\5\u0232\u011a\2\u0a7e\u0a89\5\u0234\u011b\2\u0a7f\u0a89")
        buf.write("\5\u0236\u011c\2\u0a80\u0a89\5\u0238\u011d\2\u0a81\u0a89")
        buf.write("\5\u023a\u011e\2\u0a82\u0a89\5\u023c\u011f\2\u0a83\u0a89")
        buf.write("\5\u023e\u0120\2\u0a84\u0a89\5\u0240\u0121\2\u0a85\u0a89")
        buf.write("\5\u0242\u0122\2\u0a86\u0a89\5\u0248\u0125\2\u0a87\u0a89")
        buf.write("\5\u024a\u0126\2\u0a88\u0a7d\3\2\2\2\u0a88\u0a7e\3\2\2")
        buf.write("\2\u0a88\u0a7f\3\2\2\2\u0a88\u0a80\3\2\2\2\u0a88\u0a81")
        buf.write("\3\2\2\2\u0a88\u0a82\3\2\2\2\u0a88\u0a83\3\2\2\2\u0a88")
        buf.write("\u0a84\3\2\2\2\u0a88\u0a85\3\2\2\2\u0a88\u0a86\3\2\2\2")
        buf.write("\u0a88\u0a87\3\2\2\2\u0a89\u022b\3\2\2\2\u0a8a\u0a92\5")
        buf.write("\u0232\u011a\2\u0a8b\u0a92\5\u0234\u011b\2\u0a8c\u0a92")
        buf.write("\5\u0236\u011c\2\u0a8d\u0a92\5\u0238\u011d\2\u0a8e\u0a92")
        buf.write("\5\u0230\u0119\2\u0a8f\u0a92\5\u023a\u011e\2\u0a90\u0a92")
        buf.write("\5\u023c\u011f\2\u0a91\u0a8a\3\2\2\2\u0a91\u0a8b\3\2\2")
        buf.write("\2\u0a91\u0a8c\3\2\2\2\u0a91\u0a8d\3\2\2\2\u0a91\u0a8e")
        buf.write("\3\2\2\2\u0a91\u0a8f\3\2\2\2\u0a91\u0a90\3\2\2\2\u0a92")
        buf.write("\u022d\3\2\2\2\u0a93\u0a99\5\u0232\u011a\2\u0a94\u0a99")
        buf.write("\5\u0234\u011b\2\u0a95\u0a99\5\u0236\u011c\2\u0a96\u0a99")
        buf.write("\5\u0238\u011d\2\u0a97\u0a99\5\u0230\u0119\2\u0a98\u0a93")
        buf.write("\3\2\2\2\u0a98\u0a94\3\2\2\2\u0a98\u0a95\3\2\2\2\u0a98")
        buf.write("\u0a96\3\2\2\2\u0a98\u0a97\3\2\2\2\u0a99\u022f\3\2\2\2")
        buf.write("\u0a9a\u0a9d\5\u0244\u0123\2\u0a9b\u0a9d\5\u0246\u0124")
        buf.write("\2\u0a9c\u0a9a\3\2\2\2\u0a9c\u0a9b\3\2\2\2\u0a9d\u0231")
        buf.write("\3\2\2\2\u0a9e\u0a9f\7\u0133\2\2\u0a9f\u0233\3\2\2\2\u0aa0")
        buf.write("\u0aa1\7\u0134\2\2\u0aa1\u0235\3\2\2\2\u0aa2\u0aa3\7\u0135")
        buf.write("\2\2\u0aa3\u0237\3\2\2\2\u0aa4\u0aa5\7\u0136\2\2\u0aa5")
        buf.write("\u0239\3\2\2\2\u0aa6\u0aa7\7\u0139\2\2\u0aa7\u023b\3\2")
        buf.write("\2\2\u0aa8\u0aa9\7\u013a\2\2\u0aa9\u023d\3\2\2\2\u0aaa")
        buf.write("\u0aab\7\u0138\2\2\u0aab\u023f\3\2\2\2\u0aac\u0aad\7\u013d")
        buf.write("\2\2\u0aad\u0241\3\2\2\2\u0aae\u0aaf\7\u013b\2\2\u0aaf")
        buf.write("\u0243\3\2\2\2\u0ab0\u0ab1\t\34\2\2\u0ab1\u0ab2\7\u0133")
        buf.write("\2\2\u0ab2\u0245\3\2\2\2\u0ab3\u0ab4\t\34\2\2\u0ab4\u0ab5")
        buf.write("\7\u0135\2\2\u0ab5\u0247\3\2\2\2\u0ab6\u0aba\7\u0137\2")
        buf.write("\2\u0ab7\u0ab9\7\u0137\2\2\u0ab8\u0ab7\3\2\2\2\u0ab9\u0abc")
        buf.write("\3\2\2\2\u0aba\u0ab8\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb")
        buf.write("\u0249\3\2\2\2\u0abc\u0aba\3\2\2\2\u0abd\u0abe\7\u011f")
        buf.write("\2\2\u0abe\u0abf\7!\2\2\u0abf\u0ac0\5\u024c\u0127\2\u0ac0")
        buf.write("\u0ac1\7\n\2\2\u0ac1\u024b\3\2\2\2\u0ac2\u0ace\5\u0252")
        buf.write("\u012a\2\u0ac3\u0ace\5\u0254\u012b\2\u0ac4\u0ace\5\u0256")
        buf.write("\u012c\2\u0ac5\u0ace\5\u0258\u012d\2\u0ac6\u0ace\5\u0260")
        buf.write("\u0131\2\u0ac7\u0ace\5\u025a\u012e\2\u0ac8\u0ace\5\u024e")
        buf.write("\u0128\2\u0ac9\u0ace\5\u0262\u0132\2\u0aca\u0ace\5\u025c")
        buf.write("\u012f\2\u0acb\u0ace\5\u025e\u0130\2\u0acc\u0ace\5\u024a")
        buf.write("\u0126\2\u0acd\u0ac2\3\2\2\2\u0acd\u0ac3\3\2\2\2\u0acd")
        buf.write("\u0ac4\3\2\2\2\u0acd\u0ac5\3\2\2\2\u0acd\u0ac6\3\2\2\2")
        buf.write("\u0acd\u0ac7\3\2\2\2\u0acd\u0ac8\3\2\2\2\u0acd\u0ac9\3")
        buf.write("\2\2\2\u0acd\u0aca\3\2\2\2\u0acd\u0acb\3\2\2\2\u0acd\u0acc")
        buf.write("\3\2\2\2\u0ace\u024d\3\2\2\2\u0acf\u0ad8\7\37\2\2\u0ad0")
        buf.write("\u0ad5\5\u0250\u0129\2\u0ad1\u0ad2\7\13\2\2\u0ad2\u0ad4")
        buf.write("\5\u0250\u0129\2\u0ad3\u0ad1\3\2\2\2\u0ad4\u0ad7\3\2\2")
        buf.write("\2\u0ad5\u0ad3\3\2\2\2\u0ad5\u0ad6\3\2\2\2\u0ad6\u0ad9")
        buf.write("\3\2\2\2\u0ad7\u0ad5\3\2\2\2\u0ad8\u0ad0\3\2\2\2\u0ad8")
        buf.write("\u0ad9\3\2\2\2\u0ad9\u0ada\3\2\2\2\u0ada\u0adb\7\6\2\2")
        buf.write("\u0adb\u024f\3\2\2\2\u0adc\u0add\7\u0137\2\2\u0add\u0ade")
        buf.write("\7\f\2\2\u0ade\u0adf\5\u024c\u0127\2\u0adf\u0251\3\2\2")
        buf.write("\2\u0ae0\u0ae9\7 \2\2\u0ae1\u0ae6\5\u024c\u0127\2\u0ae2")
        buf.write("\u0ae3\7\13\2\2\u0ae3\u0ae5\5\u024c\u0127\2\u0ae4\u0ae2")
        buf.write("\3\2\2\2\u0ae5\u0ae8\3\2\2\2\u0ae6\u0ae4\3\2\2\2\u0ae6")
        buf.write("\u0ae7\3\2\2\2\u0ae7\u0aea\3\2\2\2\u0ae8\u0ae6\3\2\2\2")
        buf.write("\u0ae9\u0ae1\3\2\2\2\u0ae9\u0aea\3\2\2\2\u0aea\u0aeb\3")
        buf.write("\2\2\2\u0aeb\u0aec\7\7\2\2\u0aec\u0253\3\2\2\2\u0aed\u0aee")
        buf.write("\7\u0138\2\2\u0aee\u0255\3\2\2\2\u0aef\u0af0\7\u0139\2")
        buf.write("\2\u0af0\u0257\3\2\2\2\u0af1\u0af2\7\u013d\2\2\u0af2\u0259")
        buf.write("\3\2\2\2\u0af3\u0af4\7\u00b9\2\2\u0af4\u025b\3\2\2\2\u0af5")
        buf.write("\u0af9\7\u0137\2\2\u0af6\u0af8\7\u0137\2\2\u0af7\u0af6")
        buf.write("\3\2\2\2\u0af8\u0afb\3\2\2\2\u0af9\u0af7\3\2\2\2\u0af9")
        buf.write("\u0afa\3\2\2\2\u0afa\u025d\3\2\2\2\u0afb\u0af9\3\2\2\2")
        buf.write("\u0afc\u0afd\7\u013a\2\2\u0afd\u025f\3\2\2\2\u0afe\u0b00")
        buf.write("\7\r\2\2\u0aff\u0afe\3\2\2\2\u0aff\u0b00\3\2\2\2\u0b00")
        buf.write("\u0b01\3\2\2\2\u0b01\u0b02\7\u0133\2\2\u0b02\u0261\3\2")
        buf.write("\2\2\u0b03\u0b05\7\r\2\2\u0b04\u0b03\3\2\2\2\u0b04\u0b05")
        buf.write("\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06\u0b07\7\u0135\2\2\u0b07")
        buf.write("\u0263\3\2\2\2\u0105\u026b\u026f\u027a\u0287\u0293\u029e")
        buf.write("\u02a8\u02c3\u02c9\u02d2\u02de\u02ed\u02f1\u02f4\u02fa")
        buf.write("\u0300\u0305\u030b\u0315\u0324\u0329\u0331\u0343\u0352")
        buf.write("\u0359\u035f\u0363\u036d\u0376\u0380\u038a\u0393\u03c6")
        buf.write("\u03cc\u03e7\u03ed\u03f9\u0400\u040a\u040f\u0418\u041f")
        buf.write("\u0424\u042f\u043b\u0440\u044c\u044f\u0454\u0457\u045c")
        buf.write("\u0460\u046b\u0476\u047b\u047f\u048e\u0497\u049c\u04a3")
        buf.write("\u04aa\u04ad\u04ba\u04c6\u04cd\u04d5\u04d8\u04dd\u04e8")
        buf.write("\u04fa\u0500\u0509\u050e\u0518\u0520\u0523\u052c\u0532")
        buf.write("\u053a\u053d\u0546\u0550\u055c\u0560\u0567\u0570\u0579")
        buf.write("\u0581\u0584\u0599\u05a1\u05a7\u05aa\u05b1\u05c3\u05c7")
        buf.write("\u05d2\u05d9\u05e1\u05e5\u05e8\u05f7\u0600\u0608\u060c")
        buf.write("\u0610\u0614\u061e\u0627\u062a\u062f\u0633\u0636\u063a")
        buf.write("\u063e\u0648\u0651\u065a\u0660\u0664\u0669\u0677\u067c")
        buf.write("\u068b\u0694\u0697\u069f\u06a8\u06ab\u06b3\u06b6\u06be")
        buf.write("\u06c1\u06c5\u06cb\u06d1\u06d9\u06e0\u06e9\u06ec\u06f3")
        buf.write("\u0728\u072f\u073f\u0745\u0750\u0759\u075d\u0760\u0763")
        buf.write("\u076a\u077b\u0785\u078d\u0790\u0795\u07a3\u07ae\u07b2")
        buf.write("\u07b5\u07ba\u07c7\u07d0\u07d8\u07df\u07e8\u07ef\u07f3")
        buf.write("\u07f9\u0801\u0804\u0807\u080f\u0819\u0822\u082e\u0838")
        buf.write("\u083d\u0842\u0850\u0858\u085e\u0864\u086b\u0871\u087b")
        buf.write("\u0881\u0887\u088a\u0890\u089a\u08a9\u08b3\u08be\u08cc")
        buf.write("\u08e0\u08e6\u08f0\u08f8\u08fe\u0903\u090e\u0915\u091a")
        buf.write("\u0920\u0925\u0935\u093d\u094b\u0953\u095c\u095f\u0965")
        buf.write("\u096a\u0977\u097b\u0990\u0996\u099b\u09ac\u09b7\u09bf")
        buf.write("\u09c9\u09cf\u09d5\u09d9\u09df\u09e5\u09e9\u09f5\u09ff")
        buf.write("\u0a04\u0a0d\u0a11\u0a13\u0a1c\u0a43\u0a51\u0a56\u0a5c")
        buf.write("\u0a61\u0a64\u0a6a\u0a70\u0a77\u0a7b\u0a88\u0a91\u0a98")
        buf.write("\u0a9c\u0aba\u0acd\u0ad5\u0ad8\u0ae6\u0ae9\u0af9\u0aff")
        buf.write("\u0b04")
        return buf.getvalue()


class KqlParser ( Parser ):

    grammarFileName = "Kql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'*'", "'@'", "'|'", "'}'", "']'", "']-'", 
                     "']->'", "')'", "','", "':'", "'-'", "'--'", "'-->'", 
                     "'-['", "'.'", "'..'", "'='", "'=='", "'=~'", "'!='", 
                     "'!~'", "'>'", "'>='", "'<'", "'<--'", "'<-['", "'<='", 
                     "'<>'", "'{'", "'['", "'('", "'%'", "'+'", "';'", "'/'", 
                     "'=>'", "'3Dchart'", "'access'", "'accumulate'", "'aggregations'", 
                     "'alias'", "'all'", "'and'", "'anomalychart'", "'anomalycolumns'", 
                     "'areachart'", "'as'", "'asc'", "'assert-schema'", 
                     "'axes'", "'bagexpansion'", "'barchart'", "'base'", 
                     "'between'", "'bin'", "'bin_legacy'", "'by'", "'card'", 
                     "'cluster'", "'columnchart'", "'consume'", "'contains'", 
                     "'containscs'", "'contains_cs'", "'__contextual_datatable'", 
                     "'count'", "'__crossCluster'", "'__crossDB'", "'database'", 
                     "'datascope'", "'datatable'", "'declare'", "'decodeblocks'", 
                     "'default'", "'delta'", "'desc'", "'distinct'", "'edges'", 
                     "'endswith'", "'endswith_cs'", "'entity_group'", "'evaluate'", 
                     "'execute'", "'__executeAndCache'", "'expandoutput'", 
                     "'extend'", "'externaldata'", "'external_data'", "'facet'", 
                     "'filter'", "'find'", "'first'", "'flags'", "'fork'", 
                     "'from'", "'getschema'", "'granny-asc'", "'granny-desc'", 
                     "'graph-mark-components'", "'graph-match'", "'graph-merge'", 
                     "'graph-shortest-paths'", "'graph-to-table'", "'has'", 
                     "'has_all'", "'has_any'", "'has_cs'", "'hasprefix'", 
                     "'hasprefix_cs'", "'hassuffix'", "'hassuffix_cs'", 
                     "'hidden'", "'hint.concurrency'", "'hint.distribution'", 
                     "'hint.materialized'", "'hint.num_partitions'", "'hint.pass_filters'", 
                     "'hint.pass_filters_column'", "'hint.progressive_top'", 
                     "'hint.remote'", "'hint.shufflekey'", "'hint.spread'", 
                     "'hint.strategy'", "'hot'", "'hotcache'", "'hotdata'", 
                     "'hotindex'", "'id'", "'__id'", "'in'", "'in~'", "'into'", 
                     "'invoke'", "'isfuzzy'", "'__isFuzzy'", "'join'", "'kind'", 
                     "'ladderchart'", "'last'", "'legend'", "'let'", "'like'", 
                     "'likecs'", "'limit'", "'linear'", "'linechart'", "'list'", 
                     "'lookup'", "'log'", "'macro-expand'", "'make-graph'", 
                     "'make-series'", "'map'", "'matches regex'", "'materialize'", 
                     "'materialized-view-combine'", "'mv-apply'", "'mv-expand'", 
                     "'mvapply'", "'mvexpand'", "'nodes'", "'none'", "'nooptimization'", 
                     "'!between'", "'!contains'", "'!contains_cs'", "'!endswith_cs'", 
                     "'!endswith'", "'!has'", "'!has_cs'", "'!hasprefix'", 
                     "'!hasprefix_cs'", "'!hassuffix'", "'!hassuffix_cs'", 
                     "'!in'", "'!in~'", "'!startswith'", "'!startswith_cs'", 
                     "'notcontains'", "'notcontainscs'", "'notlike'", "'notlikecs'", 
                     "'null'", "'nulls'", "'of'", "'on'", "'optional'", 
                     "'or'", "'order'", "'others'", "'output'", "'pack'", 
                     "'panels'", "'parse'", "'parse-kv'", "'parse-where'", 
                     "'partition'", "'__partitionby'", "'partitioned-by'", 
                     "'pattern'", "'__packedColumn'", "'piechart'", "'pivotchart'", 
                     "'plugin'", "'print'", "'project'", "'project-away'", 
                     "'__projectAway'", "'project-keep'", "'project-rename'", 
                     "'project-reorder'", "'project-smart'", "'query_parameters'", 
                     "'range'", "'reduce'", "'regex'", "'relaxed'", "'render'", 
                     "'replace'", "'restrict'", "'sample'", "'sample-distinct'", 
                     "'scan'", "'scatterchart'", "'search'", "'serialize'", 
                     "'series'", "'set'", "'simple'", "'sort'", "'__sourceColumnIndex'", 
                     "'stacked'", "'stacked100'", "'stackedareachart'", 
                     "'startswith'", "'startswith_cs'", "'step'", "'summarize'", 
                     "'table'", "'take'", "'threshold'", "'timechart'", 
                     "'timeline'", "'timepivot'", "'title'", "'to'", "'top'", 
                     "'top-hitters'", "'top-nested'", "'toscalar'", "'totable'", 
                     "'treemap'", "'typeof'", "'union'", "'unstacked'", 
                     "'uuid'", "'view'", "'visible'", "'where'", "'with'", 
                     "'__noWithSource'", "'withsource'", "'with_itemindex'", 
                     "'with_match_id'", "'with_node_id'", "'with_source'", 
                     "'with_step_name'", "'xaxis'", "'xcolumn'", "'xmax'", 
                     "'xmin'", "'xtitle'", "'yaxis'", "'ycolumns'", "'ymax'", 
                     "'ymin'", "'ysplit'", "'ytitle'", "'bool'", "'boolean'", 
                     "'date'", "'datetime'", "'decimal'", "'double'", "'dynamic'", 
                     "'float'", "'guid'", "'int'", "'int8'", "'int16'", 
                     "'int32'", "'int64'", "'long'", "'string'", "'real'", 
                     "'time'", "'timespan'", "'uint'", "'uint8'", "'uint16'", 
                     "'uint32'", "'uint64'", "'ulong'", "'uniqueid'" ]

    symbolicNames = [ "<INVALID>", "ASTERISK", "ATSIGN", "BAR", "CLOSEBRACE", 
                      "CLOSEBRACKET", "CLOSEBRACKET_DASH", "CLOSEBRACKET_DASH_GREATERTHAN", 
                      "CLOSEPAREN", "COMMA", "COLON", "DASH", "DASHDASH", 
                      "DASHDASH_GREATERTHAN", "DASH_OPENBRACKET", "DOT", 
                      "DOTDOT", "EQUAL", "EQUALEQUAL", "EQUALTILDE", "EXCLAIMATIONPOINT_EQUAL", 
                      "EXCLAIMATIONPOINT_TILDE", "GREATERTHAN", "GREATERTHAN_EQUAL", 
                      "LESSTHAN", "LESSTHAN_DASHDASH", "LESSTHAN_DASH_OPENBRACKET", 
                      "LESSTHAN_EQUAL", "LESSTHAN_GREATERTHAN", "OPENBRACE", 
                      "OPENBRACKET", "OPENPAREN", "PERCENTSIGN", "PLUS", 
                      "SEMICOLON", "SLASH", "EQUAL_GREATERTHAN", "CHART3D_", 
                      "ACCESS", "ACCUMULATE", "AGGREGATIONS", "ALIAS", "ALL", 
                      "AND", "ANOMALYCHART", "ANOMALYCOLUMNS", "AREACHART", 
                      "AS", "ASC", "ASSERTSCHEMA", "AXES", "BAGEXPANSION", 
                      "BARCHART", "BASE", "BETWEEN", "BIN", "BIN_LEGACY", 
                      "BY", "CARD", "CLUSTER", "COLUMNCHART", "CONSUME", 
                      "CONTAINS", "CONTAINSCS", "CONTAINS_CS", "CONTEXTUAL_DATATABLE", 
                      "COUNT", "CROSSCLUSTER__", "CROSSDB__", "DATABASE", 
                      "DATASCOPE", "DATATABLE", "DECLARE", "DECODEBLOCKS", 
                      "DEFAULT", "DELTA", "DESC", "DISTINCT", "EDGES", "ENDSWITH", 
                      "ENDSWITH_CS", "ENTITYGROUP", "EVALUATE", "EXECUTE", 
                      "EXECUTE_AND_CACHE", "EXPANDOUTPUT", "EXTEND", "EXTERNALDATA", 
                      "EXTERNAL_DATA", "FACET", "FILTER", "FIND", "FIRST", 
                      "FLAGS", "FORK", "FROM", "GETSCHEMA", "GRANNYASC", 
                      "GRANNYDESC", "GRAPHMARKCOMPONENTS", "GRAPHMATCH", 
                      "GRAPHMERGE", "GRAPHSHORTESTPATHS", "GRAPHTOTABLE", 
                      "HAS", "HAS_ALL", "HAS_ANY", "HAS_CS", "HASPREFIX", 
                      "HASPREFIX_CS", "HASSUFFIX", "HASSUFFIX_CS", "HIDDEN_", 
                      "HINT_CONCURRENCY", "HINT_DISTRIBUTION", "HINT_MATERIALIZED", 
                      "HINT_NUM_PARTITIONS", "HINT_PASS_FILTERS", "HINT_PASS_FILTERS_COLUMN", 
                      "HINT_PROGRESSIVE_TOP", "HINT_REMOTE", "HINT_SUFFLEKEY", 
                      "HINT_SPREAD", "HINT_STRATEGY", "HOT", "HOTCACHE", 
                      "HOTDATA", "HOTINDEX", "ID", "ID__", "IN", "IN_CI", 
                      "INTO", "INVOKE", "ISFUZZY", "ISFUZZY__", "JOIN", 
                      "KIND", "LADDERCHART", "LAST", "LEGEND", "LET", "LIKE", 
                      "LIKECS", "LIMIT", "LINEAR", "LINECHART", "LIST", 
                      "LOOKUP", "LOG", "MACROEXPAND", "MAKEGRAPH", "MAKESERIES", 
                      "MAP", "MATCHES_REGEX", "MATERIALIZE", "MATERIALIZED_VIEW_COMBINE", 
                      "MV_APPLY", "MV_EXPAND", "MVAPPLY", "MVEXPAND", "NODES", 
                      "NONE", "NOOPTIMIZATION", "NOT_BETWEEN", "NOT_CONTAINS", 
                      "NOT_CONTAINS_CS", "NOT_ENDSWITH_CS", "NOT_ENDSWITH", 
                      "NOT_HAS", "NOT_HAS_CS", "NOT_HASPREFIX", "NOT_HASPREFIX_CS", 
                      "NOT_HASSUFFIX", "NOT_HASSUFFIX_CS", "NOT_IN", "NOT_IN_CI", 
                      "NOT_STARTSWITH", "NOT_STARTSWITH_CS", "NOTCONTAINS", 
                      "NOTCONTAINSCS", "NOTLIKE", "NOTLIKECS", "NULL", "NULLS", 
                      "OF", "ON", "OPTIONAL", "OR", "ORDER", "OTHERS", "OUTPUT", 
                      "PACK", "PANELS", "PARSE", "PARSEKV", "PARSEWHERE", 
                      "PARTITION", "PARTITIONBY", "PARTITIONEDBY", "PATTERN", 
                      "PACKEDCOLUMN__", "PIECHART", "PIVOTCHART", "PLUGIN", 
                      "PRINT", "PROJECT", "PROJECTAWAY", "PROJECTAWAY_", 
                      "PROJECTKEEP", "PROJECTRENAME", "PROJECTREORDER", 
                      "PROJECTSMART", "QUERYPARAMETERS", "RANGE", "REDUCE", 
                      "REGEX", "RELAXED", "RENDER", "REPLACE", "RESTRICT", 
                      "SAMPLE", "SAMPLE_DISTINCT", "SCAN", "SCATTERCHART", 
                      "SEARCH", "SERIALIZE", "SERIES", "SET", "SIMPLE", 
                      "SORT", "SOURCECOLUMNINDEX__", "STACKED", "STACKED100", 
                      "STACKEDAREACHART", "STARTSWITH", "STARTSWITH_CS", 
                      "STEP", "SUMMARIZE", "TABLE", "TAKE", "THRESHOLD", 
                      "TIMECHART", "TIMELINE", "TIMEPIVOT", "TITLE", "TO", 
                      "TOP", "TOP_HITTERS", "TOP_NESTED", "TOSCALAR", "TOTABLE", 
                      "TREEMAP", "TYPEOF", "UNION", "UNSTACKED", "UUID", 
                      "VIEW", "VISIBLE", "WHERE", "WITH", "WITHNOSOURCE__", 
                      "WITHSOURCE", "WITH_ITEM_INDEX", "WITH_MATCH_ID", 
                      "WITH_NODE_ID", "WITH_SOURCE", "WITH_STEP_NAME", "XAXIS", 
                      "XCOLUMN", "XMAX", "XMIN", "XTITLE", "YAXIS", "YCOLUMNS", 
                      "YMAX", "YMIN", "YSPLIT", "YTITLE", "BOOL", "BOOLEAN", 
                      "DATE", "DATETIME", "DECIMAL", "DOUBLE", "DYNAMIC", 
                      "FLOAT", "GUID", "INT", "INT8", "INT16", "INT32", 
                      "INT64", "LONG", "STRING", "REAL", "TIME", "TIMESPAN", 
                      "UINT", "UINT8", "UINT16", "UINT32", "UINT64", "ULONG", 
                      "UNIQUEID", "LONGLITERAL", "INTLITERAL", "REALLITERAL", 
                      "DECIMALLITERAL", "STRINGLITERAL", "BOOLEANLITERAL", 
                      "DATETIMELITERAL", "TIMESPANLITERAL", "TYPELITERAL", 
                      "RAWGUIDLITERAL", "GUIDLITERAL", "IDENTIFIER", "WHITESPACE", 
                      "COMMENT" ]

    RULE_top = 0
    RULE_query = 1
    RULE_statement = 2
    RULE_aliasDatabaseStatement = 3
    RULE_letStatement = 4
    RULE_letVariableDeclaration = 5
    RULE_letFunctionDeclaration = 6
    RULE_letViewDeclaration = 7
    RULE_letViewParameterList = 8
    RULE_letMaterializeDeclaration = 9
    RULE_letEntityGroupDeclaration = 10
    RULE_letFunctionParameterList = 11
    RULE_scalarParameter = 12
    RULE_scalarParameterDefault = 13
    RULE_tabularParameter = 14
    RULE_tabularParameterOpenSchema = 15
    RULE_tabularParameterRowSchema = 16
    RULE_tabularParameterRowSchemaColumnDeclaration = 17
    RULE_letFunctionBody = 18
    RULE_letFunctionBodyStatement = 19
    RULE_declarePatternStatement = 20
    RULE_declarePatternDefinition = 21
    RULE_declarePatternParameterList = 22
    RULE_declarePatternParameter = 23
    RULE_declarePatternPathParameter = 24
    RULE_declarePatternRule = 25
    RULE_declarePatternRuleArgumentList = 26
    RULE_declarePatternRulePathArgument = 27
    RULE_declarePatternRuleArgument = 28
    RULE_declarePatternBody = 29
    RULE_restrictAccessStatement = 30
    RULE_restrictAccessStatementEntity = 31
    RULE_setStatement = 32
    RULE_setStatementOptionValue = 33
    RULE_declareQueryParametersStatement = 34
    RULE_declareQueryParametersStatementParameter = 35
    RULE_queryStatement = 36
    RULE_expression = 37
    RULE_pipeExpression = 38
    RULE_pipedOperator = 39
    RULE_pipeSubExpression = 40
    RULE_beforePipeExpression = 41
    RULE_afterPipeOperator = 42
    RULE_beforeOrAfterPipeOperator = 43
    RULE_forkPipeOperator = 44
    RULE_asOperator = 45
    RULE_assertSchemaOperator = 46
    RULE_consumeOperator = 47
    RULE_countOperator = 48
    RULE_countOperatorAsClause = 49
    RULE_distinctOperator = 50
    RULE_distinctOperatorStarTarget = 51
    RULE_distinctOperatorColumnListTarget = 52
    RULE_evaluateOperator = 53
    RULE_evaluateOperatorSchemaClause = 54
    RULE_extendOperator = 55
    RULE_executeAndCacheOperator = 56
    RULE_facetByOperator = 57
    RULE_facetByOperatorWithOperatorClause = 58
    RULE_facetByOperatorWithExpressionClause = 59
    RULE_findOperator = 60
    RULE_findOperatorParametersWhereClause = 61
    RULE_findOperatorInClause = 62
    RULE_findOperatorProjectClause = 63
    RULE_findOperatorProjectExpression = 64
    RULE_findOperatorColumnExpression = 65
    RULE_findOperatorOptionalColumnType = 66
    RULE_findOperatorPackExpression = 67
    RULE_findOperatorProjectSmartClause = 68
    RULE_findOperatorProjectAwayClause = 69
    RULE_findOperatorProjectAwayStar = 70
    RULE_findOperatorProjectAwayColumnList = 71
    RULE_findOperatorSource = 72
    RULE_findOperatorSourceEntityExpression = 73
    RULE_forkOperator = 74
    RULE_forkOperatorFork = 75
    RULE_forkOperatorExpressionName = 76
    RULE_forkOperatorExpression = 77
    RULE_forkOperatorPipedOperator = 78
    RULE_getSchemaOperator = 79
    RULE_graphMarkComponentsOperator = 80
    RULE_graphMatchOperator = 81
    RULE_graphMatchPattern = 82
    RULE_graphMatchPatternNode = 83
    RULE_graphMatchPatternUnnamedEdge = 84
    RULE_graphMatchPatternNamedEdge = 85
    RULE_graphMatchPatternRange = 86
    RULE_graphMatchWhereClause = 87
    RULE_graphMatchProjectClause = 88
    RULE_graphMergeOperator = 89
    RULE_graphToTableOperator = 90
    RULE_graphToTableOutput = 91
    RULE_graphToTableAsClause = 92
    RULE_graphShortestPathsOperator = 93
    RULE_invokeOperator = 94
    RULE_joinOperator = 95
    RULE_joinOperatorOnClause = 96
    RULE_joinOperatorWhereClause = 97
    RULE_lookupOperator = 98
    RULE_macroExpandOperator = 99
    RULE_macroExpandEntityGroup = 100
    RULE_entityGroupExpression = 101
    RULE_makeGraphOperator = 102
    RULE_makeGraphIdClause = 103
    RULE_makeGraphTablesAndKeysClause = 104
    RULE_makeGraphPartitionedByClause = 105
    RULE_makeSeriesOperator = 106
    RULE_makeSeriesOperatorOnClause = 107
    RULE_makeSeriesOperatorAggregation = 108
    RULE_makeSeriesOperatorExpressionDefaultClause = 109
    RULE_makeSeriesOperatorInRangeClause = 110
    RULE_makeSeriesOperatorFromToStepClause = 111
    RULE_makeSeriesOperatorByClause = 112
    RULE_mvapplyOperator = 113
    RULE_mvapplyOperatorLimitClause = 114
    RULE_mvapplyOperatorIdClause = 115
    RULE_mvapplyOperatorExpression = 116
    RULE_mvapplyOperatorExpressionToClause = 117
    RULE_mvexpandOperator = 118
    RULE_mvexpandOperatorExpression = 119
    RULE_parseOperator = 120
    RULE_parseOperatorKindClause = 121
    RULE_parseOperatorFlagsClause = 122
    RULE_parseOperatorNameAndOptionalType = 123
    RULE_parseOperatorPattern = 124
    RULE_parseOperatorPatternSegment = 125
    RULE_parseWhereOperator = 126
    RULE_parseKvOperator = 127
    RULE_parseKvWithClause = 128
    RULE_partitionOperator = 129
    RULE_partitionOperatorInClause = 130
    RULE_partitionOperatorSubExpressionBody = 131
    RULE_partitionOperatorFullExpressionBody = 132
    RULE_partitionByOperator = 133
    RULE_partitionByOperatorIdClause = 134
    RULE_printOperator = 135
    RULE_projectAwayOperator = 136
    RULE_projectKeepOperator = 137
    RULE_projectOperator = 138
    RULE_projectRenameOperator = 139
    RULE_projectReorderOperator = 140
    RULE_projectReorderExpression = 141
    RULE_reduceByOperator = 142
    RULE_reduceByWithClause = 143
    RULE_renderOperator = 144
    RULE_renderOperatorWithClause = 145
    RULE_renderOperatorLegacyPropertyList = 146
    RULE_renderOperatorProperty = 147
    RULE_renderPropertyNameList = 148
    RULE_renderOperatorLegacyProperty = 149
    RULE_sampleDistinctOperator = 150
    RULE_sampleOperator = 151
    RULE_scanOperator = 152
    RULE_scanOperatorOrderByClause = 153
    RULE_scanOperatorPartitionByClause = 154
    RULE_scanOperatorDeclareClause = 155
    RULE_scanOperatorStep = 156
    RULE_scanOperatorStepOutputClause = 157
    RULE_scanOperatorBody = 158
    RULE_scanOperatorAssignment = 159
    RULE_searchOperator = 160
    RULE_searchOperatorStarAndExpression = 161
    RULE_searchOperatorInClause = 162
    RULE_serializeOperator = 163
    RULE_sortOperator = 164
    RULE_orderedExpression = 165
    RULE_sortOrdering = 166
    RULE_summarizeOperator = 167
    RULE_summarizeOperatorByClause = 168
    RULE_summarizeOperatorLegacyBinClause = 169
    RULE_takeOperator = 170
    RULE_topOperator = 171
    RULE_topHittersOperator = 172
    RULE_topHittersOperatorByClause = 173
    RULE_topNestedOperator = 174
    RULE_topNestedOperatorPart = 175
    RULE_topNestedOperatorWithOthersClause = 176
    RULE_unionOperator = 177
    RULE_unionOperatorExpression = 178
    RULE_whereOperator = 179
    RULE_contextualSubExpression = 180
    RULE_contextualPipeExpression = 181
    RULE_contextualPipeExpressionPipedOperator = 182
    RULE_strictQueryOperatorParameter = 183
    RULE_relaxedQueryOperatorParameter = 184
    RULE_queryOperatorProperty = 185
    RULE_namedExpression = 186
    RULE_namedExpressionNameClause = 187
    RULE_namedExpressionNameList = 188
    RULE_scopedFunctionCallExpression = 189
    RULE_unnamedExpression = 190
    RULE_logicalOrExpression = 191
    RULE_logicalOrOperation = 192
    RULE_logicalAndExpression = 193
    RULE_logicalAndOperation = 194
    RULE_equalityExpression = 195
    RULE_equalsEqualityExpression = 196
    RULE_listEqualityExpression = 197
    RULE_betweenEqualityExpression = 198
    RULE_starEqualityExpression = 199
    RULE_relationalExpression = 200
    RULE_additiveExpression = 201
    RULE_additiveOperation = 202
    RULE_multiplicativeExpression = 203
    RULE_multiplicativeOperation = 204
    RULE_stringOperatorExpression = 205
    RULE_stringBinaryOperatorExpression = 206
    RULE_stringBinaryOperation = 207
    RULE_stringBinaryOperator = 208
    RULE_stringStarOperatorExpression = 209
    RULE_invocationExpression = 210
    RULE_functionCallOrPathExpression = 211
    RULE_functionCallOrPathRoot = 212
    RULE_functionCallOrPathPathExpression = 213
    RULE_functionCallOrPathOperation = 214
    RULE_functionalCallOrPathPathOperation = 215
    RULE_functionCallOrPathElementOperation = 216
    RULE_legacyFunctionCallOrPathElementOperation = 217
    RULE_toScalarExpression = 218
    RULE_toTableExpression = 219
    RULE_noOptimizationParameter = 220
    RULE_dotCompositeFunctionCallExpression = 221
    RULE_dotCompositeFunctionCallOperation = 222
    RULE_functionCallExpression = 223
    RULE_namedFunctionCallExpression = 224
    RULE_argumentExpression = 225
    RULE_countExpression = 226
    RULE_starExpression = 227
    RULE_primaryExpression = 228
    RULE_nameReferenceWithDataScope = 229
    RULE_dataScopeClause = 230
    RULE_parenthesizedExpression = 231
    RULE_rangeExpression = 232
    RULE_entityExpression = 233
    RULE_entityPathOrElementExpression = 234
    RULE_entityPathOrElementOperator = 235
    RULE_entityPathOperator = 236
    RULE_entityElementOperator = 237
    RULE_legacyEntityPathElementOperator = 238
    RULE_entityName = 239
    RULE_entityNameReference = 240
    RULE_atSignName = 241
    RULE_extendedPathName = 242
    RULE_wildcardedEntityExpression = 243
    RULE_wildcardedPathExpression = 244
    RULE_wildcardedPathName = 245
    RULE_contextualDataTableExpression = 246
    RULE_dataTableExpression = 247
    RULE_rowSchema = 248
    RULE_rowSchemaColumnDeclaration = 249
    RULE_externalDataExpression = 250
    RULE_externalDataWithClause = 251
    RULE_externalDataWithClauseProperty = 252
    RULE_materializedViewCombineExpression = 253
    RULE_materializeViewCombineBaseClause = 254
    RULE_materializedViewCombineDeltaClause = 255
    RULE_materializedViewCombineAggregationsClause = 256
    RULE_scalarType = 257
    RULE_extendedScalarType = 258
    RULE_parameterName = 259
    RULE_simpleNameReference = 260
    RULE_extendedNameReference = 261
    RULE_wildcardedNameReference = 262
    RULE_simpleOrWildcardedNameReference = 263
    RULE_identifierName = 264
    RULE_keywordName = 265
    RULE_extendedKeywordName = 266
    RULE_escapedName = 267
    RULE_identifierOrKeywordName = 268
    RULE_identifierOrKeywordOrEscapedName = 269
    RULE_identifierOrExtendedKeywordOrEscapedName = 270
    RULE_identifierOrExtendedKeywordName = 271
    RULE_wildcardedName = 272
    RULE_wildcardedNamePrefix = 273
    RULE_wildcardedNameSegment = 274
    RULE_literalExpression = 275
    RULE_unsignedLiteralExpression = 276
    RULE_numberLikeLiteralExpression = 277
    RULE_numericLiteralExpression = 278
    RULE_signedLiteralExpression = 279
    RULE_longLiteralExpression = 280
    RULE_intLiteralExpression = 281
    RULE_realLiteralExpression = 282
    RULE_decimalLiteralExpression = 283
    RULE_dateTimeLiteralExpression = 284
    RULE_timeSpanLiteralExpression = 285
    RULE_booleanLiteralExpression = 286
    RULE_guidLiteralExpression = 287
    RULE_typeLiteralExpression = 288
    RULE_signedLongLiteralExpression = 289
    RULE_signedRealLiteralExpression = 290
    RULE_stringLiteralExpression = 291
    RULE_dynamicLiteralExpression = 292
    RULE_jsonValue = 293
    RULE_jsonObject = 294
    RULE_jsonPair = 295
    RULE_jsonArray = 296
    RULE_jsonBoolean = 297
    RULE_jsonDateTime = 298
    RULE_jsonGuid = 299
    RULE_jsonNull = 300
    RULE_jsonString = 301
    RULE_jsonTimeSpan = 302
    RULE_jsonLong = 303
    RULE_jsonReal = 304

    ruleNames =  [ "top", "query", "statement", "aliasDatabaseStatement", 
                   "letStatement", "letVariableDeclaration", "letFunctionDeclaration", 
                   "letViewDeclaration", "letViewParameterList", "letMaterializeDeclaration", 
                   "letEntityGroupDeclaration", "letFunctionParameterList", 
                   "scalarParameter", "scalarParameterDefault", "tabularParameter", 
                   "tabularParameterOpenSchema", "tabularParameterRowSchema", 
                   "tabularParameterRowSchemaColumnDeclaration", "letFunctionBody", 
                   "letFunctionBodyStatement", "declarePatternStatement", 
                   "declarePatternDefinition", "declarePatternParameterList", 
                   "declarePatternParameter", "declarePatternPathParameter", 
                   "declarePatternRule", "declarePatternRuleArgumentList", 
                   "declarePatternRulePathArgument", "declarePatternRuleArgument", 
                   "declarePatternBody", "restrictAccessStatement", "restrictAccessStatementEntity", 
                   "setStatement", "setStatementOptionValue", "declareQueryParametersStatement", 
                   "declareQueryParametersStatementParameter", "queryStatement", 
                   "expression", "pipeExpression", "pipedOperator", "pipeSubExpression", 
                   "beforePipeExpression", "afterPipeOperator", "beforeOrAfterPipeOperator", 
                   "forkPipeOperator", "asOperator", "assertSchemaOperator", 
                   "consumeOperator", "countOperator", "countOperatorAsClause", 
                   "distinctOperator", "distinctOperatorStarTarget", "distinctOperatorColumnListTarget", 
                   "evaluateOperator", "evaluateOperatorSchemaClause", "extendOperator", 
                   "executeAndCacheOperator", "facetByOperator", "facetByOperatorWithOperatorClause", 
                   "facetByOperatorWithExpressionClause", "findOperator", 
                   "findOperatorParametersWhereClause", "findOperatorInClause", 
                   "findOperatorProjectClause", "findOperatorProjectExpression", 
                   "findOperatorColumnExpression", "findOperatorOptionalColumnType", 
                   "findOperatorPackExpression", "findOperatorProjectSmartClause", 
                   "findOperatorProjectAwayClause", "findOperatorProjectAwayStar", 
                   "findOperatorProjectAwayColumnList", "findOperatorSource", 
                   "findOperatorSourceEntityExpression", "forkOperator", 
                   "forkOperatorFork", "forkOperatorExpressionName", "forkOperatorExpression", 
                   "forkOperatorPipedOperator", "getSchemaOperator", "graphMarkComponentsOperator", 
                   "graphMatchOperator", "graphMatchPattern", "graphMatchPatternNode", 
                   "graphMatchPatternUnnamedEdge", "graphMatchPatternNamedEdge", 
                   "graphMatchPatternRange", "graphMatchWhereClause", "graphMatchProjectClause", 
                   "graphMergeOperator", "graphToTableOperator", "graphToTableOutput", 
                   "graphToTableAsClause", "graphShortestPathsOperator", 
                   "invokeOperator", "joinOperator", "joinOperatorOnClause", 
                   "joinOperatorWhereClause", "lookupOperator", "macroExpandOperator", 
                   "macroExpandEntityGroup", "entityGroupExpression", "makeGraphOperator", 
                   "makeGraphIdClause", "makeGraphTablesAndKeysClause", 
                   "makeGraphPartitionedByClause", "makeSeriesOperator", 
                   "makeSeriesOperatorOnClause", "makeSeriesOperatorAggregation", 
                   "makeSeriesOperatorExpressionDefaultClause", "makeSeriesOperatorInRangeClause", 
                   "makeSeriesOperatorFromToStepClause", "makeSeriesOperatorByClause", 
                   "mvapplyOperator", "mvapplyOperatorLimitClause", "mvapplyOperatorIdClause", 
                   "mvapplyOperatorExpression", "mvapplyOperatorExpressionToClause", 
                   "mvexpandOperator", "mvexpandOperatorExpression", "parseOperator", 
                   "parseOperatorKindClause", "parseOperatorFlagsClause", 
                   "parseOperatorNameAndOptionalType", "parseOperatorPattern", 
                   "parseOperatorPatternSegment", "parseWhereOperator", 
                   "parseKvOperator", "parseKvWithClause", "partitionOperator", 
                   "partitionOperatorInClause", "partitionOperatorSubExpressionBody", 
                   "partitionOperatorFullExpressionBody", "partitionByOperator", 
                   "partitionByOperatorIdClause", "printOperator", "projectAwayOperator", 
                   "projectKeepOperator", "projectOperator", "projectRenameOperator", 
                   "projectReorderOperator", "projectReorderExpression", 
                   "reduceByOperator", "reduceByWithClause", "renderOperator", 
                   "renderOperatorWithClause", "renderOperatorLegacyPropertyList", 
                   "renderOperatorProperty", "renderPropertyNameList", "renderOperatorLegacyProperty", 
                   "sampleDistinctOperator", "sampleOperator", "scanOperator", 
                   "scanOperatorOrderByClause", "scanOperatorPartitionByClause", 
                   "scanOperatorDeclareClause", "scanOperatorStep", "scanOperatorStepOutputClause", 
                   "scanOperatorBody", "scanOperatorAssignment", "searchOperator", 
                   "searchOperatorStarAndExpression", "searchOperatorInClause", 
                   "serializeOperator", "sortOperator", "orderedExpression", 
                   "sortOrdering", "summarizeOperator", "summarizeOperatorByClause", 
                   "summarizeOperatorLegacyBinClause", "takeOperator", "topOperator", 
                   "topHittersOperator", "topHittersOperatorByClause", "topNestedOperator", 
                   "topNestedOperatorPart", "topNestedOperatorWithOthersClause", 
                   "unionOperator", "unionOperatorExpression", "whereOperator", 
                   "contextualSubExpression", "contextualPipeExpression", 
                   "contextualPipeExpressionPipedOperator", "strictQueryOperatorParameter", 
                   "relaxedQueryOperatorParameter", "queryOperatorProperty", 
                   "namedExpression", "namedExpressionNameClause", "namedExpressionNameList", 
                   "scopedFunctionCallExpression", "unnamedExpression", 
                   "logicalOrExpression", "logicalOrOperation", "logicalAndExpression", 
                   "logicalAndOperation", "equalityExpression", "equalsEqualityExpression", 
                   "listEqualityExpression", "betweenEqualityExpression", 
                   "starEqualityExpression", "relationalExpression", "additiveExpression", 
                   "additiveOperation", "multiplicativeExpression", "multiplicativeOperation", 
                   "stringOperatorExpression", "stringBinaryOperatorExpression", 
                   "stringBinaryOperation", "stringBinaryOperator", "stringStarOperatorExpression", 
                   "invocationExpression", "functionCallOrPathExpression", 
                   "functionCallOrPathRoot", "functionCallOrPathPathExpression", 
                   "functionCallOrPathOperation", "functionalCallOrPathPathOperation", 
                   "functionCallOrPathElementOperation", "legacyFunctionCallOrPathElementOperation", 
                   "toScalarExpression", "toTableExpression", "noOptimizationParameter", 
                   "dotCompositeFunctionCallExpression", "dotCompositeFunctionCallOperation", 
                   "functionCallExpression", "namedFunctionCallExpression", 
                   "argumentExpression", "countExpression", "starExpression", 
                   "primaryExpression", "nameReferenceWithDataScope", "dataScopeClause", 
                   "parenthesizedExpression", "rangeExpression", "entityExpression", 
                   "entityPathOrElementExpression", "entityPathOrElementOperator", 
                   "entityPathOperator", "entityElementOperator", "legacyEntityPathElementOperator", 
                   "entityName", "entityNameReference", "atSignName", "extendedPathName", 
                   "wildcardedEntityExpression", "wildcardedPathExpression", 
                   "wildcardedPathName", "contextualDataTableExpression", 
                   "dataTableExpression", "rowSchema", "rowSchemaColumnDeclaration", 
                   "externalDataExpression", "externalDataWithClause", "externalDataWithClauseProperty", 
                   "materializedViewCombineExpression", "materializeViewCombineBaseClause", 
                   "materializedViewCombineDeltaClause", "materializedViewCombineAggregationsClause", 
                   "scalarType", "extendedScalarType", "parameterName", 
                   "simpleNameReference", "extendedNameReference", "wildcardedNameReference", 
                   "simpleOrWildcardedNameReference", "identifierName", 
                   "keywordName", "extendedKeywordName", "escapedName", 
                   "identifierOrKeywordName", "identifierOrKeywordOrEscapedName", 
                   "identifierOrExtendedKeywordOrEscapedName", "identifierOrExtendedKeywordName", 
                   "wildcardedName", "wildcardedNamePrefix", "wildcardedNameSegment", 
                   "literalExpression", "unsignedLiteralExpression", "numberLikeLiteralExpression", 
                   "numericLiteralExpression", "signedLiteralExpression", 
                   "longLiteralExpression", "intLiteralExpression", "realLiteralExpression", 
                   "decimalLiteralExpression", "dateTimeLiteralExpression", 
                   "timeSpanLiteralExpression", "booleanLiteralExpression", 
                   "guidLiteralExpression", "typeLiteralExpression", "signedLongLiteralExpression", 
                   "signedRealLiteralExpression", "stringLiteralExpression", 
                   "dynamicLiteralExpression", "jsonValue", "jsonObject", 
                   "jsonPair", "jsonArray", "jsonBoolean", "jsonDateTime", 
                   "jsonGuid", "jsonNull", "jsonString", "jsonTimeSpan", 
                   "jsonLong", "jsonReal" ]

    EOF = Token.EOF
    ASTERISK=1
    ATSIGN=2
    BAR=3
    CLOSEBRACE=4
    CLOSEBRACKET=5
    CLOSEBRACKET_DASH=6
    CLOSEBRACKET_DASH_GREATERTHAN=7
    CLOSEPAREN=8
    COMMA=9
    COLON=10
    DASH=11
    DASHDASH=12
    DASHDASH_GREATERTHAN=13
    DASH_OPENBRACKET=14
    DOT=15
    DOTDOT=16
    EQUAL=17
    EQUALEQUAL=18
    EQUALTILDE=19
    EXCLAIMATIONPOINT_EQUAL=20
    EXCLAIMATIONPOINT_TILDE=21
    GREATERTHAN=22
    GREATERTHAN_EQUAL=23
    LESSTHAN=24
    LESSTHAN_DASHDASH=25
    LESSTHAN_DASH_OPENBRACKET=26
    LESSTHAN_EQUAL=27
    LESSTHAN_GREATERTHAN=28
    OPENBRACE=29
    OPENBRACKET=30
    OPENPAREN=31
    PERCENTSIGN=32
    PLUS=33
    SEMICOLON=34
    SLASH=35
    EQUAL_GREATERTHAN=36
    CHART3D_=37
    ACCESS=38
    ACCUMULATE=39
    AGGREGATIONS=40
    ALIAS=41
    ALL=42
    AND=43
    ANOMALYCHART=44
    ANOMALYCOLUMNS=45
    AREACHART=46
    AS=47
    ASC=48
    ASSERTSCHEMA=49
    AXES=50
    BAGEXPANSION=51
    BARCHART=52
    BASE=53
    BETWEEN=54
    BIN=55
    BIN_LEGACY=56
    BY=57
    CARD=58
    CLUSTER=59
    COLUMNCHART=60
    CONSUME=61
    CONTAINS=62
    CONTAINSCS=63
    CONTAINS_CS=64
    CONTEXTUAL_DATATABLE=65
    COUNT=66
    CROSSCLUSTER__=67
    CROSSDB__=68
    DATABASE=69
    DATASCOPE=70
    DATATABLE=71
    DECLARE=72
    DECODEBLOCKS=73
    DEFAULT=74
    DELTA=75
    DESC=76
    DISTINCT=77
    EDGES=78
    ENDSWITH=79
    ENDSWITH_CS=80
    ENTITYGROUP=81
    EVALUATE=82
    EXECUTE=83
    EXECUTE_AND_CACHE=84
    EXPANDOUTPUT=85
    EXTEND=86
    EXTERNALDATA=87
    EXTERNAL_DATA=88
    FACET=89
    FILTER=90
    FIND=91
    FIRST=92
    FLAGS=93
    FORK=94
    FROM=95
    GETSCHEMA=96
    GRANNYASC=97
    GRANNYDESC=98
    GRAPHMARKCOMPONENTS=99
    GRAPHMATCH=100
    GRAPHMERGE=101
    GRAPHSHORTESTPATHS=102
    GRAPHTOTABLE=103
    HAS=104
    HAS_ALL=105
    HAS_ANY=106
    HAS_CS=107
    HASPREFIX=108
    HASPREFIX_CS=109
    HASSUFFIX=110
    HASSUFFIX_CS=111
    HIDDEN_=112
    HINT_CONCURRENCY=113
    HINT_DISTRIBUTION=114
    HINT_MATERIALIZED=115
    HINT_NUM_PARTITIONS=116
    HINT_PASS_FILTERS=117
    HINT_PASS_FILTERS_COLUMN=118
    HINT_PROGRESSIVE_TOP=119
    HINT_REMOTE=120
    HINT_SUFFLEKEY=121
    HINT_SPREAD=122
    HINT_STRATEGY=123
    HOT=124
    HOTCACHE=125
    HOTDATA=126
    HOTINDEX=127
    ID=128
    ID__=129
    IN=130
    IN_CI=131
    INTO=132
    INVOKE=133
    ISFUZZY=134
    ISFUZZY__=135
    JOIN=136
    KIND=137
    LADDERCHART=138
    LAST=139
    LEGEND=140
    LET=141
    LIKE=142
    LIKECS=143
    LIMIT=144
    LINEAR=145
    LINECHART=146
    LIST=147
    LOOKUP=148
    LOG=149
    MACROEXPAND=150
    MAKEGRAPH=151
    MAKESERIES=152
    MAP=153
    MATCHES_REGEX=154
    MATERIALIZE=155
    MATERIALIZED_VIEW_COMBINE=156
    MV_APPLY=157
    MV_EXPAND=158
    MVAPPLY=159
    MVEXPAND=160
    NODES=161
    NONE=162
    NOOPTIMIZATION=163
    NOT_BETWEEN=164
    NOT_CONTAINS=165
    NOT_CONTAINS_CS=166
    NOT_ENDSWITH_CS=167
    NOT_ENDSWITH=168
    NOT_HAS=169
    NOT_HAS_CS=170
    NOT_HASPREFIX=171
    NOT_HASPREFIX_CS=172
    NOT_HASSUFFIX=173
    NOT_HASSUFFIX_CS=174
    NOT_IN=175
    NOT_IN_CI=176
    NOT_STARTSWITH=177
    NOT_STARTSWITH_CS=178
    NOTCONTAINS=179
    NOTCONTAINSCS=180
    NOTLIKE=181
    NOTLIKECS=182
    NULL=183
    NULLS=184
    OF=185
    ON=186
    OPTIONAL=187
    OR=188
    ORDER=189
    OTHERS=190
    OUTPUT=191
    PACK=192
    PANELS=193
    PARSE=194
    PARSEKV=195
    PARSEWHERE=196
    PARTITION=197
    PARTITIONBY=198
    PARTITIONEDBY=199
    PATTERN=200
    PACKEDCOLUMN__=201
    PIECHART=202
    PIVOTCHART=203
    PLUGIN=204
    PRINT=205
    PROJECT=206
    PROJECTAWAY=207
    PROJECTAWAY_=208
    PROJECTKEEP=209
    PROJECTRENAME=210
    PROJECTREORDER=211
    PROJECTSMART=212
    QUERYPARAMETERS=213
    RANGE=214
    REDUCE=215
    REGEX=216
    RELAXED=217
    RENDER=218
    REPLACE=219
    RESTRICT=220
    SAMPLE=221
    SAMPLE_DISTINCT=222
    SCAN=223
    SCATTERCHART=224
    SEARCH=225
    SERIALIZE=226
    SERIES=227
    SET=228
    SIMPLE=229
    SORT=230
    SOURCECOLUMNINDEX__=231
    STACKED=232
    STACKED100=233
    STACKEDAREACHART=234
    STARTSWITH=235
    STARTSWITH_CS=236
    STEP=237
    SUMMARIZE=238
    TABLE=239
    TAKE=240
    THRESHOLD=241
    TIMECHART=242
    TIMELINE=243
    TIMEPIVOT=244
    TITLE=245
    TO=246
    TOP=247
    TOP_HITTERS=248
    TOP_NESTED=249
    TOSCALAR=250
    TOTABLE=251
    TREEMAP=252
    TYPEOF=253
    UNION=254
    UNSTACKED=255
    UUID=256
    VIEW=257
    VISIBLE=258
    WHERE=259
    WITH=260
    WITHNOSOURCE__=261
    WITHSOURCE=262
    WITH_ITEM_INDEX=263
    WITH_MATCH_ID=264
    WITH_NODE_ID=265
    WITH_SOURCE=266
    WITH_STEP_NAME=267
    XAXIS=268
    XCOLUMN=269
    XMAX=270
    XMIN=271
    XTITLE=272
    YAXIS=273
    YCOLUMNS=274
    YMAX=275
    YMIN=276
    YSPLIT=277
    YTITLE=278
    BOOL=279
    BOOLEAN=280
    DATE=281
    DATETIME=282
    DECIMAL=283
    DOUBLE=284
    DYNAMIC=285
    FLOAT=286
    GUID=287
    INT=288
    INT8=289
    INT16=290
    INT32=291
    INT64=292
    LONG=293
    STRING=294
    REAL=295
    TIME=296
    TIMESPAN=297
    UINT=298
    UINT8=299
    UINT16=300
    UINT32=301
    UINT64=302
    ULONG=303
    UNIQUEID=304
    LONGLITERAL=305
    INTLITERAL=306
    REALLITERAL=307
    DECIMALLITERAL=308
    STRINGLITERAL=309
    BOOLEANLITERAL=310
    DATETIMELITERAL=311
    TIMESPANLITERAL=312
    TYPELITERAL=313
    RAWGUIDLITERAL=314
    GUIDLITERAL=315
    IDENTIFIER=316
    WHITESPACE=317
    COMMENT=318

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self):
            return self.getTypedRuleContext(KqlParser.QueryContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_top

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop" ):
                listener.enterTop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop" ):
                listener.exitTop(self)




    def top(self):

        localctx = KqlParser.TopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_top)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._statement = None # StatementContext
            self.Statements = list() # of StatementContexts

        def EOF(self):
            return self.getToken(KqlParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(KqlParser.StatementContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.SEMICOLON)
            else:
                return self.getToken(KqlParser.SEMICOLON, i)

        def getRuleIndex(self):
            return KqlParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = KqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            localctx._statement = self.statement()
            localctx.Statements.append(localctx._statement)
            self.state = 617
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 613
                    self.match(KqlParser.SEMICOLON)
                    self.state = 614
                    localctx._statement = self.statement()
                    localctx.Statements.append(localctx._statement) 
                self.state = 619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.SEMICOLON:
                self.state = 620
                self.match(KqlParser.SEMICOLON)


            self.state = 623
            self.match(KqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.AliasDatabase = None # AliasDatabaseStatementContext
            self.DeclarePattern = None # DeclarePatternStatementContext
            self.DeclareQueryParameters = None # DeclareQueryParametersStatementContext
            self.Let = None # LetStatementContext
            self.Query = None # QueryStatementContext
            self.RestrictAccess = None # RestrictAccessStatementContext
            self.Set = None # SetStatementContext

        def aliasDatabaseStatement(self):
            return self.getTypedRuleContext(KqlParser.AliasDatabaseStatementContext,0)


        def declarePatternStatement(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternStatementContext,0)


        def declareQueryParametersStatement(self):
            return self.getTypedRuleContext(KqlParser.DeclareQueryParametersStatementContext,0)


        def letStatement(self):
            return self.getTypedRuleContext(KqlParser.LetStatementContext,0)


        def queryStatement(self):
            return self.getTypedRuleContext(KqlParser.QueryStatementContext,0)


        def restrictAccessStatement(self):
            return self.getTypedRuleContext(KqlParser.RestrictAccessStatementContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(KqlParser.SetStatementContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = KqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        try:
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                localctx.AliasDatabase = self.aliasDatabaseStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                localctx.DeclarePattern = self.declarePatternStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 627
                localctx.DeclareQueryParameters = self.declareQueryParametersStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 628
                localctx.Let = self.letStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 629
                localctx.Query = self.queryStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 630
                localctx.RestrictAccess = self.restrictAccessStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 631
                localctx.Set = self.setStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasDatabaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.Expression = None # UnnamedExpressionContext

        def ALIAS(self):
            return self.getToken(KqlParser.ALIAS, 0)

        def DATABASE(self):
            return self.getToken(KqlParser.DATABASE, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_aliasDatabaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasDatabaseStatement" ):
                listener.enterAliasDatabaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasDatabaseStatement" ):
                listener.exitAliasDatabaseStatement(self)




    def aliasDatabaseStatement(self):

        localctx = KqlParser.AliasDatabaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_aliasDatabaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(KqlParser.ALIAS)
            self.state = 635
            self.match(KqlParser.DATABASE)
            self.state = 636
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 637
            self.match(KqlParser.EQUAL)
            self.state = 638
            localctx.Expression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Function = None # LetFunctionDeclarationContext
            self.View = None # LetViewDeclarationContext
            self.Variable = None # LetVariableDeclarationContext
            self.Materialized = None # LetMaterializeDeclarationContext
            self.EntityGroup = None # LetEntityGroupDeclarationContext

        def letFunctionDeclaration(self):
            return self.getTypedRuleContext(KqlParser.LetFunctionDeclarationContext,0)


        def letViewDeclaration(self):
            return self.getTypedRuleContext(KqlParser.LetViewDeclarationContext,0)


        def letVariableDeclaration(self):
            return self.getTypedRuleContext(KqlParser.LetVariableDeclarationContext,0)


        def letMaterializeDeclaration(self):
            return self.getTypedRuleContext(KqlParser.LetMaterializeDeclarationContext,0)


        def letEntityGroupDeclaration(self):
            return self.getTypedRuleContext(KqlParser.LetEntityGroupDeclarationContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStatement" ):
                listener.enterLetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStatement" ):
                listener.exitLetStatement(self)




    def letStatement(self):

        localctx = KqlParser.LetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_letStatement)
        try:
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 640
                localctx.Function = self.letFunctionDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 641
                localctx.View = self.letViewDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 642
                localctx.Variable = self.letVariableDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 643
                localctx.Materialized = self.letMaterializeDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 644
                localctx.EntityGroup = self.letEntityGroupDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetVariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.Expression = None # ExpressionContext

        def LET(self):
            return self.getToken(KqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetVariableDeclaration" ):
                listener.enterLetVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetVariableDeclaration" ):
                listener.exitLetVariableDeclaration(self)




    def letVariableDeclaration(self):

        localctx = KqlParser.LetVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_letVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(KqlParser.LET)
            self.state = 648
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 649
            self.match(KqlParser.EQUAL)
            self.state = 650
            localctx.Expression = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetFunctionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.ParameterList = None # LetFunctionParameterListContext
            self.Body = None # LetFunctionBodyContext

        def LET(self):
            return self.getToken(KqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def letFunctionBody(self):
            return self.getTypedRuleContext(KqlParser.LetFunctionBodyContext,0)


        def letFunctionParameterList(self):
            return self.getTypedRuleContext(KqlParser.LetFunctionParameterListContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letFunctionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetFunctionDeclaration" ):
                listener.enterLetFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetFunctionDeclaration" ):
                listener.exitLetFunctionDeclaration(self)




    def letFunctionDeclaration(self):

        localctx = KqlParser.LetFunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_letFunctionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(KqlParser.LET)
            self.state = 653
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 654
            self.match(KqlParser.EQUAL)
            self.state = 655
            self.match(KqlParser.OPENPAREN)
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.OPENBRACKET) | (1 << KqlParser.ACCESS) | (1 << KqlParser.ACCUMULATE) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AS) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.BY) | (1 << KqlParser.CLUSTER) | (1 << KqlParser.CONSUME) | (1 << KqlParser.CONTAINS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KqlParser.COUNT - 66)) | (1 << (KqlParser.DATABASE - 66)) | (1 << (KqlParser.DATATABLE - 66)) | (1 << (KqlParser.DECLARE - 66)) | (1 << (KqlParser.DEFAULT - 66)) | (1 << (KqlParser.DELTA - 66)) | (1 << (KqlParser.DISTINCT - 66)) | (1 << (KqlParser.EDGES - 66)) | (1 << (KqlParser.EVALUATE - 66)) | (1 << (KqlParser.EXECUTE - 66)) | (1 << (KqlParser.EXTEND - 66)) | (1 << (KqlParser.EXTERNALDATA - 66)) | (1 << (KqlParser.FACET - 66)) | (1 << (KqlParser.FILTER - 66)) | (1 << (KqlParser.FIND - 66)) | (1 << (KqlParser.FORK - 66)) | (1 << (KqlParser.FROM - 66)) | (1 << (KqlParser.HAS - 66)) | (1 << (KqlParser.HIDDEN_ - 66)) | (1 << (KqlParser.HOT - 66)) | (1 << (KqlParser.HOTDATA - 66)) | (1 << (KqlParser.HOTINDEX - 66)) | (1 << (KqlParser.ID - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KqlParser.IN - 130)) | (1 << (KqlParser.INTO - 130)) | (1 << (KqlParser.INVOKE - 130)) | (1 << (KqlParser.LEGEND - 130)) | (1 << (KqlParser.LET - 130)) | (1 << (KqlParser.LIMIT - 130)) | (1 << (KqlParser.LINEAR - 130)) | (1 << (KqlParser.LIST - 130)) | (1 << (KqlParser.LOOKUP - 130)) | (1 << (KqlParser.LOG - 130)) | (1 << (KqlParser.MAP - 130)) | (1 << (KqlParser.MATERIALIZE - 130)) | (1 << (KqlParser.NODES - 130)) | (1 << (KqlParser.NONE - 130)) | (1 << (KqlParser.NULL - 130)) | (1 << (KqlParser.NULLS - 130)) | (1 << (KqlParser.OF - 130)) | (1 << (KqlParser.ON - 130)) | (1 << (KqlParser.OPTIONAL - 130)) | (1 << (KqlParser.OUTPUT - 130)) | (1 << (KqlParser.PACK - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (KqlParser.PARSE - 194)) | (1 << (KqlParser.PARTITION - 194)) | (1 << (KqlParser.PARTITIONBY - 194)) | (1 << (KqlParser.PATTERN - 194)) | (1 << (KqlParser.PLUGIN - 194)) | (1 << (KqlParser.PRINT - 194)) | (1 << (KqlParser.QUERYPARAMETERS - 194)) | (1 << (KqlParser.RANGE - 194)) | (1 << (KqlParser.REDUCE - 194)) | (1 << (KqlParser.RENDER - 194)) | (1 << (KqlParser.REPLACE - 194)) | (1 << (KqlParser.RESTRICT - 194)) | (1 << (KqlParser.SAMPLE - 194)) | (1 << (KqlParser.SAMPLE_DISTINCT - 194)) | (1 << (KqlParser.SCAN - 194)) | (1 << (KqlParser.SEARCH - 194)) | (1 << (KqlParser.SERIALIZE - 194)) | (1 << (KqlParser.SERIES - 194)) | (1 << (KqlParser.SET - 194)) | (1 << (KqlParser.SORT - 194)) | (1 << (KqlParser.STACKED - 194)) | (1 << (KqlParser.STACKED100 - 194)) | (1 << (KqlParser.STEP - 194)) | (1 << (KqlParser.SUMMARIZE - 194)) | (1 << (KqlParser.TAKE - 194)) | (1 << (KqlParser.THRESHOLD - 194)) | (1 << (KqlParser.TITLE - 194)) | (1 << (KqlParser.TO - 194)) | (1 << (KqlParser.TOP - 194)) | (1 << (KqlParser.TOP_HITTERS - 194)) | (1 << (KqlParser.TOP_NESTED - 194)) | (1 << (KqlParser.TOSCALAR - 194)) | (1 << (KqlParser.TOTABLE - 194)) | (1 << (KqlParser.TYPEOF - 194)) | (1 << (KqlParser.UNSTACKED - 194)) | (1 << (KqlParser.UUID - 194)) | (1 << (KqlParser.VIEW - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (KqlParser.VISIBLE - 258)) | (1 << (KqlParser.WHERE - 258)) | (1 << (KqlParser.WITH - 258)) | (1 << (KqlParser.XAXIS - 258)) | (1 << (KqlParser.XCOLUMN - 258)) | (1 << (KqlParser.XMAX - 258)) | (1 << (KqlParser.XMIN - 258)) | (1 << (KqlParser.XTITLE - 258)) | (1 << (KqlParser.YAXIS - 258)) | (1 << (KqlParser.YCOLUMNS - 258)) | (1 << (KqlParser.YMAX - 258)) | (1 << (KqlParser.YMIN - 258)) | (1 << (KqlParser.YSPLIT - 258)) | (1 << (KqlParser.YTITLE - 258)) | (1 << (KqlParser.BOOL - 258)) | (1 << (KqlParser.GUID - 258)) | (1 << (KqlParser.IDENTIFIER - 258)))) != 0):
                self.state = 656
                localctx.ParameterList = self.letFunctionParameterList()


            self.state = 659
            self.match(KqlParser.CLOSEPAREN)
            self.state = 660
            localctx.Body = self.letFunctionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetViewDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.ParameterList = None # LetViewParameterListContext
            self.Body = None # LetFunctionBodyContext

        def LET(self):
            return self.getToken(KqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def VIEW(self):
            return self.getToken(KqlParser.VIEW, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def letFunctionBody(self):
            return self.getTypedRuleContext(KqlParser.LetFunctionBodyContext,0)


        def letViewParameterList(self):
            return self.getTypedRuleContext(KqlParser.LetViewParameterListContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letViewDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetViewDeclaration" ):
                listener.enterLetViewDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetViewDeclaration" ):
                listener.exitLetViewDeclaration(self)




    def letViewDeclaration(self):

        localctx = KqlParser.LetViewDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_letViewDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(KqlParser.LET)
            self.state = 663
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 664
            self.match(KqlParser.EQUAL)
            self.state = 665
            self.match(KqlParser.VIEW)
            self.state = 666
            self.match(KqlParser.OPENPAREN)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.OPENBRACKET) | (1 << KqlParser.ACCESS) | (1 << KqlParser.ACCUMULATE) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AS) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.BY) | (1 << KqlParser.CLUSTER) | (1 << KqlParser.CONSUME) | (1 << KqlParser.CONTAINS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KqlParser.COUNT - 66)) | (1 << (KqlParser.DATABASE - 66)) | (1 << (KqlParser.DATATABLE - 66)) | (1 << (KqlParser.DECLARE - 66)) | (1 << (KqlParser.DEFAULT - 66)) | (1 << (KqlParser.DELTA - 66)) | (1 << (KqlParser.DISTINCT - 66)) | (1 << (KqlParser.EDGES - 66)) | (1 << (KqlParser.EVALUATE - 66)) | (1 << (KqlParser.EXECUTE - 66)) | (1 << (KqlParser.EXTEND - 66)) | (1 << (KqlParser.EXTERNALDATA - 66)) | (1 << (KqlParser.FACET - 66)) | (1 << (KqlParser.FILTER - 66)) | (1 << (KqlParser.FIND - 66)) | (1 << (KqlParser.FORK - 66)) | (1 << (KqlParser.FROM - 66)) | (1 << (KqlParser.HAS - 66)) | (1 << (KqlParser.HIDDEN_ - 66)) | (1 << (KqlParser.HOT - 66)) | (1 << (KqlParser.HOTDATA - 66)) | (1 << (KqlParser.HOTINDEX - 66)) | (1 << (KqlParser.ID - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KqlParser.IN - 130)) | (1 << (KqlParser.INTO - 130)) | (1 << (KqlParser.INVOKE - 130)) | (1 << (KqlParser.LEGEND - 130)) | (1 << (KqlParser.LET - 130)) | (1 << (KqlParser.LIMIT - 130)) | (1 << (KqlParser.LINEAR - 130)) | (1 << (KqlParser.LIST - 130)) | (1 << (KqlParser.LOOKUP - 130)) | (1 << (KqlParser.LOG - 130)) | (1 << (KqlParser.MAP - 130)) | (1 << (KqlParser.MATERIALIZE - 130)) | (1 << (KqlParser.NODES - 130)) | (1 << (KqlParser.NONE - 130)) | (1 << (KqlParser.NULL - 130)) | (1 << (KqlParser.NULLS - 130)) | (1 << (KqlParser.OF - 130)) | (1 << (KqlParser.ON - 130)) | (1 << (KqlParser.OPTIONAL - 130)) | (1 << (KqlParser.OUTPUT - 130)) | (1 << (KqlParser.PACK - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (KqlParser.PARSE - 194)) | (1 << (KqlParser.PARTITION - 194)) | (1 << (KqlParser.PARTITIONBY - 194)) | (1 << (KqlParser.PATTERN - 194)) | (1 << (KqlParser.PLUGIN - 194)) | (1 << (KqlParser.PRINT - 194)) | (1 << (KqlParser.QUERYPARAMETERS - 194)) | (1 << (KqlParser.RANGE - 194)) | (1 << (KqlParser.REDUCE - 194)) | (1 << (KqlParser.RENDER - 194)) | (1 << (KqlParser.REPLACE - 194)) | (1 << (KqlParser.RESTRICT - 194)) | (1 << (KqlParser.SAMPLE - 194)) | (1 << (KqlParser.SAMPLE_DISTINCT - 194)) | (1 << (KqlParser.SCAN - 194)) | (1 << (KqlParser.SEARCH - 194)) | (1 << (KqlParser.SERIALIZE - 194)) | (1 << (KqlParser.SERIES - 194)) | (1 << (KqlParser.SET - 194)) | (1 << (KqlParser.SORT - 194)) | (1 << (KqlParser.STACKED - 194)) | (1 << (KqlParser.STACKED100 - 194)) | (1 << (KqlParser.STEP - 194)) | (1 << (KqlParser.SUMMARIZE - 194)) | (1 << (KqlParser.TAKE - 194)) | (1 << (KqlParser.THRESHOLD - 194)) | (1 << (KqlParser.TITLE - 194)) | (1 << (KqlParser.TO - 194)) | (1 << (KqlParser.TOP - 194)) | (1 << (KqlParser.TOP_HITTERS - 194)) | (1 << (KqlParser.TOP_NESTED - 194)) | (1 << (KqlParser.TOSCALAR - 194)) | (1 << (KqlParser.TOTABLE - 194)) | (1 << (KqlParser.TYPEOF - 194)) | (1 << (KqlParser.UNSTACKED - 194)) | (1 << (KqlParser.UUID - 194)) | (1 << (KqlParser.VIEW - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (KqlParser.VISIBLE - 258)) | (1 << (KqlParser.WHERE - 258)) | (1 << (KqlParser.WITH - 258)) | (1 << (KqlParser.XAXIS - 258)) | (1 << (KqlParser.XCOLUMN - 258)) | (1 << (KqlParser.XMAX - 258)) | (1 << (KqlParser.XMIN - 258)) | (1 << (KqlParser.XTITLE - 258)) | (1 << (KqlParser.YAXIS - 258)) | (1 << (KqlParser.YCOLUMNS - 258)) | (1 << (KqlParser.YMAX - 258)) | (1 << (KqlParser.YMIN - 258)) | (1 << (KqlParser.YSPLIT - 258)) | (1 << (KqlParser.YTITLE - 258)) | (1 << (KqlParser.BOOL - 258)) | (1 << (KqlParser.GUID - 258)) | (1 << (KqlParser.IDENTIFIER - 258)))) != 0):
                self.state = 667
                localctx.ParameterList = self.letViewParameterList()


            self.state = 670
            self.match(KqlParser.CLOSEPAREN)
            self.state = 671
            localctx.Body = self.letFunctionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetViewParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._scalarParameter = None # ScalarParameterContext
            self.Parameters = list() # of ScalarParameterContexts

        def scalarParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ScalarParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.ScalarParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_letViewParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetViewParameterList" ):
                listener.enterLetViewParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetViewParameterList" ):
                listener.exitLetViewParameterList(self)




    def letViewParameterList(self):

        localctx = KqlParser.LetViewParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_letViewParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            localctx._scalarParameter = self.scalarParameter()
            localctx.Parameters.append(localctx._scalarParameter)
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 674
                self.match(KqlParser.COMMA)
                self.state = 675
                localctx._scalarParameter = self.scalarParameter()
                localctx.Parameters.append(localctx._scalarParameter)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetMaterializeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.Expression = None # PipeExpressionContext

        def LET(self):
            return self.getToken(KqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def MATERIALIZE(self):
            return self.getToken(KqlParser.MATERIALIZE, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def pipeExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letMaterializeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetMaterializeDeclaration" ):
                listener.enterLetMaterializeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetMaterializeDeclaration" ):
                listener.exitLetMaterializeDeclaration(self)




    def letMaterializeDeclaration(self):

        localctx = KqlParser.LetMaterializeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_letMaterializeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(KqlParser.LET)
            self.state = 682
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 683
            self.match(KqlParser.EQUAL)
            self.state = 684
            self.match(KqlParser.MATERIALIZE)
            self.state = 685
            self.match(KqlParser.OPENPAREN)
            self.state = 686
            localctx.Expression = self.pipeExpression()
            self.state = 687
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetEntityGroupDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def LET(self):
            return self.getToken(KqlParser.LET, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def entityGroupExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityGroupExpressionContext,0)


        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letEntityGroupDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetEntityGroupDeclaration" ):
                listener.enterLetEntityGroupDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetEntityGroupDeclaration" ):
                listener.exitLetEntityGroupDeclaration(self)




    def letEntityGroupDeclaration(self):

        localctx = KqlParser.LetEntityGroupDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_letEntityGroupDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(KqlParser.LET)
            self.state = 690
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 691
            self.match(KqlParser.EQUAL)
            self.state = 692
            self.entityGroupExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetFunctionParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._tabularParameter = None # TabularParameterContext
            self.TabularParameters = list() # of TabularParameterContexts
            self._scalarParameter = None # ScalarParameterContext
            self.ScalarParameters = list() # of ScalarParameterContexts

        def tabularParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.TabularParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.TabularParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def scalarParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ScalarParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.ScalarParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_letFunctionParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetFunctionParameterList" ):
                listener.enterLetFunctionParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetFunctionParameterList" ):
                listener.exitLetFunctionParameterList(self)




    def letFunctionParameterList(self):

        localctx = KqlParser.LetFunctionParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_letFunctionParameterList)
        try:
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 694
                localctx._tabularParameter = self.tabularParameter()
                localctx.TabularParameters.append(localctx._tabularParameter)

                self.state = 695
                self.match(KqlParser.COMMA)
                self.state = 696
                localctx._tabularParameter = self.tabularParameter()
                localctx.TabularParameters.append(localctx._tabularParameter)

                self.state = 698
                self.match(KqlParser.COMMA)
                self.state = 699
                localctx._scalarParameter = self.scalarParameter()
                localctx.ScalarParameters.append(localctx._scalarParameter)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                localctx._scalarParameter = self.scalarParameter()
                localctx.ScalarParameters.append(localctx._scalarParameter)

                self.state = 702
                self.match(KqlParser.COMMA)
                self.state = 703
                localctx._scalarParameter = self.scalarParameter()
                localctx.ScalarParameters.append(localctx._scalarParameter)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext
            self.Default = None # ScalarParameterDefaultContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(KqlParser.ScalarTypeContext,0)


        def scalarParameterDefault(self):
            return self.getTypedRuleContext(KqlParser.ScalarParameterDefaultContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_scalarParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarParameter" ):
                listener.enterScalarParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarParameter" ):
                listener.exitScalarParameter(self)




    def scalarParameter(self):

        localctx = KqlParser.ScalarParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_scalarParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            localctx.Name = self.parameterName()
            self.state = 708
            self.match(KqlParser.COLON)
            self.state = 709
            localctx.Type = self.scalarType()
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.EQUAL:
                self.state = 710
                localctx.Default = self.scalarParameterDefault()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarParameterDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Value = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def literalExpression(self):
            return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_scalarParameterDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarParameterDefault" ):
                listener.enterScalarParameterDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarParameterDefault" ):
                listener.exitScalarParameterDefault(self)




    def scalarParameterDefault(self):

        localctx = KqlParser.ScalarParameterDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_scalarParameterDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(KqlParser.EQUAL)
            self.state = 714
            localctx.Value = self.literalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabularParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.OpenSchema = None # TabularParameterOpenSchemaContext
            self.RowSchema = None # TabularParameterRowSchemaContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def tabularParameterOpenSchema(self):
            return self.getTypedRuleContext(KqlParser.TabularParameterOpenSchemaContext,0)


        def tabularParameterRowSchema(self):
            return self.getTypedRuleContext(KqlParser.TabularParameterRowSchemaContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_tabularParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabularParameter" ):
                listener.enterTabularParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabularParameter" ):
                listener.exitTabularParameter(self)




    def tabularParameter(self):

        localctx = KqlParser.TabularParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_tabularParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            localctx.Name = self.parameterName()
            self.state = 717
            self.match(KqlParser.COLON)
            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 718
                localctx.OpenSchema = self.tabularParameterOpenSchema()
                pass

            elif la_ == 2:
                self.state = 719
                localctx.RowSchema = self.tabularParameterRowSchema()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabularParameterOpenSchemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_tabularParameterOpenSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabularParameterOpenSchema" ):
                listener.enterTabularParameterOpenSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabularParameterOpenSchema" ):
                listener.exitTabularParameterOpenSchema(self)




    def tabularParameterOpenSchema(self):

        localctx = KqlParser.TabularParameterOpenSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_tabularParameterOpenSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(KqlParser.OPENPAREN)
            self.state = 723
            self.match(KqlParser.ASTERISK)
            self.state = 724
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabularParameterRowSchemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._tabularParameterRowSchemaColumnDeclaration = None # TabularParameterRowSchemaColumnDeclarationContext
            self.Columns = list() # of TabularParameterRowSchemaColumnDeclarationContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def tabularParameterRowSchemaColumnDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.TabularParameterRowSchemaColumnDeclarationContext)
            else:
                return self.getTypedRuleContext(KqlParser.TabularParameterRowSchemaColumnDeclarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_tabularParameterRowSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabularParameterRowSchema" ):
                listener.enterTabularParameterRowSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabularParameterRowSchema" ):
                listener.exitTabularParameterRowSchema(self)




    def tabularParameterRowSchema(self):

        localctx = KqlParser.TabularParameterRowSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_tabularParameterRowSchema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(KqlParser.OPENPAREN)
            self.state = 727
            localctx._tabularParameterRowSchemaColumnDeclaration = self.tabularParameterRowSchemaColumnDeclaration()
            localctx.Columns.append(localctx._tabularParameterRowSchemaColumnDeclaration)
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 728
                self.match(KqlParser.COMMA)
                self.state = 729
                localctx._tabularParameterRowSchemaColumnDeclaration = self.tabularParameterRowSchemaColumnDeclaration()
                localctx.Columns.append(localctx._tabularParameterRowSchemaColumnDeclaration)
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 735
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TabularParameterRowSchemaColumnDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(KqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_tabularParameterRowSchemaColumnDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTabularParameterRowSchemaColumnDeclaration" ):
                listener.enterTabularParameterRowSchemaColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTabularParameterRowSchemaColumnDeclaration" ):
                listener.exitTabularParameterRowSchemaColumnDeclaration(self)




    def tabularParameterRowSchemaColumnDeclaration(self):

        localctx = KqlParser.TabularParameterRowSchemaColumnDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_tabularParameterRowSchemaColumnDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            localctx.Name = self.parameterName()
            self.state = 738
            self.match(KqlParser.COLON)
            self.state = 739
            localctx.Type = self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetFunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._letFunctionBodyStatement = None # LetFunctionBodyStatementContext
            self.Statements = list() # of LetFunctionBodyStatementContexts
            self.Expression = None # ExpressionContext

        def OPENBRACE(self):
            return self.getToken(KqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(KqlParser.CLOSEBRACE, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.SEMICOLON)
            else:
                return self.getToken(KqlParser.SEMICOLON, i)

        def letFunctionBodyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.LetFunctionBodyStatementContext)
            else:
                return self.getTypedRuleContext(KqlParser.LetFunctionBodyStatementContext,i)


        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letFunctionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetFunctionBody" ):
                listener.enterLetFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetFunctionBody" ):
                listener.exitLetFunctionBody(self)




    def letFunctionBody(self):

        localctx = KqlParser.LetFunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_letFunctionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(KqlParser.OPENBRACE)
            self.state = 747
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 742
                    localctx._letFunctionBodyStatement = self.letFunctionBodyStatement()
                    localctx.Statements.append(localctx._letFunctionBodyStatement)
                    self.state = 743
                    self.match(KqlParser.SEMICOLON) 
                self.state = 749
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.ASTERISK) | (1 << KqlParser.DASH) | (1 << KqlParser.OPENBRACKET) | (1 << KqlParser.OPENPAREN) | (1 << KqlParser.PLUS) | (1 << KqlParser.ACCESS) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.CLUSTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (KqlParser.CONTEXTUAL_DATATABLE - 65)) | (1 << (KqlParser.COUNT - 65)) | (1 << (KqlParser.DATABASE - 65)) | (1 << (KqlParser.DATATABLE - 65)) | (1 << (KqlParser.DECLARE - 65)) | (1 << (KqlParser.DEFAULT - 65)) | (1 << (KqlParser.DELTA - 65)) | (1 << (KqlParser.EDGES - 65)) | (1 << (KqlParser.EVALUATE - 65)) | (1 << (KqlParser.EXECUTE - 65)) | (1 << (KqlParser.EXTERNALDATA - 65)) | (1 << (KqlParser.EXTERNAL_DATA - 65)) | (1 << (KqlParser.FACET - 65)) | (1 << (KqlParser.FIND - 65)) | (1 << (KqlParser.FORK - 65)) | (1 << (KqlParser.FROM - 65)) | (1 << (KqlParser.HIDDEN_ - 65)) | (1 << (KqlParser.HOT - 65)) | (1 << (KqlParser.HOTDATA - 65)) | (1 << (KqlParser.HOTINDEX - 65)) | (1 << (KqlParser.ID - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (KqlParser.INTO - 132)) | (1 << (KqlParser.LEGEND - 132)) | (1 << (KqlParser.LET - 132)) | (1 << (KqlParser.LINEAR - 132)) | (1 << (KqlParser.LIST - 132)) | (1 << (KqlParser.LOOKUP - 132)) | (1 << (KqlParser.LOG - 132)) | (1 << (KqlParser.MACROEXPAND - 132)) | (1 << (KqlParser.MAP - 132)) | (1 << (KqlParser.MATERIALIZED_VIEW_COMBINE - 132)) | (1 << (KqlParser.NODES - 132)) | (1 << (KqlParser.NONE - 132)) | (1 << (KqlParser.NULL - 132)) | (1 << (KqlParser.NULLS - 132)) | (1 << (KqlParser.ON - 132)) | (1 << (KqlParser.OPTIONAL - 132)) | (1 << (KqlParser.OUTPUT - 132)) | (1 << (KqlParser.PACK - 132)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (KqlParser.PARTITION - 197)) | (1 << (KqlParser.PARTITIONBY - 197)) | (1 << (KqlParser.PATTERN - 197)) | (1 << (KqlParser.PLUGIN - 197)) | (1 << (KqlParser.PRINT - 197)) | (1 << (KqlParser.QUERYPARAMETERS - 197)) | (1 << (KqlParser.RANGE - 197)) | (1 << (KqlParser.REDUCE - 197)) | (1 << (KqlParser.RENDER - 197)) | (1 << (KqlParser.REPLACE - 197)) | (1 << (KqlParser.RESTRICT - 197)) | (1 << (KqlParser.SEARCH - 197)) | (1 << (KqlParser.SERIES - 197)) | (1 << (KqlParser.STACKED - 197)) | (1 << (KqlParser.STACKED100 - 197)) | (1 << (KqlParser.STEP - 197)) | (1 << (KqlParser.THRESHOLD - 197)) | (1 << (KqlParser.TOSCALAR - 197)) | (1 << (KqlParser.TOTABLE - 197)) | (1 << (KqlParser.TYPEOF - 197)) | (1 << (KqlParser.UNION - 197)) | (1 << (KqlParser.UNSTACKED - 197)) | (1 << (KqlParser.UUID - 197)) | (1 << (KqlParser.VIEW - 197)) | (1 << (KqlParser.VISIBLE - 197)) | (1 << (KqlParser.WITH - 197)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (KqlParser.XAXIS - 268)) | (1 << (KqlParser.XCOLUMN - 268)) | (1 << (KqlParser.XMAX - 268)) | (1 << (KqlParser.XMIN - 268)) | (1 << (KqlParser.XTITLE - 268)) | (1 << (KqlParser.YAXIS - 268)) | (1 << (KqlParser.YCOLUMNS - 268)) | (1 << (KqlParser.YMAX - 268)) | (1 << (KqlParser.YMIN - 268)) | (1 << (KqlParser.YSPLIT - 268)) | (1 << (KqlParser.YTITLE - 268)) | (1 << (KqlParser.BOOL - 268)) | (1 << (KqlParser.DYNAMIC - 268)) | (1 << (KqlParser.GUID - 268)) | (1 << (KqlParser.LONGLITERAL - 268)) | (1 << (KqlParser.INTLITERAL - 268)) | (1 << (KqlParser.REALLITERAL - 268)) | (1 << (KqlParser.DECIMALLITERAL - 268)) | (1 << (KqlParser.STRINGLITERAL - 268)) | (1 << (KqlParser.BOOLEANLITERAL - 268)) | (1 << (KqlParser.DATETIMELITERAL - 268)) | (1 << (KqlParser.TIMESPANLITERAL - 268)) | (1 << (KqlParser.TYPELITERAL - 268)) | (1 << (KqlParser.GUIDLITERAL - 268)) | (1 << (KqlParser.IDENTIFIER - 268)))) != 0):
                self.state = 750
                localctx.Expression = self.expression()


            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.SEMICOLON:
                self.state = 753
                self.match(KqlParser.SEMICOLON)


            self.state = 756
            self.match(KqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetFunctionBodyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Let = None # LetStatementContext
            self.DeclareQueryParameters = None # DeclareQueryParametersStatementContext

        def letStatement(self):
            return self.getTypedRuleContext(KqlParser.LetStatementContext,0)


        def declareQueryParametersStatement(self):
            return self.getTypedRuleContext(KqlParser.DeclareQueryParametersStatementContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_letFunctionBodyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetFunctionBodyStatement" ):
                listener.enterLetFunctionBodyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetFunctionBodyStatement" ):
                listener.exitLetFunctionBodyStatement(self)




    def letFunctionBodyStatement(self):

        localctx = KqlParser.LetFunctionBodyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_letFunctionBodyStatement)
        try:
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.LET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                localctx.Let = self.letStatement()
                pass
            elif token in [KqlParser.DECLARE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 759
                localctx.DeclareQueryParameters = self.declareQueryParametersStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # SimpleNameReferenceContext
            self.Definition = None # DeclarePatternDefinitionContext

        def DECLARE(self):
            return self.getToken(KqlParser.DECLARE, 0)

        def PATTERN(self):
            return self.getToken(KqlParser.PATTERN, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def declarePatternDefinition(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternDefinitionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternStatement" ):
                listener.enterDeclarePatternStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternStatement" ):
                listener.exitDeclarePatternStatement(self)




    def declarePatternStatement(self):

        localctx = KqlParser.DeclarePatternStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_declarePatternStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(KqlParser.DECLARE)
            self.state = 763
            self.match(KqlParser.PATTERN)
            self.state = 764
            localctx.Name = self.simpleNameReference()
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.EQUAL:
                self.state = 765
                localctx.Definition = self.declarePatternDefinition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ParameterList = None # DeclarePatternParameterListContext
            self.Path = None # DeclarePatternPathParameterContext
            self._declarePatternRule = None # DeclarePatternRuleContext
            self.Rules = list() # of DeclarePatternRuleContexts

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def OPENBRACE(self):
            return self.getToken(KqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(KqlParser.CLOSEBRACE, 0)

        def declarePatternParameterList(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternParameterListContext,0)


        def declarePatternPathParameter(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternPathParameterContext,0)


        def declarePatternRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.DeclarePatternRuleContext)
            else:
                return self.getTypedRuleContext(KqlParser.DeclarePatternRuleContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternDefinition" ):
                listener.enterDeclarePatternDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternDefinition" ):
                listener.exitDeclarePatternDefinition(self)




    def declarePatternDefinition(self):

        localctx = KqlParser.DeclarePatternDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_declarePatternDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(KqlParser.EQUAL)
            self.state = 769
            localctx.ParameterList = self.declarePatternParameterList()
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.OPENBRACKET:
                self.state = 770
                localctx.Path = self.declarePatternPathParameter()


            self.state = 773
            self.match(KqlParser.OPENBRACE)
            self.state = 775 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 774
                localctx._declarePatternRule = self.declarePatternRule()
                localctx.Rules.append(localctx._declarePatternRule)
                self.state = 777 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==KqlParser.OPENPAREN):
                    break

            self.state = 779
            self.match(KqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._declarePatternParameter = None # DeclarePatternParameterContext
            self.Parameters = list() # of DeclarePatternParameterContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def declarePatternParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.DeclarePatternParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.DeclarePatternParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternParameterList" ):
                listener.enterDeclarePatternParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternParameterList" ):
                listener.exitDeclarePatternParameterList(self)




    def declarePatternParameterList(self):

        localctx = KqlParser.DeclarePatternParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_declarePatternParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(KqlParser.OPENPAREN)
            self.state = 782
            localctx._declarePatternParameter = self.declarePatternParameter()
            localctx.Parameters.append(localctx._declarePatternParameter)
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 783
                self.match(KqlParser.COMMA)
                self.state = 784
                localctx._declarePatternParameter = self.declarePatternParameter()
                localctx.Parameters.append(localctx._declarePatternParameter)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 790
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(KqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternParameter" ):
                listener.enterDeclarePatternParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternParameter" ):
                listener.exitDeclarePatternParameter(self)




    def declarePatternParameter(self):

        localctx = KqlParser.DeclarePatternParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_declarePatternParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            localctx.Name = self.parameterName()
            self.state = 793
            self.match(KqlParser.COLON)
            self.state = 794
            localctx.Type = self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternPathParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Parameter = None # DeclarePatternParameterContext

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def declarePatternParameter(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternParameterContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternPathParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternPathParameter" ):
                listener.enterDeclarePatternPathParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternPathParameter" ):
                listener.exitDeclarePatternPathParameter(self)




    def declarePatternPathParameter(self):

        localctx = KqlParser.DeclarePatternPathParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_declarePatternPathParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(KqlParser.OPENBRACKET)
            self.state = 797
            localctx.Parameter = self.declarePatternParameter()
            self.state = 798
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternRuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ArgumentList = None # DeclarePatternRuleArgumentListContext
            self.PathArgument = None # DeclarePatternRulePathArgumentContext
            self.Body = None # DeclarePatternBodyContext
            self.TrailingSemicolon = None # Token

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def declarePatternRuleArgumentList(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternRuleArgumentListContext,0)


        def declarePatternBody(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternBodyContext,0)


        def declarePatternRulePathArgument(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternRulePathArgumentContext,0)


        def SEMICOLON(self):
            return self.getToken(KqlParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternRule" ):
                listener.enterDeclarePatternRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternRule" ):
                listener.exitDeclarePatternRule(self)




    def declarePatternRule(self):

        localctx = KqlParser.DeclarePatternRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declarePatternRule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            localctx.ArgumentList = self.declarePatternRuleArgumentList()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.DOT:
                self.state = 801
                localctx.PathArgument = self.declarePatternRulePathArgument()


            self.state = 804
            self.match(KqlParser.EQUAL)
            self.state = 805
            localctx.Body = self.declarePatternBody()
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.SEMICOLON:
                self.state = 806
                localctx.TrailingSemicolon = self.match(KqlParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternRuleArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._declarePatternRuleArgument = None # DeclarePatternRuleArgumentContext
            self.Arguments = list() # of DeclarePatternRuleArgumentContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def declarePatternRuleArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.DeclarePatternRuleArgumentContext)
            else:
                return self.getTypedRuleContext(KqlParser.DeclarePatternRuleArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternRuleArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternRuleArgumentList" ):
                listener.enterDeclarePatternRuleArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternRuleArgumentList" ):
                listener.exitDeclarePatternRuleArgumentList(self)




    def declarePatternRuleArgumentList(self):

        localctx = KqlParser.DeclarePatternRuleArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declarePatternRuleArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(KqlParser.OPENPAREN)
            self.state = 810
            localctx._declarePatternRuleArgument = self.declarePatternRuleArgument()
            localctx.Arguments.append(localctx._declarePatternRuleArgument)
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 811
                self.match(KqlParser.COMMA)
                self.state = 812
                localctx._declarePatternRuleArgument = self.declarePatternRuleArgument()
                localctx.Arguments.append(localctx._declarePatternRuleArgument)
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 818
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternRulePathArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # DeclarePatternRuleArgumentContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def declarePatternRuleArgument(self):
            return self.getTypedRuleContext(KqlParser.DeclarePatternRuleArgumentContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternRulePathArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternRulePathArgument" ):
                listener.enterDeclarePatternRulePathArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternRulePathArgument" ):
                listener.exitDeclarePatternRulePathArgument(self)




    def declarePatternRulePathArgument(self):

        localctx = KqlParser.DeclarePatternRulePathArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declarePatternRulePathArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(KqlParser.DOT)
            self.state = 821
            self.match(KqlParser.OPENBRACKET)
            self.state = 822
            localctx.Expression = self.declarePatternRuleArgument()
            self.state = 823
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternRuleArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternRuleArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternRuleArgument" ):
                listener.enterDeclarePatternRuleArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternRuleArgument" ):
                listener.exitDeclarePatternRuleArgument(self)




    def declarePatternRuleArgument(self):

        localctx = KqlParser.DeclarePatternRuleArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declarePatternRuleArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.stringLiteralExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarePatternBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._letFunctionBodyStatement = None # LetFunctionBodyStatementContext
            self.Statements = list() # of LetFunctionBodyStatementContexts
            self.Expression = None # ExpressionContext

        def OPENBRACE(self):
            return self.getToken(KqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(KqlParser.CLOSEBRACE, 0)

        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.SEMICOLON)
            else:
                return self.getToken(KqlParser.SEMICOLON, i)

        def letFunctionBodyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.LetFunctionBodyStatementContext)
            else:
                return self.getTypedRuleContext(KqlParser.LetFunctionBodyStatementContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_declarePatternBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarePatternBody" ):
                listener.enterDeclarePatternBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarePatternBody" ):
                listener.exitDeclarePatternBody(self)




    def declarePatternBody(self):

        localctx = KqlParser.DeclarePatternBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declarePatternBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(KqlParser.OPENBRACE)
            self.state = 833
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 828
                    localctx._letFunctionBodyStatement = self.letFunctionBodyStatement()
                    localctx.Statements.append(localctx._letFunctionBodyStatement)
                    self.state = 829
                    self.match(KqlParser.SEMICOLON) 
                self.state = 835
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

            self.state = 836
            localctx.Expression = self.expression()
            self.state = 837
            self.match(KqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestrictAccessStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._restrictAccessStatementEntity = None # RestrictAccessStatementEntityContext
            self.Entities = list() # of RestrictAccessStatementEntityContexts

        def RESTRICT(self):
            return self.getToken(KqlParser.RESTRICT, 0)

        def ACCESS(self):
            return self.getToken(KqlParser.ACCESS, 0)

        def TO(self):
            return self.getToken(KqlParser.TO, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def restrictAccessStatementEntity(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RestrictAccessStatementEntityContext)
            else:
                return self.getTypedRuleContext(KqlParser.RestrictAccessStatementEntityContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_restrictAccessStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrictAccessStatement" ):
                listener.enterRestrictAccessStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrictAccessStatement" ):
                listener.exitRestrictAccessStatement(self)




    def restrictAccessStatement(self):

        localctx = KqlParser.RestrictAccessStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restrictAccessStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(KqlParser.RESTRICT)
            self.state = 840
            self.match(KqlParser.ACCESS)
            self.state = 841
            self.match(KqlParser.TO)
            self.state = 842
            self.match(KqlParser.OPENPAREN)
            self.state = 843
            localctx._restrictAccessStatementEntity = self.restrictAccessStatementEntity()
            localctx.Entities.append(localctx._restrictAccessStatementEntity)
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 844
                self.match(KqlParser.COMMA)
                self.state = 845
                localctx._restrictAccessStatementEntity = self.restrictAccessStatementEntity()
                localctx.Entities.append(localctx._restrictAccessStatementEntity)
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 851
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestrictAccessStatementEntityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SimpleName = None # SimpleNameReferenceContext
            self.WildcardedEntity = None # WildcardedEntityExpressionContext

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def wildcardedEntityExpression(self):
            return self.getTypedRuleContext(KqlParser.WildcardedEntityExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_restrictAccessStatementEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrictAccessStatementEntity" ):
                listener.enterRestrictAccessStatementEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrictAccessStatementEntity" ):
                listener.exitRestrictAccessStatementEntity(self)




    def restrictAccessStatementEntity(self):

        localctx = KqlParser.RestrictAccessStatementEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_restrictAccessStatementEntity)
        try:
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                localctx.SimpleName = self.simpleNameReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                localctx.WildcardedEntity = self.wildcardedEntityExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordNameContext
            self.Value = None # SetStatementOptionValueContext

        def SET(self):
            return self.getToken(KqlParser.SET, 0)

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordNameContext,0)


        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def setStatementOptionValue(self):
            return self.getTypedRuleContext(KqlParser.SetStatementOptionValueContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_setStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatement" ):
                listener.enterSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatement" ):
                listener.exitSetStatement(self)




    def setStatement(self):

        localctx = KqlParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(KqlParser.SET)
            self.state = 858
            localctx.Name = self.identifierOrKeywordName()
            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.EQUAL:
                self.state = 859
                self.match(KqlParser.EQUAL)
                self.state = 860
                localctx.Value = self.setStatementOptionValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementOptionValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordNameContext
            self.Literal = None # LiteralExpressionContext

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordNameContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_setStatementOptionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStatementOptionValue" ):
                listener.enterSetStatementOptionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStatementOptionValue" ):
                listener.exitSetStatementOptionValue(self)




    def setStatementOptionValue(self):

        localctx = KqlParser.SetStatementOptionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_setStatementOptionValue)
        try:
            self.state = 865
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID, KqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 863
                localctx.Name = self.identifierOrKeywordName()
                pass
            elif token in [KqlParser.DASH, KqlParser.PLUS, KqlParser.DYNAMIC, KqlParser.LONGLITERAL, KqlParser.INTLITERAL, KqlParser.REALLITERAL, KqlParser.DECIMALLITERAL, KqlParser.STRINGLITERAL, KqlParser.BOOLEANLITERAL, KqlParser.DATETIMELITERAL, KqlParser.TIMESPANLITERAL, KqlParser.TYPELITERAL, KqlParser.GUIDLITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 864
                localctx.Literal = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareQueryParametersStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._declareQueryParametersStatementParameter = None # DeclareQueryParametersStatementParameterContext
            self.Parameters = list() # of DeclareQueryParametersStatementParameterContexts

        def DECLARE(self):
            return self.getToken(KqlParser.DECLARE, 0)

        def QUERYPARAMETERS(self):
            return self.getToken(KqlParser.QUERYPARAMETERS, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def declareQueryParametersStatementParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.DeclareQueryParametersStatementParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.DeclareQueryParametersStatementParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_declareQueryParametersStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareQueryParametersStatement" ):
                listener.enterDeclareQueryParametersStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareQueryParametersStatement" ):
                listener.exitDeclareQueryParametersStatement(self)




    def declareQueryParametersStatement(self):

        localctx = KqlParser.DeclareQueryParametersStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_declareQueryParametersStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(KqlParser.DECLARE)
            self.state = 868
            self.match(KqlParser.QUERYPARAMETERS)
            self.state = 869
            self.match(KqlParser.OPENPAREN)
            self.state = 870
            localctx._declareQueryParametersStatementParameter = self.declareQueryParametersStatementParameter()
            localctx.Parameters.append(localctx._declareQueryParametersStatementParameter)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 871
                self.match(KqlParser.COMMA)
                self.state = 872
                localctx._declareQueryParametersStatementParameter = self.declareQueryParametersStatementParameter()
                localctx.Parameters.append(localctx._declareQueryParametersStatementParameter)
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 878
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareQueryParametersStatementParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext
            self.Default = None # ScalarParameterDefaultContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(KqlParser.ScalarTypeContext,0)


        def scalarParameterDefault(self):
            return self.getTypedRuleContext(KqlParser.ScalarParameterDefaultContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_declareQueryParametersStatementParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareQueryParametersStatementParameter" ):
                listener.enterDeclareQueryParametersStatementParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareQueryParametersStatementParameter" ):
                listener.exitDeclareQueryParametersStatementParameter(self)




    def declareQueryParametersStatementParameter(self):

        localctx = KqlParser.DeclareQueryParametersStatementParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_declareQueryParametersStatementParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            localctx.Name = self.parameterName()
            self.state = 881
            self.match(KqlParser.COLON)
            self.state = 882
            localctx.Type = self.scalarType()
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.EQUAL:
                self.state = 883
                localctx.Default = self.scalarParameterDefault()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_queryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryStatement" ):
                listener.enterQueryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryStatement" ):
                listener.exitQueryStatement(self)




    def queryStatement(self):

        localctx = KqlParser.QueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_queryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            localctx.Expression = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pipeExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = KqlParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.pipeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PipeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # BeforePipeExpressionContext
            self._pipedOperator = None # PipedOperatorContext
            self.PipedOperators = list() # of PipedOperatorContexts

        def beforePipeExpression(self):
            return self.getTypedRuleContext(KqlParser.BeforePipeExpressionContext,0)


        def pipedOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.PipedOperatorContext)
            else:
                return self.getTypedRuleContext(KqlParser.PipedOperatorContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_pipeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPipeExpression" ):
                listener.enterPipeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPipeExpression" ):
                listener.exitPipeExpression(self)




    def pipeExpression(self):

        localctx = KqlParser.PipeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pipeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            localctx.Expression = self.beforePipeExpression()
            self.state = 894
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 891
                    localctx._pipedOperator = self.pipedOperator()
                    localctx.PipedOperators.append(localctx._pipedOperator) 
                self.state = 896
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PipedOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # AfterPipeOperatorContext

        def BAR(self):
            return self.getToken(KqlParser.BAR, 0)

        def afterPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.AfterPipeOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_pipedOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPipedOperator" ):
                listener.enterPipedOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPipedOperator" ):
                listener.exitPipedOperator(self)




    def pipedOperator(self):

        localctx = KqlParser.PipedOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pipedOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(KqlParser.BAR)
            self.state = 898
            localctx.Operator = self.afterPipeOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PipeSubExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # AfterPipeOperatorContext
            self._pipedOperator = None # PipedOperatorContext
            self.PipedOperators = list() # of PipedOperatorContexts

        def afterPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.AfterPipeOperatorContext,0)


        def pipedOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.PipedOperatorContext)
            else:
                return self.getTypedRuleContext(KqlParser.PipedOperatorContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_pipeSubExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPipeSubExpression" ):
                listener.enterPipeSubExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPipeSubExpression" ):
                listener.exitPipeSubExpression(self)




    def pipeSubExpression(self):

        localctx = KqlParser.PipeSubExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_pipeSubExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            localctx.Expression = self.afterPipeOperator()
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.BAR:
                self.state = 901
                localctx._pipedOperator = self.pipedOperator()
                localctx.PipedOperators.append(localctx._pipedOperator)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeforePipeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def beforeOrAfterPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.BeforeOrAfterPipeOperatorContext,0)


        def printOperator(self):
            return self.getTypedRuleContext(KqlParser.PrintOperatorContext,0)


        def macroExpandOperator(self):
            return self.getTypedRuleContext(KqlParser.MacroExpandOperatorContext,0)


        def rangeExpression(self):
            return self.getTypedRuleContext(KqlParser.RangeExpressionContext,0)


        def scopedFunctionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.ScopedFunctionCallExpressionContext,0)


        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_beforePipeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeforePipeExpression" ):
                listener.enterBeforePipeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeforePipeExpression" ):
                listener.exitBeforePipeExpression(self)




    def beforePipeExpression(self):

        localctx = KqlParser.BeforePipeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_beforePipeExpression)
        try:
            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                self.beforeOrAfterPipeOperator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 908
                self.printOperator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 909
                self.macroExpandOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 910
                self.rangeExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 911
                self.scopedFunctionCallExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 912
                self.unnamedExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AfterPipeOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asOperator(self):
            return self.getTypedRuleContext(KqlParser.AsOperatorContext,0)


        def assertSchemaOperator(self):
            return self.getTypedRuleContext(KqlParser.AssertSchemaOperatorContext,0)


        def consumeOperator(self):
            return self.getTypedRuleContext(KqlParser.ConsumeOperatorContext,0)


        def countOperator(self):
            return self.getTypedRuleContext(KqlParser.CountOperatorContext,0)


        def distinctOperator(self):
            return self.getTypedRuleContext(KqlParser.DistinctOperatorContext,0)


        def executeAndCacheOperator(self):
            return self.getTypedRuleContext(KqlParser.ExecuteAndCacheOperatorContext,0)


        def extendOperator(self):
            return self.getTypedRuleContext(KqlParser.ExtendOperatorContext,0)


        def facetByOperator(self):
            return self.getTypedRuleContext(KqlParser.FacetByOperatorContext,0)


        def findOperator(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorContext,0)


        def forkOperator(self):
            return self.getTypedRuleContext(KqlParser.ForkOperatorContext,0)


        def getSchemaOperator(self):
            return self.getTypedRuleContext(KqlParser.GetSchemaOperatorContext,0)


        def graphMarkComponentsOperator(self):
            return self.getTypedRuleContext(KqlParser.GraphMarkComponentsOperatorContext,0)


        def graphMatchOperator(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchOperatorContext,0)


        def graphMergeOperator(self):
            return self.getTypedRuleContext(KqlParser.GraphMergeOperatorContext,0)


        def graphShortestPathsOperator(self):
            return self.getTypedRuleContext(KqlParser.GraphShortestPathsOperatorContext,0)


        def graphToTableOperator(self):
            return self.getTypedRuleContext(KqlParser.GraphToTableOperatorContext,0)


        def invokeOperator(self):
            return self.getTypedRuleContext(KqlParser.InvokeOperatorContext,0)


        def joinOperator(self):
            return self.getTypedRuleContext(KqlParser.JoinOperatorContext,0)


        def lookupOperator(self):
            return self.getTypedRuleContext(KqlParser.LookupOperatorContext,0)


        def makeGraphOperator(self):
            return self.getTypedRuleContext(KqlParser.MakeGraphOperatorContext,0)


        def makeSeriesOperator(self):
            return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorContext,0)


        def mvexpandOperator(self):
            return self.getTypedRuleContext(KqlParser.MvexpandOperatorContext,0)


        def mvapplyOperator(self):
            return self.getTypedRuleContext(KqlParser.MvapplyOperatorContext,0)


        def evaluateOperator(self):
            return self.getTypedRuleContext(KqlParser.EvaluateOperatorContext,0)


        def parseOperator(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorContext,0)


        def parseKvOperator(self):
            return self.getTypedRuleContext(KqlParser.ParseKvOperatorContext,0)


        def parseWhereOperator(self):
            return self.getTypedRuleContext(KqlParser.ParseWhereOperatorContext,0)


        def partitionOperator(self):
            return self.getTypedRuleContext(KqlParser.PartitionOperatorContext,0)


        def partitionByOperator(self):
            return self.getTypedRuleContext(KqlParser.PartitionByOperatorContext,0)


        def projectOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectOperatorContext,0)


        def projectAwayOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectAwayOperatorContext,0)


        def projectRenameOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectRenameOperatorContext,0)


        def projectReorderOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectReorderOperatorContext,0)


        def projectKeepOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectKeepOperatorContext,0)


        def reduceByOperator(self):
            return self.getTypedRuleContext(KqlParser.ReduceByOperatorContext,0)


        def renderOperator(self):
            return self.getTypedRuleContext(KqlParser.RenderOperatorContext,0)


        def sampleOperator(self):
            return self.getTypedRuleContext(KqlParser.SampleOperatorContext,0)


        def sampleDistinctOperator(self):
            return self.getTypedRuleContext(KqlParser.SampleDistinctOperatorContext,0)


        def scanOperator(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorContext,0)


        def searchOperator(self):
            return self.getTypedRuleContext(KqlParser.SearchOperatorContext,0)


        def serializeOperator(self):
            return self.getTypedRuleContext(KqlParser.SerializeOperatorContext,0)


        def sortOperator(self):
            return self.getTypedRuleContext(KqlParser.SortOperatorContext,0)


        def summarizeOperator(self):
            return self.getTypedRuleContext(KqlParser.SummarizeOperatorContext,0)


        def takeOperator(self):
            return self.getTypedRuleContext(KqlParser.TakeOperatorContext,0)


        def topHittersOperator(self):
            return self.getTypedRuleContext(KqlParser.TopHittersOperatorContext,0)


        def topOperator(self):
            return self.getTypedRuleContext(KqlParser.TopOperatorContext,0)


        def topNestedOperator(self):
            return self.getTypedRuleContext(KqlParser.TopNestedOperatorContext,0)


        def unionOperator(self):
            return self.getTypedRuleContext(KqlParser.UnionOperatorContext,0)


        def whereOperator(self):
            return self.getTypedRuleContext(KqlParser.WhereOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_afterPipeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAfterPipeOperator" ):
                listener.enterAfterPipeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAfterPipeOperator" ):
                listener.exitAfterPipeOperator(self)




    def afterPipeOperator(self):

        localctx = KqlParser.AfterPipeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_afterPipeOperator)
        try:
            self.state = 964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.AS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.asOperator()
                pass
            elif token in [KqlParser.ASSERTSCHEMA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.assertSchemaOperator()
                pass
            elif token in [KqlParser.CONSUME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.consumeOperator()
                pass
            elif token in [KqlParser.COUNT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 918
                self.countOperator()
                pass
            elif token in [KqlParser.DISTINCT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 919
                self.distinctOperator()
                pass
            elif token in [KqlParser.EXECUTE_AND_CACHE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 920
                self.executeAndCacheOperator()
                pass
            elif token in [KqlParser.EXTEND]:
                self.enterOuterAlt(localctx, 7)
                self.state = 921
                self.extendOperator()
                pass
            elif token in [KqlParser.FACET]:
                self.enterOuterAlt(localctx, 8)
                self.state = 922
                self.facetByOperator()
                pass
            elif token in [KqlParser.FIND]:
                self.enterOuterAlt(localctx, 9)
                self.state = 923
                self.findOperator()
                pass
            elif token in [KqlParser.FORK]:
                self.enterOuterAlt(localctx, 10)
                self.state = 924
                self.forkOperator()
                pass
            elif token in [KqlParser.GETSCHEMA]:
                self.enterOuterAlt(localctx, 11)
                self.state = 925
                self.getSchemaOperator()
                pass
            elif token in [KqlParser.GRAPHMARKCOMPONENTS]:
                self.enterOuterAlt(localctx, 12)
                self.state = 926
                self.graphMarkComponentsOperator()
                pass
            elif token in [KqlParser.GRAPHMATCH]:
                self.enterOuterAlt(localctx, 13)
                self.state = 927
                self.graphMatchOperator()
                pass
            elif token in [KqlParser.GRAPHMERGE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 928
                self.graphMergeOperator()
                pass
            elif token in [KqlParser.GRAPHSHORTESTPATHS]:
                self.enterOuterAlt(localctx, 15)
                self.state = 929
                self.graphShortestPathsOperator()
                pass
            elif token in [KqlParser.GRAPHTOTABLE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 930
                self.graphToTableOperator()
                pass
            elif token in [KqlParser.INVOKE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 931
                self.invokeOperator()
                pass
            elif token in [KqlParser.JOIN]:
                self.enterOuterAlt(localctx, 18)
                self.state = 932
                self.joinOperator()
                pass
            elif token in [KqlParser.LOOKUP]:
                self.enterOuterAlt(localctx, 19)
                self.state = 933
                self.lookupOperator()
                pass
            elif token in [KqlParser.MAKEGRAPH]:
                self.enterOuterAlt(localctx, 20)
                self.state = 934
                self.makeGraphOperator()
                pass
            elif token in [KqlParser.MAKESERIES]:
                self.enterOuterAlt(localctx, 21)
                self.state = 935
                self.makeSeriesOperator()
                pass
            elif token in [KqlParser.MV_EXPAND, KqlParser.MVEXPAND]:
                self.enterOuterAlt(localctx, 22)
                self.state = 936
                self.mvexpandOperator()
                pass
            elif token in [KqlParser.MV_APPLY, KqlParser.MVAPPLY]:
                self.enterOuterAlt(localctx, 23)
                self.state = 937
                self.mvapplyOperator()
                pass
            elif token in [KqlParser.EVALUATE]:
                self.enterOuterAlt(localctx, 24)
                self.state = 938
                self.evaluateOperator()
                pass
            elif token in [KqlParser.PARSE]:
                self.enterOuterAlt(localctx, 25)
                self.state = 939
                self.parseOperator()
                pass
            elif token in [KqlParser.PARSEKV]:
                self.enterOuterAlt(localctx, 26)
                self.state = 940
                self.parseKvOperator()
                pass
            elif token in [KqlParser.PARSEWHERE]:
                self.enterOuterAlt(localctx, 27)
                self.state = 941
                self.parseWhereOperator()
                pass
            elif token in [KqlParser.PARTITION]:
                self.enterOuterAlt(localctx, 28)
                self.state = 942
                self.partitionOperator()
                pass
            elif token in [KqlParser.PARTITIONBY]:
                self.enterOuterAlt(localctx, 29)
                self.state = 943
                self.partitionByOperator()
                pass
            elif token in [KqlParser.PROJECT]:
                self.enterOuterAlt(localctx, 30)
                self.state = 944
                self.projectOperator()
                pass
            elif token in [KqlParser.PROJECTAWAY]:
                self.enterOuterAlt(localctx, 31)
                self.state = 945
                self.projectAwayOperator()
                pass
            elif token in [KqlParser.PROJECTRENAME]:
                self.enterOuterAlt(localctx, 32)
                self.state = 946
                self.projectRenameOperator()
                pass
            elif token in [KqlParser.PROJECTREORDER]:
                self.enterOuterAlt(localctx, 33)
                self.state = 947
                self.projectReorderOperator()
                pass
            elif token in [KqlParser.PROJECTKEEP]:
                self.enterOuterAlt(localctx, 34)
                self.state = 948
                self.projectKeepOperator()
                pass
            elif token in [KqlParser.REDUCE]:
                self.enterOuterAlt(localctx, 35)
                self.state = 949
                self.reduceByOperator()
                pass
            elif token in [KqlParser.RENDER]:
                self.enterOuterAlt(localctx, 36)
                self.state = 950
                self.renderOperator()
                pass
            elif token in [KqlParser.SAMPLE]:
                self.enterOuterAlt(localctx, 37)
                self.state = 951
                self.sampleOperator()
                pass
            elif token in [KqlParser.SAMPLE_DISTINCT]:
                self.enterOuterAlt(localctx, 38)
                self.state = 952
                self.sampleDistinctOperator()
                pass
            elif token in [KqlParser.SCAN]:
                self.enterOuterAlt(localctx, 39)
                self.state = 953
                self.scanOperator()
                pass
            elif token in [KqlParser.SEARCH]:
                self.enterOuterAlt(localctx, 40)
                self.state = 954
                self.searchOperator()
                pass
            elif token in [KqlParser.SERIALIZE]:
                self.enterOuterAlt(localctx, 41)
                self.state = 955
                self.serializeOperator()
                pass
            elif token in [KqlParser.ORDER, KqlParser.SORT]:
                self.enterOuterAlt(localctx, 42)
                self.state = 956
                self.sortOperator()
                pass
            elif token in [KqlParser.SUMMARIZE]:
                self.enterOuterAlt(localctx, 43)
                self.state = 957
                self.summarizeOperator()
                pass
            elif token in [KqlParser.LIMIT, KqlParser.TAKE]:
                self.enterOuterAlt(localctx, 44)
                self.state = 958
                self.takeOperator()
                pass
            elif token in [KqlParser.TOP_HITTERS]:
                self.enterOuterAlt(localctx, 45)
                self.state = 959
                self.topHittersOperator()
                pass
            elif token in [KqlParser.TOP]:
                self.enterOuterAlt(localctx, 46)
                self.state = 960
                self.topOperator()
                pass
            elif token in [KqlParser.TOP_NESTED]:
                self.enterOuterAlt(localctx, 47)
                self.state = 961
                self.topNestedOperator()
                pass
            elif token in [KqlParser.UNION]:
                self.enterOuterAlt(localctx, 48)
                self.state = 962
                self.unionOperator()
                pass
            elif token in [KqlParser.FILTER, KqlParser.WHERE]:
                self.enterOuterAlt(localctx, 49)
                self.state = 963
                self.whereOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeforeOrAfterPipeOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def findOperator(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorContext,0)


        def searchOperator(self):
            return self.getTypedRuleContext(KqlParser.SearchOperatorContext,0)


        def unionOperator(self):
            return self.getTypedRuleContext(KqlParser.UnionOperatorContext,0)


        def evaluateOperator(self):
            return self.getTypedRuleContext(KqlParser.EvaluateOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_beforeOrAfterPipeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeforeOrAfterPipeOperator" ):
                listener.enterBeforeOrAfterPipeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeforeOrAfterPipeOperator" ):
                listener.exitBeforeOrAfterPipeOperator(self)




    def beforeOrAfterPipeOperator(self):

        localctx = KqlParser.BeforeOrAfterPipeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_beforeOrAfterPipeOperator)
        try:
            self.state = 970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.FIND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 966
                self.findOperator()
                pass
            elif token in [KqlParser.SEARCH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 967
                self.searchOperator()
                pass
            elif token in [KqlParser.UNION]:
                self.enterOuterAlt(localctx, 3)
                self.state = 968
                self.unionOperator()
                pass
            elif token in [KqlParser.EVALUATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 969
                self.evaluateOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkPipeOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def countOperator(self):
            return self.getTypedRuleContext(KqlParser.CountOperatorContext,0)


        def extendOperator(self):
            return self.getTypedRuleContext(KqlParser.ExtendOperatorContext,0)


        def whereOperator(self):
            return self.getTypedRuleContext(KqlParser.WhereOperatorContext,0)


        def parseOperator(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorContext,0)


        def parseWhereOperator(self):
            return self.getTypedRuleContext(KqlParser.ParseWhereOperatorContext,0)


        def takeOperator(self):
            return self.getTypedRuleContext(KqlParser.TakeOperatorContext,0)


        def topNestedOperator(self):
            return self.getTypedRuleContext(KqlParser.TopNestedOperatorContext,0)


        def projectOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectOperatorContext,0)


        def projectAwayOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectAwayOperatorContext,0)


        def projectRenameOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectRenameOperatorContext,0)


        def projectReorderOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectReorderOperatorContext,0)


        def projectKeepOperator(self):
            return self.getTypedRuleContext(KqlParser.ProjectKeepOperatorContext,0)


        def summarizeOperator(self):
            return self.getTypedRuleContext(KqlParser.SummarizeOperatorContext,0)


        def distinctOperator(self):
            return self.getTypedRuleContext(KqlParser.DistinctOperatorContext,0)


        def topHittersOperator(self):
            return self.getTypedRuleContext(KqlParser.TopHittersOperatorContext,0)


        def topOperator(self):
            return self.getTypedRuleContext(KqlParser.TopOperatorContext,0)


        def sortOperator(self):
            return self.getTypedRuleContext(KqlParser.SortOperatorContext,0)


        def mvexpandOperator(self):
            return self.getTypedRuleContext(KqlParser.MvexpandOperatorContext,0)


        def reduceByOperator(self):
            return self.getTypedRuleContext(KqlParser.ReduceByOperatorContext,0)


        def sampleOperator(self):
            return self.getTypedRuleContext(KqlParser.SampleOperatorContext,0)


        def sampleDistinctOperator(self):
            return self.getTypedRuleContext(KqlParser.SampleDistinctOperatorContext,0)


        def asOperator(self):
            return self.getTypedRuleContext(KqlParser.AsOperatorContext,0)


        def invokeOperator(self):
            return self.getTypedRuleContext(KqlParser.InvokeOperatorContext,0)


        def executeAndCacheOperator(self):
            return self.getTypedRuleContext(KqlParser.ExecuteAndCacheOperatorContext,0)


        def scanOperator(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_forkPipeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkPipeOperator" ):
                listener.enterForkPipeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkPipeOperator" ):
                listener.exitForkPipeOperator(self)




    def forkPipeOperator(self):

        localctx = KqlParser.ForkPipeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_forkPipeOperator)
        try:
            self.state = 997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.COUNT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.countOperator()
                pass
            elif token in [KqlParser.EXTEND]:
                self.enterOuterAlt(localctx, 2)
                self.state = 973
                self.extendOperator()
                pass
            elif token in [KqlParser.FILTER, KqlParser.WHERE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 974
                self.whereOperator()
                pass
            elif token in [KqlParser.PARSE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 975
                self.parseOperator()
                pass
            elif token in [KqlParser.PARSEWHERE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 976
                self.parseWhereOperator()
                pass
            elif token in [KqlParser.LIMIT, KqlParser.TAKE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 977
                self.takeOperator()
                pass
            elif token in [KqlParser.TOP_NESTED]:
                self.enterOuterAlt(localctx, 7)
                self.state = 978
                self.topNestedOperator()
                pass
            elif token in [KqlParser.PROJECT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 979
                self.projectOperator()
                pass
            elif token in [KqlParser.PROJECTAWAY]:
                self.enterOuterAlt(localctx, 9)
                self.state = 980
                self.projectAwayOperator()
                pass
            elif token in [KqlParser.PROJECTRENAME]:
                self.enterOuterAlt(localctx, 10)
                self.state = 981
                self.projectRenameOperator()
                pass
            elif token in [KqlParser.PROJECTREORDER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 982
                self.projectReorderOperator()
                pass
            elif token in [KqlParser.PROJECTKEEP]:
                self.enterOuterAlt(localctx, 12)
                self.state = 983
                self.projectKeepOperator()
                pass
            elif token in [KqlParser.SUMMARIZE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 984
                self.summarizeOperator()
                pass
            elif token in [KqlParser.DISTINCT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 985
                self.distinctOperator()
                pass
            elif token in [KqlParser.TOP_HITTERS]:
                self.enterOuterAlt(localctx, 15)
                self.state = 986
                self.topHittersOperator()
                pass
            elif token in [KqlParser.TOP]:
                self.enterOuterAlt(localctx, 16)
                self.state = 987
                self.topOperator()
                pass
            elif token in [KqlParser.ORDER, KqlParser.SORT]:
                self.enterOuterAlt(localctx, 17)
                self.state = 988
                self.sortOperator()
                pass
            elif token in [KqlParser.MV_EXPAND, KqlParser.MVEXPAND]:
                self.enterOuterAlt(localctx, 18)
                self.state = 989
                self.mvexpandOperator()
                pass
            elif token in [KqlParser.REDUCE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 990
                self.reduceByOperator()
                pass
            elif token in [KqlParser.SAMPLE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 991
                self.sampleOperator()
                pass
            elif token in [KqlParser.SAMPLE_DISTINCT]:
                self.enterOuterAlt(localctx, 21)
                self.state = 992
                self.sampleDistinctOperator()
                pass
            elif token in [KqlParser.AS]:
                self.enterOuterAlt(localctx, 22)
                self.state = 993
                self.asOperator()
                pass
            elif token in [KqlParser.INVOKE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 994
                self.invokeOperator()
                pass
            elif token in [KqlParser.EXECUTE_AND_CACHE]:
                self.enterOuterAlt(localctx, 24)
                self.state = 995
                self.executeAndCacheOperator()
                pass
            elif token in [KqlParser.SCAN]:
                self.enterOuterAlt(localctx, 25)
                self.state = 996
                self.scanOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def AS(self):
            return self.getToken(KqlParser.AS, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_asOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsOperator" ):
                listener.enterAsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsOperator" ):
                listener.exitAsOperator(self)




    def asOperator(self):

        localctx = KqlParser.AsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_asOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(KqlParser.AS)
            self.state = 1003
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1000
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1005
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 1006
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertSchemaOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Schema = None # RowSchemaContext

        def ASSERTSCHEMA(self):
            return self.getToken(KqlParser.ASSERTSCHEMA, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(KqlParser.RowSchemaContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_assertSchemaOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertSchemaOperator" ):
                listener.enterAssertSchemaOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertSchemaOperator" ):
                listener.exitAssertSchemaOperator(self)




    def assertSchemaOperator(self):

        localctx = KqlParser.AssertSchemaOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_assertSchemaOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(KqlParser.ASSERTSCHEMA)
            self.state = 1009
            localctx.Schema = self.rowSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConsumeOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts

        def CONSUME(self):
            return self.getToken(KqlParser.CONSUME, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_consumeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConsumeOperator" ):
                listener.enterConsumeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConsumeOperator" ):
                listener.exitConsumeOperator(self)




    def consumeOperator(self):

        localctx = KqlParser.ConsumeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_consumeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(KqlParser.CONSUME)
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0):
                self.state = 1012
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts

        def COUNT(self):
            return self.getToken(KqlParser.COUNT, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_countOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountOperator" ):
                listener.enterCountOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountOperator" ):
                listener.exitCountOperator(self)




    def countOperator(self):

        localctx = KqlParser.CountOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_countOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(KqlParser.COUNT)
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0):
                self.state = 1019
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountOperatorAsClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierNameContext

        def AS(self):
            return self.getToken(KqlParser.AS, 0)

        def identifierName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_countOperatorAsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountOperatorAsClause" ):
                listener.enterCountOperatorAsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountOperatorAsClause" ):
                listener.exitCountOperatorAsClause(self)




    def countOperatorAsClause(self):

        localctx = KqlParser.CountOperatorAsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_countOperatorAsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(KqlParser.AS)
            self.state = 1026
            localctx.Name = self.identifierName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinctOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Star = None # DistinctOperatorStarTargetContext
            self.ColumnList = None # DistinctOperatorColumnListTargetContext

        def DISTINCT(self):
            return self.getToken(KqlParser.DISTINCT, 0)

        def distinctOperatorStarTarget(self):
            return self.getTypedRuleContext(KqlParser.DistinctOperatorStarTargetContext,0)


        def distinctOperatorColumnListTarget(self):
            return self.getTypedRuleContext(KqlParser.DistinctOperatorColumnListTargetContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_distinctOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctOperator" ):
                listener.enterDistinctOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctOperator" ):
                listener.exitDistinctOperator(self)




    def distinctOperator(self):

        localctx = KqlParser.DistinctOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_distinctOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(KqlParser.DISTINCT)
            self.state = 1032
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1029
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1034
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 1035
                localctx.Star = self.distinctOperatorStarTarget()
                pass

            elif la_ == 2:
                self.state = 1036
                localctx.ColumnList = self.distinctOperatorColumnListTarget()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinctOperatorStarTargetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_distinctOperatorStarTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctOperatorStarTarget" ):
                listener.enterDistinctOperatorStarTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctOperatorStarTarget" ):
                listener.exitDistinctOperatorStarTarget(self)




    def distinctOperatorStarTarget(self):

        localctx = KqlParser.DistinctOperatorStarTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_distinctOperatorStarTarget)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(KqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinctOperatorColumnListTargetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unnamedExpression = None # UnnamedExpressionContext
            self.Expressions = list() # of UnnamedExpressionContexts

        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_distinctOperatorColumnListTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctOperatorColumnListTarget" ):
                listener.enterDistinctOperatorColumnListTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctOperatorColumnListTarget" ):
                listener.exitDistinctOperatorColumnListTarget(self)




    def distinctOperatorColumnListTarget(self):

        localctx = KqlParser.DistinctOperatorColumnListTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_distinctOperatorColumnListTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            localctx._unnamedExpression = self.unnamedExpression()
            localctx.Expressions.append(localctx._unnamedExpression)
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1042
                self.match(KqlParser.COMMA)
                self.state = 1043
                localctx._unnamedExpression = self.unnamedExpression()
                localctx.Expressions.append(localctx._unnamedExpression)
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.PlugInCall = None # FunctionCallExpressionContext
            self.SchemaClause = None # EvaluateOperatorSchemaClauseContext

        def EVALUATE(self):
            return self.getToken(KqlParser.EVALUATE, 0)

        def functionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallExpressionContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def evaluateOperatorSchemaClause(self):
            return self.getTypedRuleContext(KqlParser.EvaluateOperatorSchemaClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_evaluateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateOperator" ):
                listener.enterEvaluateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateOperator" ):
                listener.exitEvaluateOperator(self)




    def evaluateOperator(self):

        localctx = KqlParser.EvaluateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_evaluateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(KqlParser.EVALUATE)
            self.state = 1053
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1050
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

            self.state = 1056
            localctx.PlugInCall = self.functionCallExpression()
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.COLON:
                self.state = 1057
                localctx.SchemaClause = self.evaluateOperatorSchemaClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateOperatorSchemaClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Schema = None # RowSchemaContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(KqlParser.RowSchemaContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_evaluateOperatorSchemaClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateOperatorSchemaClause" ):
                listener.enterEvaluateOperatorSchemaClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateOperatorSchemaClause" ):
                listener.exitEvaluateOperatorSchemaClause(self)




    def evaluateOperatorSchemaClause(self):

        localctx = KqlParser.EvaluateOperatorSchemaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_evaluateOperatorSchemaClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(KqlParser.COLON)
            self.state = 1061
            localctx.Schema = self.rowSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def EXTEND(self):
            return self.getToken(KqlParser.EXTEND, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_extendOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendOperator" ):
                listener.enterExtendOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendOperator" ):
                listener.exitExtendOperator(self)




    def extendOperator(self):

        localctx = KqlParser.ExtendOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_extendOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(KqlParser.EXTEND)
            self.state = 1064
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1065
                self.match(KqlParser.COMMA)
                self.state = 1066
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteAndCacheOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE_AND_CACHE(self):
            return self.getToken(KqlParser.EXECUTE_AND_CACHE, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_executeAndCacheOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteAndCacheOperator" ):
                listener.enterExecuteAndCacheOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteAndCacheOperator" ):
                listener.exitExecuteAndCacheOperator(self)




    def executeAndCacheOperator(self):

        localctx = KqlParser.ExecuteAndCacheOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_executeAndCacheOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(KqlParser.EXECUTE_AND_CACHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FacetByOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._entityExpression = None # EntityExpressionContext
            self.Entities = list() # of EntityExpressionContexts
            self.WithOperatorClause = None # FacetByOperatorWithOperatorClauseContext
            self.WithExpressionClause = None # FacetByOperatorWithExpressionClauseContext

        def FACET(self):
            return self.getToken(KqlParser.FACET, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def entityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.EntityExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.EntityExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def facetByOperatorWithOperatorClause(self):
            return self.getTypedRuleContext(KqlParser.FacetByOperatorWithOperatorClauseContext,0)


        def facetByOperatorWithExpressionClause(self):
            return self.getTypedRuleContext(KqlParser.FacetByOperatorWithExpressionClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_facetByOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFacetByOperator" ):
                listener.enterFacetByOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFacetByOperator" ):
                listener.exitFacetByOperator(self)




    def facetByOperator(self):

        localctx = KqlParser.FacetByOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_facetByOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.match(KqlParser.FACET)
            self.state = 1075
            self.match(KqlParser.BY)
            self.state = 1076
            localctx._entityExpression = self.entityExpression()
            localctx.Entities.append(localctx._entityExpression)
            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1077
                self.match(KqlParser.COMMA)
                self.state = 1078
                localctx._entityExpression = self.entityExpression()
                localctx.Entities.append(localctx._entityExpression)
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 1084
                localctx.WithOperatorClause = self.facetByOperatorWithOperatorClause()

            elif la_ == 2:
                self.state = 1085
                localctx.WithExpressionClause = self.facetByOperatorWithExpressionClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FacetByOperatorWithOperatorClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # ForkPipeOperatorContext

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def forkPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.ForkPipeOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_facetByOperatorWithOperatorClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFacetByOperatorWithOperatorClause" ):
                listener.enterFacetByOperatorWithOperatorClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFacetByOperatorWithOperatorClause" ):
                listener.exitFacetByOperatorWithOperatorClause(self)




    def facetByOperatorWithOperatorClause(self):

        localctx = KqlParser.FacetByOperatorWithOperatorClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_facetByOperatorWithOperatorClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(KqlParser.WITH)
            self.state = 1089
            localctx.Operator = self.forkPipeOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FacetByOperatorWithExpressionClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ForkOperatorExpressionContext

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def forkOperatorExpression(self):
            return self.getTypedRuleContext(KqlParser.ForkOperatorExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_facetByOperatorWithExpressionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFacetByOperatorWithExpressionClause" ):
                listener.enterFacetByOperatorWithExpressionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFacetByOperatorWithExpressionClause" ):
                listener.exitFacetByOperatorWithExpressionClause(self)




    def facetByOperatorWithExpressionClause(self):

        localctx = KqlParser.FacetByOperatorWithExpressionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_facetByOperatorWithExpressionClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(KqlParser.WITH)
            self.state = 1092
            self.match(KqlParser.OPENPAREN)
            self.state = 1093
            localctx.Expression = self.forkOperatorExpression()
            self.state = 1094
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.DataScopeClause = None # DataScopeClauseContext
            self.ParameterWhereClause = None # FindOperatorParametersWhereClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.ProjectClause = None # FindOperatorProjectClauseContext
            self.ProjectSmartClause = None # FindOperatorProjectSmartClauseContext
            self.ProjectAwayClause = None # FindOperatorProjectAwayClauseContext

        def FIND(self):
            return self.getToken(KqlParser.FIND, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def dataScopeClause(self):
            return self.getTypedRuleContext(KqlParser.DataScopeClauseContext,0)


        def findOperatorParametersWhereClause(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorParametersWhereClauseContext,0)


        def findOperatorProjectClause(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorProjectClauseContext,0)


        def findOperatorProjectSmartClause(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorProjectSmartClauseContext,0)


        def findOperatorProjectAwayClause(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorProjectAwayClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperator" ):
                listener.enterFindOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperator" ):
                listener.exitFindOperator(self)




    def findOperator(self):

        localctx = KqlParser.FindOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_findOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(KqlParser.FIND)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.DATASCOPE:
                self.state = 1097
                localctx.DataScopeClause = self.dataScopeClause()


            self.state = 1101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 1100
                localctx.ParameterWhereClause = self.findOperatorParametersWhereClause()


            self.state = 1103
            localctx.Expression = self.unnamedExpression()
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 1104
                localctx.ProjectClause = self.findOperatorProjectClause()

            elif la_ == 2:
                self.state = 1105
                localctx.ProjectSmartClause = self.findOperatorProjectSmartClause()


            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.PROJECTAWAY_:
                self.state = 1108
                localctx.ProjectAwayClause = self.findOperatorProjectAwayClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorParametersWhereClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.InClause = None # FindOperatorInClauseContext

        def WHERE(self):
            return self.getToken(KqlParser.WHERE, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def findOperatorInClause(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorInClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorParametersWhereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorParametersWhereClause" ):
                listener.enterFindOperatorParametersWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorParametersWhereClause" ):
                listener.exitFindOperatorParametersWhereClause(self)




    def findOperatorParametersWhereClause(self):

        localctx = KqlParser.FindOperatorParametersWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_findOperatorParametersWhereClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0):
                self.state = 1111
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.IN:
                self.state = 1117
                localctx.InClause = self.findOperatorInClause()


            self.state = 1120
            self.match(KqlParser.WHERE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorInClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._findOperatorSource = None # FindOperatorSourceContext
            self.Expressions = list() # of FindOperatorSourceContexts

        def IN(self):
            return self.getToken(KqlParser.IN, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def findOperatorSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.FindOperatorSourceContext)
            else:
                return self.getTypedRuleContext(KqlParser.FindOperatorSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorInClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorInClause" ):
                listener.enterFindOperatorInClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorInClause" ):
                listener.exitFindOperatorInClause(self)




    def findOperatorInClause(self):

        localctx = KqlParser.FindOperatorInClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_findOperatorInClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(KqlParser.IN)
            self.state = 1123
            self.match(KqlParser.OPENPAREN)
            self.state = 1124
            localctx._findOperatorSource = self.findOperatorSource()
            localctx.Expressions.append(localctx._findOperatorSource)
            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1125
                self.match(KqlParser.COMMA)
                self.state = 1126
                localctx._findOperatorSource = self.findOperatorSource()
                localctx.Expressions.append(localctx._findOperatorSource)
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1132
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._findOperatorProjectExpression = None # FindOperatorProjectExpressionContext
            self.Expressions = list() # of FindOperatorProjectExpressionContexts

        def PROJECT(self):
            return self.getToken(KqlParser.PROJECT, 0)

        def findOperatorProjectExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.FindOperatorProjectExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.FindOperatorProjectExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorProjectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectClause" ):
                listener.enterFindOperatorProjectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectClause" ):
                listener.exitFindOperatorProjectClause(self)




    def findOperatorProjectClause(self):

        localctx = KqlParser.FindOperatorProjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_findOperatorProjectClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(KqlParser.PROJECT)
            self.state = 1135
            localctx._findOperatorProjectExpression = self.findOperatorProjectExpression()
            localctx.Expressions.append(localctx._findOperatorProjectExpression)
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1136
                self.match(KqlParser.COMMA)
                self.state = 1137
                localctx._findOperatorProjectExpression = self.findOperatorProjectExpression()
                localctx.Expressions.append(localctx._findOperatorProjectExpression)
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Column = None # FindOperatorColumnExpressionContext
            self.Pack = None # FindOperatorPackExpressionContext

        def findOperatorColumnExpression(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorColumnExpressionContext,0)


        def findOperatorPackExpression(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorPackExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorProjectExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectExpression" ):
                listener.enterFindOperatorProjectExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectExpression" ):
                listener.exitFindOperatorProjectExpression(self)




    def findOperatorProjectExpression(self):

        localctx = KqlParser.FindOperatorProjectExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_findOperatorProjectExpression)
        try:
            self.state = 1145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1143
                localctx.Column = self.findOperatorColumnExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1144
                localctx.Pack = self.findOperatorPackExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorColumnExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.OptionalType = None # FindOperatorOptionalColumnTypeContext

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def findOperatorOptionalColumnType(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorOptionalColumnTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorColumnExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorColumnExpression" ):
                listener.enterFindOperatorColumnExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorColumnExpression" ):
                listener.exitFindOperatorColumnExpression(self)




    def findOperatorColumnExpression(self):

        localctx = KqlParser.FindOperatorColumnExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_findOperatorColumnExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            localctx.Name = self.parameterName()
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.COLON:
                self.state = 1148
                localctx.OptionalType = self.findOperatorOptionalColumnType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorOptionalColumnTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Type = None # ExtendedScalarTypeContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def extendedScalarType(self):
            return self.getTypedRuleContext(KqlParser.ExtendedScalarTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorOptionalColumnType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorOptionalColumnType" ):
                listener.enterFindOperatorOptionalColumnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorOptionalColumnType" ):
                listener.exitFindOperatorOptionalColumnType(self)




    def findOperatorOptionalColumnType(self):

        localctx = KqlParser.FindOperatorOptionalColumnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_findOperatorOptionalColumnType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(KqlParser.COLON)
            self.state = 1152
            localctx.Type = self.extendedScalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorPackExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACK(self):
            return self.getToken(KqlParser.PACK, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorPackExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorPackExpression" ):
                listener.enterFindOperatorPackExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorPackExpression" ):
                listener.exitFindOperatorPackExpression(self)




    def findOperatorPackExpression(self):

        localctx = KqlParser.FindOperatorPackExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_findOperatorPackExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(KqlParser.PACK)
            self.state = 1155
            self.match(KqlParser.OPENPAREN)
            self.state = 1156
            self.match(KqlParser.ASTERISK)
            self.state = 1157
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectSmartClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROJECTSMART(self):
            return self.getToken(KqlParser.PROJECTSMART, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorProjectSmartClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectSmartClause" ):
                listener.enterFindOperatorProjectSmartClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectSmartClause" ):
                listener.exitFindOperatorProjectSmartClause(self)




    def findOperatorProjectSmartClause(self):

        localctx = KqlParser.FindOperatorProjectSmartClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_findOperatorProjectSmartClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self.match(KqlParser.PROJECTSMART)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectAwayClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Star = None # FindOperatorProjectAwayStarContext
            self.ColumnList = None # FindOperatorProjectAwayColumnListContext

        def PROJECTAWAY_(self):
            return self.getToken(KqlParser.PROJECTAWAY_, 0)

        def findOperatorProjectAwayStar(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorProjectAwayStarContext,0)


        def findOperatorProjectAwayColumnList(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorProjectAwayColumnListContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorProjectAwayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectAwayClause" ):
                listener.enterFindOperatorProjectAwayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectAwayClause" ):
                listener.exitFindOperatorProjectAwayClause(self)




    def findOperatorProjectAwayClause(self):

        localctx = KqlParser.FindOperatorProjectAwayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_findOperatorProjectAwayClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(KqlParser.PROJECTAWAY_)
            self.state = 1164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.ASTERISK]:
                self.state = 1162
                localctx.Star = self.findOperatorProjectAwayStar()
                pass
            elif token in [KqlParser.OPENBRACKET, KqlParser.ACCESS, KqlParser.ACCUMULATE, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AS, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.BY, KqlParser.CLUSTER, KqlParser.CONSUME, KqlParser.CONTAINS, KqlParser.COUNT, KqlParser.DATABASE, KqlParser.DATATABLE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.DISTINCT, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.EXTEND, KqlParser.EXTERNALDATA, KqlParser.FACET, KqlParser.FILTER, KqlParser.FIND, KqlParser.FORK, KqlParser.FROM, KqlParser.HAS, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.IN, KqlParser.INTO, KqlParser.INVOKE, KqlParser.LEGEND, KqlParser.LET, KqlParser.LIMIT, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.MATERIALIZE, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.OF, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARSE, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.PRINT, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SAMPLE, KqlParser.SAMPLE_DISTINCT, KqlParser.SCAN, KqlParser.SEARCH, KqlParser.SERIALIZE, KqlParser.SERIES, KqlParser.SET, KqlParser.SORT, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.SUMMARIZE, KqlParser.TAKE, KqlParser.THRESHOLD, KqlParser.TITLE, KqlParser.TO, KqlParser.TOP, KqlParser.TOP_HITTERS, KqlParser.TOP_NESTED, KqlParser.TOSCALAR, KqlParser.TOTABLE, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WHERE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID, KqlParser.IDENTIFIER]:
                self.state = 1163
                localctx.ColumnList = self.findOperatorProjectAwayColumnList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectAwayStarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorProjectAwayStar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectAwayStar" ):
                listener.enterFindOperatorProjectAwayStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectAwayStar" ):
                listener.exitFindOperatorProjectAwayStar(self)




    def findOperatorProjectAwayStar(self):

        localctx = KqlParser.FindOperatorProjectAwayStarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_findOperatorProjectAwayStar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(KqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorProjectAwayColumnListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._findOperatorColumnExpression = None # FindOperatorColumnExpressionContext
            self.Columns = list() # of FindOperatorColumnExpressionContexts

        def findOperatorColumnExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.FindOperatorColumnExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.FindOperatorColumnExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorProjectAwayColumnList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorProjectAwayColumnList" ):
                listener.enterFindOperatorProjectAwayColumnList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorProjectAwayColumnList" ):
                listener.exitFindOperatorProjectAwayColumnList(self)




    def findOperatorProjectAwayColumnList(self):

        localctx = KqlParser.FindOperatorProjectAwayColumnListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_findOperatorProjectAwayColumnList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            localctx._findOperatorColumnExpression = self.findOperatorColumnExpression()
            localctx.Columns.append(localctx._findOperatorColumnExpression)
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1169
                self.match(KqlParser.COMMA)
                self.state = 1170
                localctx._findOperatorColumnExpression = self.findOperatorColumnExpression()
                localctx.Columns.append(localctx._findOperatorColumnExpression)
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorSourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Entity = None # FindOperatorSourceEntityExpressionContext
            self.WildcardedEntity = None # WildcardedEntityExpressionContext

        def findOperatorSourceEntityExpression(self):
            return self.getTypedRuleContext(KqlParser.FindOperatorSourceEntityExpressionContext,0)


        def wildcardedEntityExpression(self):
            return self.getTypedRuleContext(KqlParser.WildcardedEntityExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorSource" ):
                listener.enterFindOperatorSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorSource" ):
                listener.exitFindOperatorSource(self)




    def findOperatorSource(self):

        localctx = KqlParser.FindOperatorSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_findOperatorSource)
        try:
            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1176
                localctx.Entity = self.findOperatorSourceEntityExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1177
                localctx.WildcardedEntity = self.wildcardedEntityExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindOperatorSourceEntityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Entity = None # EntityNameReferenceContext
            self._asOperator = None # AsOperatorContext
            self.AsOperators = list() # of AsOperatorContexts

        def entityNameReference(self):
            return self.getTypedRuleContext(KqlParser.EntityNameReferenceContext,0)


        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.BAR)
            else:
                return self.getToken(KqlParser.BAR, i)

        def asOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.AsOperatorContext)
            else:
                return self.getTypedRuleContext(KqlParser.AsOperatorContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_findOperatorSourceEntityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFindOperatorSourceEntityExpression" ):
                listener.enterFindOperatorSourceEntityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFindOperatorSourceEntityExpression" ):
                listener.exitFindOperatorSourceEntityExpression(self)




    def findOperatorSourceEntityExpression(self):

        localctx = KqlParser.FindOperatorSourceEntityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_findOperatorSourceEntityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            localctx.Entity = self.entityNameReference()
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.BAR:
                self.state = 1181
                self.match(KqlParser.BAR)
                self.state = 1182
                localctx._asOperator = self.asOperator()
                localctx.AsOperators.append(localctx._asOperator)
                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORK(self):
            return self.getToken(KqlParser.FORK, 0)

        def forkOperatorFork(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ForkOperatorForkContext)
            else:
                return self.getTypedRuleContext(KqlParser.ForkOperatorForkContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_forkOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperator" ):
                listener.enterForkOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperator" ):
                listener.exitForkOperator(self)




    def forkOperator(self):

        localctx = KqlParser.ForkOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_forkOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.match(KqlParser.FORK)
            self.state = 1190 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1189
                self.forkOperatorFork()
                self.state = 1192 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.OPENBRACKET) | (1 << KqlParser.OPENPAREN) | (1 << KqlParser.ACCESS) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.CLUSTER))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (KqlParser.DATABASE - 69)) | (1 << (KqlParser.DECLARE - 69)) | (1 << (KqlParser.DEFAULT - 69)) | (1 << (KqlParser.DELTA - 69)) | (1 << (KqlParser.EDGES - 69)) | (1 << (KqlParser.EVALUATE - 69)) | (1 << (KqlParser.EXECUTE - 69)) | (1 << (KqlParser.FACET - 69)) | (1 << (KqlParser.FORK - 69)) | (1 << (KqlParser.FROM - 69)) | (1 << (KqlParser.HIDDEN_ - 69)) | (1 << (KqlParser.HOT - 69)) | (1 << (KqlParser.HOTDATA - 69)) | (1 << (KqlParser.HOTINDEX - 69)) | (1 << (KqlParser.ID - 69)) | (1 << (KqlParser.INTO - 69)))) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (KqlParser.LEGEND - 140)) | (1 << (KqlParser.LET - 140)) | (1 << (KqlParser.LINEAR - 140)) | (1 << (KqlParser.LIST - 140)) | (1 << (KqlParser.LOOKUP - 140)) | (1 << (KqlParser.LOG - 140)) | (1 << (KqlParser.MAP - 140)) | (1 << (KqlParser.NODES - 140)) | (1 << (KqlParser.NONE - 140)) | (1 << (KqlParser.NULL - 140)) | (1 << (KqlParser.NULLS - 140)) | (1 << (KqlParser.ON - 140)) | (1 << (KqlParser.OPTIONAL - 140)) | (1 << (KqlParser.OUTPUT - 140)) | (1 << (KqlParser.PACK - 140)) | (1 << (KqlParser.PARTITION - 140)) | (1 << (KqlParser.PARTITIONBY - 140)) | (1 << (KqlParser.PATTERN - 140)))) != 0) or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & ((1 << (KqlParser.PLUGIN - 204)) | (1 << (KqlParser.QUERYPARAMETERS - 204)) | (1 << (KqlParser.RANGE - 204)) | (1 << (KqlParser.REDUCE - 204)) | (1 << (KqlParser.RENDER - 204)) | (1 << (KqlParser.REPLACE - 204)) | (1 << (KqlParser.RESTRICT - 204)) | (1 << (KqlParser.SERIES - 204)) | (1 << (KqlParser.STACKED - 204)) | (1 << (KqlParser.STACKED100 - 204)) | (1 << (KqlParser.STEP - 204)) | (1 << (KqlParser.THRESHOLD - 204)) | (1 << (KqlParser.TYPEOF - 204)) | (1 << (KqlParser.UNSTACKED - 204)) | (1 << (KqlParser.UUID - 204)) | (1 << (KqlParser.VIEW - 204)) | (1 << (KqlParser.VISIBLE - 204)) | (1 << (KqlParser.WITH - 204)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (KqlParser.XAXIS - 268)) | (1 << (KqlParser.XCOLUMN - 268)) | (1 << (KqlParser.XMAX - 268)) | (1 << (KqlParser.XMIN - 268)) | (1 << (KqlParser.XTITLE - 268)) | (1 << (KqlParser.YAXIS - 268)) | (1 << (KqlParser.YCOLUMNS - 268)) | (1 << (KqlParser.YMAX - 268)) | (1 << (KqlParser.YMIN - 268)) | (1 << (KqlParser.YSPLIT - 268)) | (1 << (KqlParser.YTITLE - 268)) | (1 << (KqlParser.BOOL - 268)) | (1 << (KqlParser.GUID - 268)) | (1 << (KqlParser.IDENTIFIER - 268)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorForkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ForkOperatorExpressionNameContext
            self.Expression = None # ForkOperatorExpressionContext

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def forkOperatorExpression(self):
            return self.getTypedRuleContext(KqlParser.ForkOperatorExpressionContext,0)


        def forkOperatorExpressionName(self):
            return self.getTypedRuleContext(KqlParser.ForkOperatorExpressionNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_forkOperatorFork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperatorFork" ):
                listener.enterForkOperatorFork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperatorFork" ):
                listener.exitForkOperatorFork(self)




    def forkOperatorFork(self):

        localctx = KqlParser.ForkOperatorForkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_forkOperatorFork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.OPENBRACKET) | (1 << KqlParser.ACCESS) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.CLUSTER))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (KqlParser.DATABASE - 69)) | (1 << (KqlParser.DECLARE - 69)) | (1 << (KqlParser.DEFAULT - 69)) | (1 << (KqlParser.DELTA - 69)) | (1 << (KqlParser.EDGES - 69)) | (1 << (KqlParser.EVALUATE - 69)) | (1 << (KqlParser.EXECUTE - 69)) | (1 << (KqlParser.FACET - 69)) | (1 << (KqlParser.FORK - 69)) | (1 << (KqlParser.FROM - 69)) | (1 << (KqlParser.HIDDEN_ - 69)) | (1 << (KqlParser.HOT - 69)) | (1 << (KqlParser.HOTDATA - 69)) | (1 << (KqlParser.HOTINDEX - 69)) | (1 << (KqlParser.ID - 69)) | (1 << (KqlParser.INTO - 69)))) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (KqlParser.LEGEND - 140)) | (1 << (KqlParser.LET - 140)) | (1 << (KqlParser.LINEAR - 140)) | (1 << (KqlParser.LIST - 140)) | (1 << (KqlParser.LOOKUP - 140)) | (1 << (KqlParser.LOG - 140)) | (1 << (KqlParser.MAP - 140)) | (1 << (KqlParser.NODES - 140)) | (1 << (KqlParser.NONE - 140)) | (1 << (KqlParser.NULL - 140)) | (1 << (KqlParser.NULLS - 140)) | (1 << (KqlParser.ON - 140)) | (1 << (KqlParser.OPTIONAL - 140)) | (1 << (KqlParser.OUTPUT - 140)) | (1 << (KqlParser.PACK - 140)) | (1 << (KqlParser.PARTITION - 140)) | (1 << (KqlParser.PARTITIONBY - 140)) | (1 << (KqlParser.PATTERN - 140)))) != 0) or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & ((1 << (KqlParser.PLUGIN - 204)) | (1 << (KqlParser.QUERYPARAMETERS - 204)) | (1 << (KqlParser.RANGE - 204)) | (1 << (KqlParser.REDUCE - 204)) | (1 << (KqlParser.RENDER - 204)) | (1 << (KqlParser.REPLACE - 204)) | (1 << (KqlParser.RESTRICT - 204)) | (1 << (KqlParser.SERIES - 204)) | (1 << (KqlParser.STACKED - 204)) | (1 << (KqlParser.STACKED100 - 204)) | (1 << (KqlParser.STEP - 204)) | (1 << (KqlParser.THRESHOLD - 204)) | (1 << (KqlParser.TYPEOF - 204)) | (1 << (KqlParser.UNSTACKED - 204)) | (1 << (KqlParser.UUID - 204)) | (1 << (KqlParser.VIEW - 204)) | (1 << (KqlParser.VISIBLE - 204)) | (1 << (KqlParser.WITH - 204)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (KqlParser.XAXIS - 268)) | (1 << (KqlParser.XCOLUMN - 268)) | (1 << (KqlParser.XMAX - 268)) | (1 << (KqlParser.XMIN - 268)) | (1 << (KqlParser.XTITLE - 268)) | (1 << (KqlParser.YAXIS - 268)) | (1 << (KqlParser.YCOLUMNS - 268)) | (1 << (KqlParser.YMAX - 268)) | (1 << (KqlParser.YMIN - 268)) | (1 << (KqlParser.YSPLIT - 268)) | (1 << (KqlParser.YTITLE - 268)) | (1 << (KqlParser.BOOL - 268)) | (1 << (KqlParser.GUID - 268)) | (1 << (KqlParser.IDENTIFIER - 268)))) != 0):
                self.state = 1194
                localctx.Name = self.forkOperatorExpressionName()


            self.state = 1197
            self.match(KqlParser.OPENPAREN)
            self.state = 1198
            localctx.Expression = self.forkOperatorExpression()
            self.state = 1199
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorExpressionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_forkOperatorExpressionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperatorExpressionName" ):
                listener.enterForkOperatorExpressionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperatorExpressionName" ):
                listener.exitForkOperatorExpressionName(self)




    def forkOperatorExpressionName(self):

        localctx = KqlParser.ForkOperatorExpressionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_forkOperatorExpressionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 1202
            self.match(KqlParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # ForkPipeOperatorContext
            self._forkOperatorPipedOperator = None # ForkOperatorPipedOperatorContext
            self.PipedOperators = list() # of ForkOperatorPipedOperatorContexts

        def forkPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.ForkPipeOperatorContext,0)


        def forkOperatorPipedOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ForkOperatorPipedOperatorContext)
            else:
                return self.getTypedRuleContext(KqlParser.ForkOperatorPipedOperatorContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_forkOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperatorExpression" ):
                listener.enterForkOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperatorExpression" ):
                listener.exitForkOperatorExpression(self)




    def forkOperatorExpression(self):

        localctx = KqlParser.ForkOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_forkOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            localctx.Operator = self.forkPipeOperator()
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.BAR:
                self.state = 1205
                localctx._forkOperatorPipedOperator = self.forkOperatorPipedOperator()
                localctx.PipedOperators.append(localctx._forkOperatorPipedOperator)
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForkOperatorPipedOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # ForkPipeOperatorContext

        def BAR(self):
            return self.getToken(KqlParser.BAR, 0)

        def forkPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.ForkPipeOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_forkOperatorPipedOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForkOperatorPipedOperator" ):
                listener.enterForkOperatorPipedOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForkOperatorPipedOperator" ):
                listener.exitForkOperatorPipedOperator(self)




    def forkOperatorPipedOperator(self):

        localctx = KqlParser.ForkOperatorPipedOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_forkOperatorPipedOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(KqlParser.BAR)
            self.state = 1212
            localctx.Operator = self.forkPipeOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetSchemaOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GETSCHEMA(self):
            return self.getToken(KqlParser.GETSCHEMA, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_getSchemaOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetSchemaOperator" ):
                listener.enterGetSchemaOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetSchemaOperator" ):
                listener.exitGetSchemaOperator(self)




    def getSchemaOperator(self):

        localctx = KqlParser.GetSchemaOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_getSchemaOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(KqlParser.GETSCHEMA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMarkComponentsOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parametems = list() # of RelaxedQueryOperatorParameterContexts

        def GRAPHMARKCOMPONENTS(self):
            return self.getToken(KqlParser.GRAPHMARKCOMPONENTS, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMarkComponentsOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMarkComponentsOperator" ):
                listener.enterGraphMarkComponentsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMarkComponentsOperator" ):
                listener.exitGraphMarkComponentsOperator(self)




    def graphMarkComponentsOperator(self):

        localctx = KqlParser.GraphMarkComponentsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_graphMarkComponentsOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(KqlParser.GRAPHMARKCOMPONENTS)
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0):
                self.state = 1217
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parametems.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._graphMatchPattern = None # GraphMatchPatternContext
            self.Patterns = list() # of GraphMatchPatternContexts
            self.WhereClause = None # GraphMatchWhereClauseContext
            self.ProjectClause = None # GraphMatchProjectClauseContext

        def GRAPHMATCH(self):
            return self.getToken(KqlParser.GRAPHMATCH, 0)

        def graphMatchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.GraphMatchPatternContext)
            else:
                return self.getTypedRuleContext(KqlParser.GraphMatchPatternContext,i)


        def COMMA(self):
            return self.getToken(KqlParser.COMMA, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def graphMatchWhereClause(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchWhereClauseContext,0)


        def graphMatchProjectClause(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchProjectClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchOperator" ):
                listener.enterGraphMatchOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchOperator" ):
                listener.exitGraphMatchOperator(self)




    def graphMatchOperator(self):

        localctx = KqlParser.GraphMatchOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_graphMatchOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(KqlParser.GRAPHMATCH)
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0):
                self.state = 1224
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1229
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1230
            localctx._graphMatchPattern = self.graphMatchPattern()
            localctx.Patterns.append(localctx._graphMatchPattern)

            self.state = 1231
            self.match(KqlParser.COMMA)
            self.state = 1232
            localctx._graphMatchPattern = self.graphMatchPattern()
            localctx.Patterns.append(localctx._graphMatchPattern)
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.WHERE:
                self.state = 1234
                localctx.WhereClause = self.graphMatchWhereClause()


            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 1237
                localctx.ProjectClause = self.graphMatchProjectClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Node = None # GraphMatchPatternNodeContext
            self.UnnamedEdge = None # GraphMatchPatternUnnamedEdgeContext
            self.NamedEdge = None # GraphMatchPatternNamedEdgeContext

        def graphMatchPatternNode(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchPatternNodeContext,0)


        def graphMatchPatternUnnamedEdge(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchPatternUnnamedEdgeContext,0)


        def graphMatchPatternNamedEdge(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchPatternNamedEdgeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPattern" ):
                listener.enterGraphMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPattern" ):
                listener.exitGraphMatchPattern(self)




    def graphMatchPattern(self):

        localctx = KqlParser.GraphMatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_graphMatchPattern)
        try:
            self.state = 1243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.OPENPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1240
                localctx.Node = self.graphMatchPatternNode()
                pass
            elif token in [KqlParser.DASHDASH, KqlParser.DASHDASH_GREATERTHAN, KqlParser.LESSTHAN_DASHDASH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                localctx.UnnamedEdge = self.graphMatchPatternUnnamedEdge()
                pass
            elif token in [KqlParser.DASH_OPENBRACKET, KqlParser.LESSTHAN_DASH_OPENBRACKET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1242
                localctx.NamedEdge = self.graphMatchPatternNamedEdge()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternNodeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchPatternNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPatternNode" ):
                listener.enterGraphMatchPatternNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPatternNode" ):
                listener.exitGraphMatchPatternNode(self)




    def graphMatchPatternNode(self):

        localctx = KqlParser.GraphMatchPatternNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_graphMatchPatternNode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(KqlParser.OPENPAREN)
            self.state = 1246
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 1247
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternUnnamedEdgeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Direction = None # Token

        def DASHDASH_GREATERTHAN(self):
            return self.getToken(KqlParser.DASHDASH_GREATERTHAN, 0)

        def LESSTHAN_DASHDASH(self):
            return self.getToken(KqlParser.LESSTHAN_DASHDASH, 0)

        def DASHDASH(self):
            return self.getToken(KqlParser.DASHDASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchPatternUnnamedEdge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPatternUnnamedEdge" ):
                listener.enterGraphMatchPatternUnnamedEdge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPatternUnnamedEdge" ):
                listener.exitGraphMatchPatternUnnamedEdge(self)




    def graphMatchPatternUnnamedEdge(self):

        localctx = KqlParser.GraphMatchPatternUnnamedEdgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_graphMatchPatternUnnamedEdge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            localctx.Direction = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.DASHDASH) | (1 << KqlParser.DASHDASH_GREATERTHAN) | (1 << KqlParser.LESSTHAN_DASHDASH))) != 0)):
                localctx.Direction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternNamedEdgeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpenBracket = None # Token
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext
            self.Range = None # GraphMatchPatternRangeContext
            self.CloseBracket = None # Token

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def DASH_OPENBRACKET(self):
            return self.getToken(KqlParser.DASH_OPENBRACKET, 0)

        def LESSTHAN_DASH_OPENBRACKET(self):
            return self.getToken(KqlParser.LESSTHAN_DASH_OPENBRACKET, 0)

        def CLOSEBRACKET_DASH_GREATERTHAN(self):
            return self.getToken(KqlParser.CLOSEBRACKET_DASH_GREATERTHAN, 0)

        def CLOSEBRACKET_DASH(self):
            return self.getToken(KqlParser.CLOSEBRACKET_DASH, 0)

        def graphMatchPatternRange(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchPatternRangeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchPatternNamedEdge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPatternNamedEdge" ):
                listener.enterGraphMatchPatternNamedEdge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPatternNamedEdge" ):
                listener.exitGraphMatchPatternNamedEdge(self)




    def graphMatchPatternNamedEdge(self):

        localctx = KqlParser.GraphMatchPatternNamedEdgeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_graphMatchPatternNamedEdge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            localctx.OpenBracket = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.DASH_OPENBRACKET or _la==KqlParser.LESSTHAN_DASH_OPENBRACKET):
                localctx.OpenBracket = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1252
            localctx.Name = self.identifierOrKeywordOrEscapedName()
            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.ASTERISK:
                self.state = 1253
                localctx.Range = self.graphMatchPatternRange()


            self.state = 1256
            localctx.CloseBracket = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.CLOSEBRACKET_DASH or _la==KqlParser.CLOSEBRACKET_DASH_GREATERTHAN):
                localctx.CloseBracket = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchPatternRangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LowerBound = None # InvocationExpressionContext
            self.UpperBound = None # InvocationExpressionContext

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def DOTDOT(self):
            return self.getToken(KqlParser.DOTDOT, 0)

        def invocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.InvocationExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchPatternRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchPatternRange" ):
                listener.enterGraphMatchPatternRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchPatternRange" ):
                listener.exitGraphMatchPatternRange(self)




    def graphMatchPatternRange(self):

        localctx = KqlParser.GraphMatchPatternRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_graphMatchPatternRange)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(KqlParser.ASTERISK)
            self.state = 1259
            localctx.LowerBound = self.invocationExpression()
            self.state = 1260
            self.match(KqlParser.DOTDOT)
            self.state = 1261
            localctx.UpperBound = self.invocationExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchWhereClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def WHERE(self):
            return self.getToken(KqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchWhereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchWhereClause" ):
                listener.enterGraphMatchWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchWhereClause" ):
                listener.exitGraphMatchWhereClause(self)




    def graphMatchWhereClause(self):

        localctx = KqlParser.GraphMatchWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_graphMatchWhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self.match(KqlParser.WHERE)
            self.state = 1264
            localctx.Expression = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMatchProjectClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def PROJECT(self):
            return self.getToken(KqlParser.PROJECT, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_graphMatchProjectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMatchProjectClause" ):
                listener.enterGraphMatchProjectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMatchProjectClause" ):
                listener.exitGraphMatchProjectClause(self)




    def graphMatchProjectClause(self):

        localctx = KqlParser.GraphMatchProjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_graphMatchProjectClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(KqlParser.PROJECT)
            self.state = 1267
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1268
                self.match(KqlParser.COMMA)
                self.state = 1269
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphMergeOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Graph = None # InvocationExpressionContext
            self.OnClause = None # JoinOperatorOnClauseContext

        def GRAPHMERGE(self):
            return self.getToken(KqlParser.GRAPHMERGE, 0)

        def invocationExpression(self):
            return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,0)


        def joinOperatorOnClause(self):
            return self.getTypedRuleContext(KqlParser.JoinOperatorOnClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphMergeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphMergeOperator" ):
                listener.enterGraphMergeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphMergeOperator" ):
                listener.exitGraphMergeOperator(self)




    def graphMergeOperator(self):

        localctx = KqlParser.GraphMergeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_graphMergeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(KqlParser.GRAPHMERGE)
            self.state = 1276
            localctx.Graph = self.invocationExpression()
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.ON:
                self.state = 1277
                localctx.OnClause = self.joinOperatorOnClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphToTableOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._graphToTableOutput = None # GraphToTableOutputContext
            self.Outputs = list() # of GraphToTableOutputContexts

        def GRAPHTOTABLE(self):
            return self.getToken(KqlParser.GRAPHTOTABLE, 0)

        def graphToTableOutput(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.GraphToTableOutputContext)
            else:
                return self.getTypedRuleContext(KqlParser.GraphToTableOutputContext,i)


        def COMMA(self):
            return self.getToken(KqlParser.COMMA, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_graphToTableOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphToTableOperator" ):
                listener.enterGraphToTableOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphToTableOperator" ):
                listener.exitGraphToTableOperator(self)




    def graphToTableOperator(self):

        localctx = KqlParser.GraphToTableOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_graphToTableOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(KqlParser.GRAPHTOTABLE)
            self.state = 1281
            localctx._graphToTableOutput = self.graphToTableOutput()
            localctx.Outputs.append(localctx._graphToTableOutput)

            self.state = 1282
            self.match(KqlParser.COMMA)
            self.state = 1283
            localctx._graphToTableOutput = self.graphToTableOutput()
            localctx.Outputs.append(localctx._graphToTableOutput)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphToTableOutputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self.AsClause = None # GraphToTableAsClauseContext
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts

        def NODES(self):
            return self.getToken(KqlParser.NODES, 0)

        def EDGES(self):
            return self.getToken(KqlParser.EDGES, 0)

        def graphToTableAsClause(self):
            return self.getTypedRuleContext(KqlParser.GraphToTableAsClauseContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_graphToTableOutput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphToTableOutput" ):
                listener.enterGraphToTableOutput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphToTableOutput" ):
                listener.exitGraphToTableOutput(self)




    def graphToTableOutput(self):

        localctx = KqlParser.GraphToTableOutputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_graphToTableOutput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.EDGES or _la==KqlParser.NODES):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.AS:
                self.state = 1286
                localctx.AsClause = self.graphToTableAsClause()


            self.state = 1292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0):
                self.state = 1289
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphToTableAsClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def AS(self):
            return self.getToken(KqlParser.AS, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphToTableAsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphToTableAsClause" ):
                listener.enterGraphToTableAsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphToTableAsClause" ):
                listener.exitGraphToTableAsClause(self)




    def graphToTableAsClause(self):

        localctx = KqlParser.GraphToTableAsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_graphToTableAsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(KqlParser.AS)
            self.state = 1296
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphShortestPathsOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._graphMatchPattern = None # GraphMatchPatternContext
            self.Patterns = list() # of GraphMatchPatternContexts
            self.WhereClause = None # GraphMatchWhereClauseContext
            self.ProjectClause = None # GraphMatchProjectClauseContext

        def GRAPHSHORTESTPATHS(self):
            return self.getToken(KqlParser.GRAPHSHORTESTPATHS, 0)

        def graphMatchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.GraphMatchPatternContext)
            else:
                return self.getTypedRuleContext(KqlParser.GraphMatchPatternContext,i)


        def COMMA(self):
            return self.getToken(KqlParser.COMMA, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def graphMatchWhereClause(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchWhereClauseContext,0)


        def graphMatchProjectClause(self):
            return self.getTypedRuleContext(KqlParser.GraphMatchProjectClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_graphShortestPathsOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphShortestPathsOperator" ):
                listener.enterGraphShortestPathsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphShortestPathsOperator" ):
                listener.exitGraphShortestPathsOperator(self)




    def graphShortestPathsOperator(self):

        localctx = KqlParser.GraphShortestPathsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_graphShortestPathsOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.match(KqlParser.GRAPHSHORTESTPATHS)
            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0):
                self.state = 1299
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1305
            localctx._graphMatchPattern = self.graphMatchPattern()
            localctx.Patterns.append(localctx._graphMatchPattern)

            self.state = 1306
            self.match(KqlParser.COMMA)
            self.state = 1307
            localctx._graphMatchPattern = self.graphMatchPattern()
            localctx.Patterns.append(localctx._graphMatchPattern)
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.WHERE:
                self.state = 1309
                localctx.WhereClause = self.graphMatchWhereClause()


            self.state = 1313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 1312
                localctx.ProjectClause = self.graphMatchProjectClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvokeOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FunctionCall = None # DotCompositeFunctionCallExpressionContext

        def INVOKE(self):
            return self.getToken(KqlParser.INVOKE, 0)

        def dotCompositeFunctionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.DotCompositeFunctionCallExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_invokeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvokeOperator" ):
                listener.enterInvokeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvokeOperator" ):
                listener.exitInvokeOperator(self)




    def invokeOperator(self):

        localctx = KqlParser.InvokeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_invokeOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.match(KqlParser.INVOKE)
            self.state = 1316
            localctx.FunctionCall = self.dotCompositeFunctionCallExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Table = None # UnnamedExpressionContext
            self.OnClause = None # JoinOperatorOnClauseContext
            self.WhereClause = None # JoinOperatorWhereClauseContext

        def JOIN(self):
            return self.getToken(KqlParser.JOIN, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def joinOperatorOnClause(self):
            return self.getTypedRuleContext(KqlParser.JoinOperatorOnClauseContext,0)


        def joinOperatorWhereClause(self):
            return self.getTypedRuleContext(KqlParser.JoinOperatorWhereClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_joinOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOperator" ):
                listener.enterJoinOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOperator" ):
                listener.exitJoinOperator(self)




    def joinOperator(self):

        localctx = KqlParser.JoinOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_joinOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1318
            self.match(KqlParser.JOIN)
            self.state = 1322
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1319
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 1325
            localctx.Table = self.unnamedExpression()
            self.state = 1328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.ON]:
                self.state = 1326
                localctx.OnClause = self.joinOperatorOnClause()
                pass
            elif token in [KqlParser.WHERE]:
                self.state = 1327
                localctx.WhereClause = self.joinOperatorWhereClause()
                pass
            elif token in [KqlParser.EOF, KqlParser.BAR, KqlParser.CLOSEBRACE, KqlParser.CLOSEPAREN, KqlParser.SEMICOLON, KqlParser.PROJECT]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOperatorOnClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unnamedExpression = None # UnnamedExpressionContext
            self.Expressions = list() # of UnnamedExpressionContexts

        def ON(self):
            return self.getToken(KqlParser.ON, 0)

        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_joinOperatorOnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOperatorOnClause" ):
                listener.enterJoinOperatorOnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOperatorOnClause" ):
                listener.exitJoinOperatorOnClause(self)




    def joinOperatorOnClause(self):

        localctx = KqlParser.JoinOperatorOnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_joinOperatorOnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.match(KqlParser.ON)
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.ASTERISK) | (1 << KqlParser.DASH) | (1 << KqlParser.OPENBRACKET) | (1 << KqlParser.OPENPAREN) | (1 << KqlParser.PLUS) | (1 << KqlParser.ACCESS) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.CLUSTER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (KqlParser.CONTEXTUAL_DATATABLE - 65)) | (1 << (KqlParser.COUNT - 65)) | (1 << (KqlParser.DATABASE - 65)) | (1 << (KqlParser.DATATABLE - 65)) | (1 << (KqlParser.DECLARE - 65)) | (1 << (KqlParser.DEFAULT - 65)) | (1 << (KqlParser.DELTA - 65)) | (1 << (KqlParser.EDGES - 65)) | (1 << (KqlParser.EVALUATE - 65)) | (1 << (KqlParser.EXECUTE - 65)) | (1 << (KqlParser.EXTERNALDATA - 65)) | (1 << (KqlParser.EXTERNAL_DATA - 65)) | (1 << (KqlParser.FACET - 65)) | (1 << (KqlParser.FORK - 65)) | (1 << (KqlParser.FROM - 65)) | (1 << (KqlParser.HIDDEN_ - 65)) | (1 << (KqlParser.HOT - 65)) | (1 << (KqlParser.HOTDATA - 65)) | (1 << (KqlParser.HOTINDEX - 65)) | (1 << (KqlParser.ID - 65)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (KqlParser.INTO - 132)) | (1 << (KqlParser.LEGEND - 132)) | (1 << (KqlParser.LET - 132)) | (1 << (KqlParser.LINEAR - 132)) | (1 << (KqlParser.LIST - 132)) | (1 << (KqlParser.LOOKUP - 132)) | (1 << (KqlParser.LOG - 132)) | (1 << (KqlParser.MAP - 132)) | (1 << (KqlParser.MATERIALIZED_VIEW_COMBINE - 132)) | (1 << (KqlParser.NODES - 132)) | (1 << (KqlParser.NONE - 132)) | (1 << (KqlParser.NULL - 132)) | (1 << (KqlParser.NULLS - 132)) | (1 << (KqlParser.ON - 132)) | (1 << (KqlParser.OPTIONAL - 132)) | (1 << (KqlParser.OUTPUT - 132)) | (1 << (KqlParser.PACK - 132)))) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (KqlParser.PARTITION - 197)) | (1 << (KqlParser.PARTITIONBY - 197)) | (1 << (KqlParser.PATTERN - 197)) | (1 << (KqlParser.PLUGIN - 197)) | (1 << (KqlParser.QUERYPARAMETERS - 197)) | (1 << (KqlParser.RANGE - 197)) | (1 << (KqlParser.REDUCE - 197)) | (1 << (KqlParser.RENDER - 197)) | (1 << (KqlParser.REPLACE - 197)) | (1 << (KqlParser.RESTRICT - 197)) | (1 << (KqlParser.SERIES - 197)) | (1 << (KqlParser.STACKED - 197)) | (1 << (KqlParser.STACKED100 - 197)) | (1 << (KqlParser.STEP - 197)) | (1 << (KqlParser.THRESHOLD - 197)) | (1 << (KqlParser.TOSCALAR - 197)) | (1 << (KqlParser.TOTABLE - 197)) | (1 << (KqlParser.TYPEOF - 197)) | (1 << (KqlParser.UNSTACKED - 197)) | (1 << (KqlParser.UUID - 197)) | (1 << (KqlParser.VIEW - 197)) | (1 << (KqlParser.VISIBLE - 197)) | (1 << (KqlParser.WITH - 197)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (KqlParser.XAXIS - 268)) | (1 << (KqlParser.XCOLUMN - 268)) | (1 << (KqlParser.XMAX - 268)) | (1 << (KqlParser.XMIN - 268)) | (1 << (KqlParser.XTITLE - 268)) | (1 << (KqlParser.YAXIS - 268)) | (1 << (KqlParser.YCOLUMNS - 268)) | (1 << (KqlParser.YMAX - 268)) | (1 << (KqlParser.YMIN - 268)) | (1 << (KqlParser.YSPLIT - 268)) | (1 << (KqlParser.YTITLE - 268)) | (1 << (KqlParser.BOOL - 268)) | (1 << (KqlParser.DYNAMIC - 268)) | (1 << (KqlParser.GUID - 268)) | (1 << (KqlParser.LONGLITERAL - 268)) | (1 << (KqlParser.INTLITERAL - 268)) | (1 << (KqlParser.REALLITERAL - 268)) | (1 << (KqlParser.DECIMALLITERAL - 268)) | (1 << (KqlParser.STRINGLITERAL - 268)) | (1 << (KqlParser.BOOLEANLITERAL - 268)) | (1 << (KqlParser.DATETIMELITERAL - 268)) | (1 << (KqlParser.TIMESPANLITERAL - 268)) | (1 << (KqlParser.TYPELITERAL - 268)) | (1 << (KqlParser.GUIDLITERAL - 268)) | (1 << (KqlParser.IDENTIFIER - 268)))) != 0):
                self.state = 1331
                localctx._unnamedExpression = self.unnamedExpression()
                localctx.Expressions.append(localctx._unnamedExpression)
                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KqlParser.COMMA:
                    self.state = 1332
                    self.match(KqlParser.COMMA)
                    self.state = 1333
                    localctx._unnamedExpression = self.unnamedExpression()
                    localctx.Expressions.append(localctx._unnamedExpression)
                    self.state = 1338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOperatorWhereClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Predicate = None # UnnamedExpressionContext

        def WHERE(self):
            return self.getToken(KqlParser.WHERE, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_joinOperatorWhereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOperatorWhereClause" ):
                listener.enterJoinOperatorWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOperatorWhereClause" ):
                listener.exitJoinOperatorWhereClause(self)




    def joinOperatorWhereClause(self):

        localctx = KqlParser.JoinOperatorWhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_joinOperatorWhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(KqlParser.WHERE)
            self.state = 1342
            localctx.Predicate = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LookupOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Table = None # UnnamedExpressionContext
            self.OnClause = None # JoinOperatorOnClauseContext

        def LOOKUP(self):
            return self.getToken(KqlParser.LOOKUP, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def joinOperatorOnClause(self):
            return self.getTypedRuleContext(KqlParser.JoinOperatorOnClauseContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_lookupOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLookupOperator" ):
                listener.enterLookupOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLookupOperator" ):
                listener.exitLookupOperator(self)




    def lookupOperator(self):

        localctx = KqlParser.LookupOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_lookupOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.match(KqlParser.LOOKUP)
            self.state = 1348
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1345
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

            self.state = 1351
            localctx.Table = self.unnamedExpression()
            self.state = 1352
            localctx.OnClause = self.joinOperatorOnClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroExpandOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.EntityGroup = None # MacroExpandEntityGroupContext
            self.ScopeName = None # IdentifierOrKeywordOrEscapedNameContext
            self._statement = None # StatementContext
            self.Statements = list() # of StatementContexts

        def MACROEXPAND(self):
            return self.getToken(KqlParser.MACROEXPAND, 0)

        def AS(self):
            return self.getToken(KqlParser.AS, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def macroExpandEntityGroup(self):
            return self.getTypedRuleContext(KqlParser.MacroExpandEntityGroupContext,0)


        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(KqlParser.StatementContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.SEMICOLON)
            else:
                return self.getToken(KqlParser.SEMICOLON, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_macroExpandOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroExpandOperator" ):
                listener.enterMacroExpandOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroExpandOperator" ):
                listener.exitMacroExpandOperator(self)




    def macroExpandOperator(self):

        localctx = KqlParser.MacroExpandOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_macroExpandOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.match(KqlParser.MACROEXPAND)
            self.state = 1358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1355
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

            self.state = 1361
            localctx.EntityGroup = self.macroExpandEntityGroup()
            self.state = 1362
            self.match(KqlParser.AS)
            self.state = 1363
            localctx.ScopeName = self.identifierOrKeywordOrEscapedName()
            self.state = 1364
            self.match(KqlParser.OPENPAREN)
            self.state = 1365
            localctx._statement = self.statement()
            localctx.Statements.append(localctx._statement)
            self.state = 1370
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1366
                    self.match(KqlParser.SEMICOLON)
                    self.state = 1367
                    localctx._statement = self.statement()
                    localctx.Statements.append(localctx._statement) 
                self.state = 1372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.SEMICOLON:
                self.state = 1373
                self.match(KqlParser.SEMICOLON)


            self.state = 1376
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroExpandEntityGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.EntityGroup = None # EntityGroupExpressionContext
            self.Name = None # SimpleNameReferenceContext
            self.Entity = None # EntityExpressionContext

        def entityGroupExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityGroupExpressionContext,0)


        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def entityExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_macroExpandEntityGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroExpandEntityGroup" ):
                listener.enterMacroExpandEntityGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroExpandEntityGroup" ):
                listener.exitMacroExpandEntityGroup(self)




    def macroExpandEntityGroup(self):

        localctx = KqlParser.MacroExpandEntityGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_macroExpandEntityGroup)
        try:
            self.state = 1381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                localctx.EntityGroup = self.entityGroupExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1379
                localctx.Name = self.simpleNameReference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1380
                localctx.Entity = self.entityExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityGroupExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unnamedExpression = None # UnnamedExpressionContext
            self.Expressions = list() # of UnnamedExpressionContexts

        def ENTITYGROUP(self):
            return self.getToken(KqlParser.ENTITYGROUP, 0)

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_entityGroupExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityGroupExpression" ):
                listener.enterEntityGroupExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityGroupExpression" ):
                listener.exitEntityGroupExpression(self)




    def entityGroupExpression(self):

        localctx = KqlParser.EntityGroupExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_entityGroupExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.match(KqlParser.ENTITYGROUP)
            self.state = 1384
            self.match(KqlParser.OPENBRACKET)
            self.state = 1385
            localctx._unnamedExpression = self.unnamedExpression()
            localctx.Expressions.append(localctx._unnamedExpression)
            self.state = 1390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1386
                self.match(KqlParser.COMMA)
                self.state = 1387
                localctx._unnamedExpression = self.unnamedExpression()
                localctx.Expressions.append(localctx._unnamedExpression)
                self.state = 1392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1393
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeGraphOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.SourceColumn = None # SimpleNameReferenceContext
            self.Direction = None # Token
            self.TargetColumn = None # SimpleNameReferenceContext
            self.IdClause = None # MakeGraphIdClauseContext
            self.TablesAndKeysClause = None # MakeGraphTablesAndKeysClauseContext
            self.PartitionedByClause = None # MakeGraphPartitionedByClauseContext

        def MAKEGRAPH(self):
            return self.getToken(KqlParser.MAKEGRAPH, 0)

        def simpleNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.SimpleNameReferenceContext)
            else:
                return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,i)


        def DASHDASH_GREATERTHAN(self):
            return self.getToken(KqlParser.DASHDASH_GREATERTHAN, 0)

        def DASHDASH(self):
            return self.getToken(KqlParser.DASHDASH, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def makeGraphIdClause(self):
            return self.getTypedRuleContext(KqlParser.MakeGraphIdClauseContext,0)


        def makeGraphTablesAndKeysClause(self):
            return self.getTypedRuleContext(KqlParser.MakeGraphTablesAndKeysClauseContext,0)


        def makeGraphPartitionedByClause(self):
            return self.getTypedRuleContext(KqlParser.MakeGraphPartitionedByClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeGraphOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeGraphOperator" ):
                listener.enterMakeGraphOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeGraphOperator" ):
                listener.exitMakeGraphOperator(self)




    def makeGraphOperator(self):

        localctx = KqlParser.MakeGraphOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_makeGraphOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.match(KqlParser.MAKEGRAPH)
            self.state = 1399
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1396
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

            self.state = 1402
            localctx.SourceColumn = self.simpleNameReference()
            self.state = 1403
            localctx.Direction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.DASHDASH or _la==KqlParser.DASHDASH_GREATERTHAN):
                localctx.Direction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1404
            localctx.TargetColumn = self.simpleNameReference()
            self.state = 1407
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.WITH_NODE_ID]:
                self.state = 1405
                localctx.IdClause = self.makeGraphIdClause()
                pass
            elif token in [KqlParser.WITH]:
                self.state = 1406
                localctx.TablesAndKeysClause = self.makeGraphTablesAndKeysClause()
                pass
            elif token in [KqlParser.EOF, KqlParser.BAR, KqlParser.CLOSEBRACE, KqlParser.CLOSEPAREN, KqlParser.SEMICOLON, KqlParser.PARTITIONEDBY, KqlParser.PROJECT]:
                pass
            else:
                pass
            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.PARTITIONEDBY:
                self.state = 1409
                localctx.PartitionedByClause = self.makeGraphPartitionedByClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeGraphIdClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def WITH_NODE_ID(self):
            return self.getToken(KqlParser.WITH_NODE_ID, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeGraphIdClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeGraphIdClause" ):
                listener.enterMakeGraphIdClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeGraphIdClause" ):
                listener.exitMakeGraphIdClause(self)




    def makeGraphIdClause(self):

        localctx = KqlParser.MakeGraphIdClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_makeGraphIdClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.match(KqlParser.WITH_NODE_ID)
            self.state = 1413
            self.match(KqlParser.EQUAL)
            self.state = 1414
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeGraphTablesAndKeysClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Table = None # InvocationExpressionContext
            self.Column = None # SimpleNameReferenceContext

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def ON(self):
            return self.getToken(KqlParser.ON, 0)

        def invocationExpression(self):
            return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,0)


        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeGraphTablesAndKeysClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeGraphTablesAndKeysClause" ):
                listener.enterMakeGraphTablesAndKeysClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeGraphTablesAndKeysClause" ):
                listener.exitMakeGraphTablesAndKeysClause(self)




    def makeGraphTablesAndKeysClause(self):

        localctx = KqlParser.MakeGraphTablesAndKeysClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_makeGraphTablesAndKeysClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.match(KqlParser.WITH)
            self.state = 1417
            localctx.Table = self.invocationExpression()
            self.state = 1418
            self.match(KqlParser.ON)
            self.state = 1419
            localctx.Column = self.simpleNameReference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeGraphPartitionedByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Entity = None # EntityPathOrElementExpressionContext
            self.SubQuery = None # ContextualSubExpressionContext

        def PARTITIONEDBY(self):
            return self.getToken(KqlParser.PARTITIONEDBY, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def entityPathOrElementExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityPathOrElementExpressionContext,0)


        def contextualSubExpression(self):
            return self.getTypedRuleContext(KqlParser.ContextualSubExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeGraphPartitionedByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeGraphPartitionedByClause" ):
                listener.enterMakeGraphPartitionedByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeGraphPartitionedByClause" ):
                listener.exitMakeGraphPartitionedByClause(self)




    def makeGraphPartitionedByClause(self):

        localctx = KqlParser.MakeGraphPartitionedByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_makeGraphPartitionedByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.match(KqlParser.PARTITIONEDBY)
            self.state = 1422
            localctx.Entity = self.entityPathOrElementExpression()
            self.state = 1423
            self.match(KqlParser.OPENPAREN)
            self.state = 1424
            localctx.SubQuery = self.contextualSubExpression()
            self.state = 1425
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._makeSeriesOperatorAggregation = None # MakeSeriesOperatorAggregationContext
            self.Aggregations = list() # of MakeSeriesOperatorAggregationContexts
            self.OnClause = None # MakeSeriesOperatorOnClauseContext
            self.InRangeClause = None # MakeSeriesOperatorInRangeClauseContext
            self.FromToStepClause = None # MakeSeriesOperatorFromToStepClauseContext
            self.ByClause = None # MakeSeriesOperatorByClauseContext

        def MAKESERIES(self):
            return self.getToken(KqlParser.MAKESERIES, 0)

        def makeSeriesOperatorAggregation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.MakeSeriesOperatorAggregationContext)
            else:
                return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorAggregationContext,i)


        def makeSeriesOperatorOnClause(self):
            return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorOnClauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def makeSeriesOperatorInRangeClause(self):
            return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorInRangeClauseContext,0)


        def makeSeriesOperatorFromToStepClause(self):
            return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorFromToStepClauseContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def makeSeriesOperatorByClause(self):
            return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorByClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperator" ):
                listener.enterMakeSeriesOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperator" ):
                listener.exitMakeSeriesOperator(self)




    def makeSeriesOperator(self):

        localctx = KqlParser.MakeSeriesOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_makeSeriesOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.match(KqlParser.MAKESERIES)
            self.state = 1431
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1428
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 1434
            localctx._makeSeriesOperatorAggregation = self.makeSeriesOperatorAggregation()
            localctx.Aggregations.append(localctx._makeSeriesOperatorAggregation)
            self.state = 1439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1435
                self.match(KqlParser.COMMA)
                self.state = 1436
                localctx._makeSeriesOperatorAggregation = self.makeSeriesOperatorAggregation()
                localctx.Aggregations.append(localctx._makeSeriesOperatorAggregation)
                self.state = 1441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1442
            localctx.OnClause = self.makeSeriesOperatorOnClause()
            self.state = 1445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.IN]:
                self.state = 1443
                localctx.InRangeClause = self.makeSeriesOperatorInRangeClause()
                pass
            elif token in [KqlParser.FROM, KqlParser.STEP, KqlParser.TO]:
                self.state = 1444
                localctx.FromToStepClause = self.makeSeriesOperatorFromToStepClause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.BY:
                self.state = 1447
                localctx.ByClause = self.makeSeriesOperatorByClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorOnClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext

        def ON(self):
            return self.getToken(KqlParser.ON, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperatorOnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorOnClause" ):
                listener.enterMakeSeriesOperatorOnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorOnClause" ):
                listener.exitMakeSeriesOperatorOnClause(self)




    def makeSeriesOperatorOnClause(self):

        localctx = KqlParser.MakeSeriesOperatorOnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_makeSeriesOperatorOnClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self.match(KqlParser.ON)
            self.state = 1451
            localctx.Expression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorAggregationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.Default = None # MakeSeriesOperatorExpressionDefaultClauseContext

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def makeSeriesOperatorExpressionDefaultClause(self):
            return self.getTypedRuleContext(KqlParser.MakeSeriesOperatorExpressionDefaultClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperatorAggregation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorAggregation" ):
                listener.enterMakeSeriesOperatorAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorAggregation" ):
                listener.exitMakeSeriesOperatorAggregation(self)




    def makeSeriesOperatorAggregation(self):

        localctx = KqlParser.MakeSeriesOperatorAggregationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_makeSeriesOperatorAggregation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            localctx.Expression = self.namedExpression()
            self.state = 1455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.DEFAULT:
                self.state = 1454
                localctx.Default = self.makeSeriesOperatorExpressionDefaultClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorExpressionDefaultClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Value = None # NamedExpressionContext

        def DEFAULT(self):
            return self.getToken(KqlParser.DEFAULT, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperatorExpressionDefaultClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorExpressionDefaultClause" ):
                listener.enterMakeSeriesOperatorExpressionDefaultClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorExpressionDefaultClause" ):
                listener.exitMakeSeriesOperatorExpressionDefaultClause(self)




    def makeSeriesOperatorExpressionDefaultClause(self):

        localctx = KqlParser.MakeSeriesOperatorExpressionDefaultClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_makeSeriesOperatorExpressionDefaultClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self.match(KqlParser.DEFAULT)
            self.state = 1458
            self.match(KqlParser.EQUAL)
            self.state = 1459
            localctx.Value = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorInRangeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FromExpression = None # NamedExpressionContext
            self.ToComma = None # Token
            self.ToExpression = None # NamedExpressionContext
            self.StepComma = None # Token
            self.StepExpression = None # NamedExpressionContext

        def IN(self):
            return self.getToken(KqlParser.IN, 0)

        def RANGE(self):
            return self.getToken(KqlParser.RANGE, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperatorInRangeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorInRangeClause" ):
                listener.enterMakeSeriesOperatorInRangeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorInRangeClause" ):
                listener.exitMakeSeriesOperatorInRangeClause(self)




    def makeSeriesOperatorInRangeClause(self):

        localctx = KqlParser.MakeSeriesOperatorInRangeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_makeSeriesOperatorInRangeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.match(KqlParser.IN)
            self.state = 1462
            self.match(KqlParser.RANGE)
            self.state = 1463
            self.match(KqlParser.OPENPAREN)
            self.state = 1464
            localctx.FromExpression = self.namedExpression()
            self.state = 1465
            localctx.ToComma = self.match(KqlParser.COMMA)
            self.state = 1466
            localctx.ToExpression = self.namedExpression()
            self.state = 1467
            localctx.StepComma = self.match(KqlParser.COMMA)
            self.state = 1468
            localctx.StepExpression = self.namedExpression()
            self.state = 1469
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorFromToStepClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FromExpression = None # NamedExpressionContext
            self.ToExpression = None # NamedExpressionContext
            self.StepExpression = None # NamedExpressionContext

        def STEP(self):
            return self.getToken(KqlParser.STEP, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def FROM(self):
            return self.getToken(KqlParser.FROM, 0)

        def TO(self):
            return self.getToken(KqlParser.TO, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperatorFromToStepClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorFromToStepClause" ):
                listener.enterMakeSeriesOperatorFromToStepClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorFromToStepClause" ):
                listener.exitMakeSeriesOperatorFromToStepClause(self)




    def makeSeriesOperatorFromToStepClause(self):

        localctx = KqlParser.MakeSeriesOperatorFromToStepClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_makeSeriesOperatorFromToStepClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.FROM:
                self.state = 1471
                self.match(KqlParser.FROM)
                self.state = 1472
                localctx.FromExpression = self.namedExpression()


            self.state = 1477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.TO:
                self.state = 1475
                self.match(KqlParser.TO)
                self.state = 1476
                localctx.ToExpression = self.namedExpression()


            self.state = 1479
            self.match(KqlParser.STEP)
            self.state = 1480
            localctx.StepExpression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MakeSeriesOperatorByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_makeSeriesOperatorByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMakeSeriesOperatorByClause" ):
                listener.enterMakeSeriesOperatorByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMakeSeriesOperatorByClause" ):
                listener.exitMakeSeriesOperatorByClause(self)




    def makeSeriesOperatorByClause(self):

        localctx = KqlParser.MakeSeriesOperatorByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_makeSeriesOperatorByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.match(KqlParser.BY)
            self.state = 1483
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1484
                self.match(KqlParser.COMMA)
                self.state = 1485
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self._mvapplyOperatorExpression = None # MvapplyOperatorExpressionContext
            self.Expressions = list() # of MvapplyOperatorExpressionContexts
            self.LimitClause = None # MvapplyOperatorLimitClauseContext
            self.IdClause = None # MvapplyOperatorIdClauseContext
            self.OnExpression = None # ContextualSubExpressionContext

        def ON(self):
            return self.getToken(KqlParser.ON, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def mvapplyOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.MvapplyOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.MvapplyOperatorExpressionContext,i)


        def contextualSubExpression(self):
            return self.getTypedRuleContext(KqlParser.ContextualSubExpressionContext,0)


        def MVAPPLY(self):
            return self.getToken(KqlParser.MVAPPLY, 0)

        def MV_APPLY(self):
            return self.getToken(KqlParser.MV_APPLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def mvapplyOperatorLimitClause(self):
            return self.getTypedRuleContext(KqlParser.MvapplyOperatorLimitClauseContext,0)


        def mvapplyOperatorIdClause(self):
            return self.getTypedRuleContext(KqlParser.MvapplyOperatorIdClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_mvapplyOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperator" ):
                listener.enterMvapplyOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperator" ):
                listener.exitMvapplyOperator(self)




    def mvapplyOperator(self):

        localctx = KqlParser.MvapplyOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_mvapplyOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.MV_APPLY or _la==KqlParser.MVAPPLY):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or _la==KqlParser.WITH_SOURCE or _la==KqlParser.WITH_STEP_NAME:
                self.state = 1492
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1497
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1498
            localctx._mvapplyOperatorExpression = self.mvapplyOperatorExpression()
            localctx.Expressions.append(localctx._mvapplyOperatorExpression)
            self.state = 1503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1499
                self.match(KqlParser.COMMA)
                self.state = 1500
                localctx._mvapplyOperatorExpression = self.mvapplyOperatorExpression()
                localctx.Expressions.append(localctx._mvapplyOperatorExpression)
                self.state = 1505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.LIMIT:
                self.state = 1506
                localctx.LimitClause = self.mvapplyOperatorLimitClause()


            self.state = 1510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.ID:
                self.state = 1509
                localctx.IdClause = self.mvapplyOperatorIdClause()


            self.state = 1512
            self.match(KqlParser.ON)
            self.state = 1513
            self.match(KqlParser.OPENPAREN)
            self.state = 1514
            localctx.OnExpression = self.contextualSubExpression()
            self.state = 1515
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorLimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LimitValue = None # Token

        def LIMIT(self):
            return self.getToken(KqlParser.LIMIT, 0)

        def LONGLITERAL(self):
            return self.getToken(KqlParser.LONGLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_mvapplyOperatorLimitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperatorLimitClause" ):
                listener.enterMvapplyOperatorLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperatorLimitClause" ):
                listener.exitMvapplyOperatorLimitClause(self)




    def mvapplyOperatorLimitClause(self):

        localctx = KqlParser.MvapplyOperatorLimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_mvapplyOperatorLimitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(KqlParser.LIMIT)
            self.state = 1518
            localctx.LimitValue = self.match(KqlParser.LONGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorIdClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.IdValue = None # Token

        def ID(self):
            return self.getToken(KqlParser.ID, 0)

        def GUIDLITERAL(self):
            return self.getToken(KqlParser.GUIDLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_mvapplyOperatorIdClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperatorIdClause" ):
                listener.enterMvapplyOperatorIdClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperatorIdClause" ):
                listener.exitMvapplyOperatorIdClause(self)




    def mvapplyOperatorIdClause(self):

        localctx = KqlParser.MvapplyOperatorIdClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_mvapplyOperatorIdClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.match(KqlParser.ID)
            self.state = 1521
            localctx.IdValue = self.match(KqlParser.GUIDLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.ToClause = None # MvapplyOperatorExpressionToClauseContext

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def mvapplyOperatorExpressionToClause(self):
            return self.getTypedRuleContext(KqlParser.MvapplyOperatorExpressionToClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_mvapplyOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperatorExpression" ):
                listener.enterMvapplyOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperatorExpression" ):
                listener.exitMvapplyOperatorExpression(self)




    def mvapplyOperatorExpression(self):

        localctx = KqlParser.MvapplyOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_mvapplyOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            localctx.Expression = self.namedExpression()
            self.state = 1525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.TO:
                self.state = 1524
                localctx.ToClause = self.mvapplyOperatorExpressionToClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvapplyOperatorExpressionToClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Type = None # Token

        def TO(self):
            return self.getToken(KqlParser.TO, 0)

        def TYPELITERAL(self):
            return self.getToken(KqlParser.TYPELITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_mvapplyOperatorExpressionToClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvapplyOperatorExpressionToClause" ):
                listener.enterMvapplyOperatorExpressionToClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvapplyOperatorExpressionToClause" ):
                listener.exitMvapplyOperatorExpressionToClause(self)




    def mvapplyOperatorExpressionToClause(self):

        localctx = KqlParser.MvapplyOperatorExpressionToClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_mvapplyOperatorExpressionToClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(KqlParser.TO)
            self.state = 1528
            localctx.Type = self.match(KqlParser.TYPELITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvexpandOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self._mvexpandOperatorExpression = None # MvexpandOperatorExpressionContext
            self.Expressions = list() # of MvexpandOperatorExpressionContexts
            self.LimitClause = None # MvapplyOperatorLimitClauseContext

        def mvexpandOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.MvexpandOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.MvexpandOperatorExpressionContext,i)


        def MVEXPAND(self):
            return self.getToken(KqlParser.MVEXPAND, 0)

        def MV_EXPAND(self):
            return self.getToken(KqlParser.MV_EXPAND, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def mvapplyOperatorLimitClause(self):
            return self.getTypedRuleContext(KqlParser.MvapplyOperatorLimitClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_mvexpandOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvexpandOperator" ):
                listener.enterMvexpandOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvexpandOperator" ):
                listener.exitMvexpandOperator(self)




    def mvexpandOperator(self):

        localctx = KqlParser.MvexpandOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_mvexpandOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.MV_EXPAND or _la==KqlParser.MVEXPAND):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or _la==KqlParser.WITH_SOURCE or _la==KqlParser.WITH_STEP_NAME:
                self.state = 1531
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1537
            localctx._mvexpandOperatorExpression = self.mvexpandOperatorExpression()
            localctx.Expressions.append(localctx._mvexpandOperatorExpression)
            self.state = 1542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1538
                self.match(KqlParser.COMMA)
                self.state = 1539
                localctx._mvexpandOperatorExpression = self.mvexpandOperatorExpression()
                localctx.Expressions.append(localctx._mvexpandOperatorExpression)
                self.state = 1544
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.LIMIT:
                self.state = 1545
                localctx.LimitClause = self.mvapplyOperatorLimitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MvexpandOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.ToClause = None # MvapplyOperatorExpressionToClauseContext

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def mvapplyOperatorExpressionToClause(self):
            return self.getTypedRuleContext(KqlParser.MvapplyOperatorExpressionToClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_mvexpandOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMvexpandOperatorExpression" ):
                listener.enterMvexpandOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMvexpandOperatorExpression" ):
                listener.exitMvexpandOperatorExpression(self)




    def mvexpandOperatorExpression(self):

        localctx = KqlParser.MvexpandOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_mvexpandOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            localctx.Expression = self.namedExpression()
            self.state = 1550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.TO:
                self.state = 1549
                localctx.ToClause = self.mvapplyOperatorExpressionToClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.KindClause = None # ParseOperatorKindClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.Pattern = None # ParseOperatorPatternContext

        def PARSE(self):
            return self.getToken(KqlParser.PARSE, 0)

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def parseOperatorPattern(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorPatternContext,0)


        def parseOperatorKindClause(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorKindClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parseOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperator" ):
                listener.enterParseOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperator" ):
                listener.exitParseOperator(self)




    def parseOperator(self):

        localctx = KqlParser.ParseOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_parseOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.match(KqlParser.PARSE)
            self.state = 1554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.KIND:
                self.state = 1553
                localctx.KindClause = self.parseOperatorKindClause()


            self.state = 1556
            localctx.Expression = self.unnamedExpression()
            self.state = 1557
            self.match(KqlParser.WITH)
            self.state = 1558
            localctx.Pattern = self.parseOperatorPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorKindClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Kind = None # Token
            self.FlagsClause = None # ParseOperatorFlagsClauseContext

        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def SIMPLE(self):
            return self.getToken(KqlParser.SIMPLE, 0)

        def REGEX(self):
            return self.getToken(KqlParser.REGEX, 0)

        def RELAXED(self):
            return self.getToken(KqlParser.RELAXED, 0)

        def parseOperatorFlagsClause(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorFlagsClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parseOperatorKindClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorKindClause" ):
                listener.enterParseOperatorKindClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorKindClause" ):
                listener.exitParseOperatorKindClause(self)




    def parseOperatorKindClause(self):

        localctx = KqlParser.ParseOperatorKindClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_parseOperatorKindClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1560
            self.match(KqlParser.KIND)
            self.state = 1561
            self.match(KqlParser.EQUAL)
            self.state = 1562
            localctx.Kind = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 216)) & ~0x3f) == 0 and ((1 << (_la - 216)) & ((1 << (KqlParser.REGEX - 216)) | (1 << (KqlParser.RELAXED - 216)) | (1 << (KqlParser.SIMPLE - 216)))) != 0)):
                localctx.Kind = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.FLAGS:
                self.state = 1563
                localctx.FlagsClause = self.parseOperatorFlagsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorFlagsClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Flags = None # Token

        def FLAGS(self):
            return self.getToken(KqlParser.FLAGS, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_parseOperatorFlagsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorFlagsClause" ):
                listener.enterParseOperatorFlagsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorFlagsClause" ):
                listener.exitParseOperatorFlagsClause(self)




    def parseOperatorFlagsClause(self):

        localctx = KqlParser.ParseOperatorFlagsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_parseOperatorFlagsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.match(KqlParser.FLAGS)
            self.state = 1567
            self.match(KqlParser.EQUAL)
            self.state = 1568
            localctx.Flags = self.match(KqlParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorNameAndOptionalTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # SimpleNameReferenceContext
            self.Type = None # ScalarTypeContext

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def scalarType(self):
            return self.getTypedRuleContext(KqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parseOperatorNameAndOptionalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorNameAndOptionalType" ):
                listener.enterParseOperatorNameAndOptionalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorNameAndOptionalType" ):
                listener.exitParseOperatorNameAndOptionalType(self)




    def parseOperatorNameAndOptionalType(self):

        localctx = KqlParser.ParseOperatorNameAndOptionalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_parseOperatorNameAndOptionalType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            localctx.Name = self.simpleNameReference()
            self.state = 1573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.COLON:
                self.state = 1571
                self.match(KqlParser.COLON)
                self.state = 1572
                localctx.Type = self.scalarType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LeadingColumn = None # ParseOperatorNameAndOptionalTypeContext
            self._parseOperatorPatternSegment = None # ParseOperatorPatternSegmentContext
            self.Segments = list() # of ParseOperatorPatternSegmentContexts
            self.TrailingStar = None # Token

        def parseOperatorNameAndOptionalType(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorNameAndOptionalTypeContext,0)


        def parseOperatorPatternSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ParseOperatorPatternSegmentContext)
            else:
                return self.getTypedRuleContext(KqlParser.ParseOperatorPatternSegmentContext,i)


        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_parseOperatorPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorPattern" ):
                listener.enterParseOperatorPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorPattern" ):
                listener.exitParseOperatorPattern(self)




    def parseOperatorPattern(self):

        localctx = KqlParser.ParseOperatorPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_parseOperatorPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.OPENBRACKET) | (1 << KqlParser.ACCESS) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.CLUSTER))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (KqlParser.DATABASE - 69)) | (1 << (KqlParser.DECLARE - 69)) | (1 << (KqlParser.DEFAULT - 69)) | (1 << (KqlParser.DELTA - 69)) | (1 << (KqlParser.EDGES - 69)) | (1 << (KqlParser.EVALUATE - 69)) | (1 << (KqlParser.EXECUTE - 69)) | (1 << (KqlParser.FACET - 69)) | (1 << (KqlParser.FORK - 69)) | (1 << (KqlParser.FROM - 69)) | (1 << (KqlParser.HIDDEN_ - 69)) | (1 << (KqlParser.HOT - 69)) | (1 << (KqlParser.HOTDATA - 69)) | (1 << (KqlParser.HOTINDEX - 69)) | (1 << (KqlParser.ID - 69)) | (1 << (KqlParser.INTO - 69)))) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (KqlParser.LEGEND - 140)) | (1 << (KqlParser.LET - 140)) | (1 << (KqlParser.LINEAR - 140)) | (1 << (KqlParser.LIST - 140)) | (1 << (KqlParser.LOOKUP - 140)) | (1 << (KqlParser.LOG - 140)) | (1 << (KqlParser.MAP - 140)) | (1 << (KqlParser.NODES - 140)) | (1 << (KqlParser.NONE - 140)) | (1 << (KqlParser.NULL - 140)) | (1 << (KqlParser.NULLS - 140)) | (1 << (KqlParser.ON - 140)) | (1 << (KqlParser.OPTIONAL - 140)) | (1 << (KqlParser.OUTPUT - 140)) | (1 << (KqlParser.PACK - 140)) | (1 << (KqlParser.PARTITION - 140)) | (1 << (KqlParser.PARTITIONBY - 140)) | (1 << (KqlParser.PATTERN - 140)))) != 0) or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & ((1 << (KqlParser.PLUGIN - 204)) | (1 << (KqlParser.QUERYPARAMETERS - 204)) | (1 << (KqlParser.RANGE - 204)) | (1 << (KqlParser.REDUCE - 204)) | (1 << (KqlParser.RENDER - 204)) | (1 << (KqlParser.REPLACE - 204)) | (1 << (KqlParser.RESTRICT - 204)) | (1 << (KqlParser.SERIES - 204)) | (1 << (KqlParser.STACKED - 204)) | (1 << (KqlParser.STACKED100 - 204)) | (1 << (KqlParser.STEP - 204)) | (1 << (KqlParser.THRESHOLD - 204)) | (1 << (KqlParser.TYPEOF - 204)) | (1 << (KqlParser.UNSTACKED - 204)) | (1 << (KqlParser.UUID - 204)) | (1 << (KqlParser.VIEW - 204)) | (1 << (KqlParser.VISIBLE - 204)) | (1 << (KqlParser.WITH - 204)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (KqlParser.XAXIS - 268)) | (1 << (KqlParser.XCOLUMN - 268)) | (1 << (KqlParser.XMAX - 268)) | (1 << (KqlParser.XMIN - 268)) | (1 << (KqlParser.XTITLE - 268)) | (1 << (KqlParser.YAXIS - 268)) | (1 << (KqlParser.YCOLUMNS - 268)) | (1 << (KqlParser.YMAX - 268)) | (1 << (KqlParser.YMIN - 268)) | (1 << (KqlParser.YSPLIT - 268)) | (1 << (KqlParser.YTITLE - 268)) | (1 << (KqlParser.BOOL - 268)) | (1 << (KqlParser.GUID - 268)) | (1 << (KqlParser.IDENTIFIER - 268)))) != 0):
                self.state = 1575
                localctx.LeadingColumn = self.parseOperatorNameAndOptionalType()


            self.state = 1581
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1578
                    localctx._parseOperatorPatternSegment = self.parseOperatorPatternSegment()
                    localctx.Segments.append(localctx._parseOperatorPatternSegment) 
                self.state = 1583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 1585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.ASTERISK:
                self.state = 1584
                localctx.TrailingStar = self.match(KqlParser.ASTERISK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseOperatorPatternSegmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Text = None # StringLiteralExpressionContext
            self.Column = None # ParseOperatorNameAndOptionalTypeContext

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def parseOperatorNameAndOptionalType(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorNameAndOptionalTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parseOperatorPatternSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseOperatorPatternSegment" ):
                listener.enterParseOperatorPatternSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseOperatorPatternSegment" ):
                listener.exitParseOperatorPatternSegment(self)




    def parseOperatorPatternSegment(self):

        localctx = KqlParser.ParseOperatorPatternSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_parseOperatorPatternSegment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.ASTERISK:
                self.state = 1587
                self.match(KqlParser.ASTERISK)


            self.state = 1590
            localctx.Text = self.stringLiteralExpression()
            self.state = 1592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.OPENBRACKET) | (1 << KqlParser.ACCESS) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.CLUSTER))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (KqlParser.DATABASE - 69)) | (1 << (KqlParser.DECLARE - 69)) | (1 << (KqlParser.DEFAULT - 69)) | (1 << (KqlParser.DELTA - 69)) | (1 << (KqlParser.EDGES - 69)) | (1 << (KqlParser.EVALUATE - 69)) | (1 << (KqlParser.EXECUTE - 69)) | (1 << (KqlParser.FACET - 69)) | (1 << (KqlParser.FORK - 69)) | (1 << (KqlParser.FROM - 69)) | (1 << (KqlParser.HIDDEN_ - 69)) | (1 << (KqlParser.HOT - 69)) | (1 << (KqlParser.HOTDATA - 69)) | (1 << (KqlParser.HOTINDEX - 69)) | (1 << (KqlParser.ID - 69)) | (1 << (KqlParser.INTO - 69)))) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (KqlParser.LEGEND - 140)) | (1 << (KqlParser.LET - 140)) | (1 << (KqlParser.LINEAR - 140)) | (1 << (KqlParser.LIST - 140)) | (1 << (KqlParser.LOOKUP - 140)) | (1 << (KqlParser.LOG - 140)) | (1 << (KqlParser.MAP - 140)) | (1 << (KqlParser.NODES - 140)) | (1 << (KqlParser.NONE - 140)) | (1 << (KqlParser.NULL - 140)) | (1 << (KqlParser.NULLS - 140)) | (1 << (KqlParser.ON - 140)) | (1 << (KqlParser.OPTIONAL - 140)) | (1 << (KqlParser.OUTPUT - 140)) | (1 << (KqlParser.PACK - 140)) | (1 << (KqlParser.PARTITION - 140)) | (1 << (KqlParser.PARTITIONBY - 140)) | (1 << (KqlParser.PATTERN - 140)))) != 0) or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & ((1 << (KqlParser.PLUGIN - 204)) | (1 << (KqlParser.QUERYPARAMETERS - 204)) | (1 << (KqlParser.RANGE - 204)) | (1 << (KqlParser.REDUCE - 204)) | (1 << (KqlParser.RENDER - 204)) | (1 << (KqlParser.REPLACE - 204)) | (1 << (KqlParser.RESTRICT - 204)) | (1 << (KqlParser.SERIES - 204)) | (1 << (KqlParser.STACKED - 204)) | (1 << (KqlParser.STACKED100 - 204)) | (1 << (KqlParser.STEP - 204)) | (1 << (KqlParser.THRESHOLD - 204)) | (1 << (KqlParser.TYPEOF - 204)) | (1 << (KqlParser.UNSTACKED - 204)) | (1 << (KqlParser.UUID - 204)) | (1 << (KqlParser.VIEW - 204)) | (1 << (KqlParser.VISIBLE - 204)) | (1 << (KqlParser.WITH - 204)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (KqlParser.XAXIS - 268)) | (1 << (KqlParser.XCOLUMN - 268)) | (1 << (KqlParser.XMAX - 268)) | (1 << (KqlParser.XMIN - 268)) | (1 << (KqlParser.XTITLE - 268)) | (1 << (KqlParser.YAXIS - 268)) | (1 << (KqlParser.YCOLUMNS - 268)) | (1 << (KqlParser.YMAX - 268)) | (1 << (KqlParser.YMIN - 268)) | (1 << (KqlParser.YSPLIT - 268)) | (1 << (KqlParser.YTITLE - 268)) | (1 << (KqlParser.BOOL - 268)) | (1 << (KqlParser.GUID - 268)) | (1 << (KqlParser.IDENTIFIER - 268)))) != 0):
                self.state = 1591
                localctx.Column = self.parseOperatorNameAndOptionalType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseWhereOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.KindClause = None # ParseOperatorKindClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.Pattern = None # ParseOperatorPatternContext

        def PARSEWHERE(self):
            return self.getToken(KqlParser.PARSEWHERE, 0)

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def parseOperatorPattern(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorPatternContext,0)


        def parseOperatorKindClause(self):
            return self.getTypedRuleContext(KqlParser.ParseOperatorKindClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parseWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseWhereOperator" ):
                listener.enterParseWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseWhereOperator" ):
                listener.exitParseWhereOperator(self)




    def parseWhereOperator(self):

        localctx = KqlParser.ParseWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_parseWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.match(KqlParser.PARSEWHERE)
            self.state = 1596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.KIND:
                self.state = 1595
                localctx.KindClause = self.parseOperatorKindClause()


            self.state = 1598
            localctx.Expression = self.unnamedExpression()
            self.state = 1599
            self.match(KqlParser.WITH)
            self.state = 1600
            localctx.Pattern = self.parseOperatorPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseKvOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expressions = None # UnnamedExpressionContext
            self.Keys = None # RowSchemaContext
            self.WithClause = None # ParseKvWithClauseContext

        def PARSEKV(self):
            return self.getToken(KqlParser.PARSEKV, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def rowSchema(self):
            return self.getTypedRuleContext(KqlParser.RowSchemaContext,0)


        def parseKvWithClause(self):
            return self.getTypedRuleContext(KqlParser.ParseKvWithClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parseKvOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseKvOperator" ):
                listener.enterParseKvOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseKvOperator" ):
                listener.exitParseKvOperator(self)




    def parseKvOperator(self):

        localctx = KqlParser.ParseKvOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_parseKvOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self.match(KqlParser.PARSEKV)
            self.state = 1603
            localctx.Expressions = self.unnamedExpression()
            self.state = 1604
            localctx.Keys = self.rowSchema()
            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.WITH:
                self.state = 1605
                localctx.WithClause = self.parseKvWithClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParseKvWithClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._queryOperatorProperty = None # QueryOperatorPropertyContext
            self.Properties = list() # of QueryOperatorPropertyContexts

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def queryOperatorProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.QueryOperatorPropertyContext)
            else:
                return self.getTypedRuleContext(KqlParser.QueryOperatorPropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_parseKvWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParseKvWithClause" ):
                listener.enterParseKvWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParseKvWithClause" ):
                listener.exitParseKvWithClause(self)




    def parseKvWithClause(self):

        localctx = KqlParser.ParseKvWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_parseKvWithClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.match(KqlParser.WITH)
            self.state = 1609
            self.match(KqlParser.OPENPAREN)
            self.state = 1610
            localctx._queryOperatorProperty = self.queryOperatorProperty()
            localctx.Properties.append(localctx._queryOperatorProperty)
            self.state = 1615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1611
                self.match(KqlParser.COMMA)
                self.state = 1612
                localctx._queryOperatorProperty = self.queryOperatorProperty()
                localctx.Properties.append(localctx._queryOperatorProperty)
                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1618
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.ByExpression = None # EntityExpressionContext
            self.InClause = None # PartitionOperatorInClauseContext
            self.SubExpressionBody = None # PartitionOperatorSubExpressionBodyContext
            self.FullExpressionBody = None # PartitionOperatorFullExpressionBodyContext

        def PARTITION(self):
            return self.getToken(KqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def entityExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityExpressionContext,0)


        def partitionOperatorSubExpressionBody(self):
            return self.getTypedRuleContext(KqlParser.PartitionOperatorSubExpressionBodyContext,0)


        def partitionOperatorFullExpressionBody(self):
            return self.getTypedRuleContext(KqlParser.PartitionOperatorFullExpressionBodyContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def partitionOperatorInClause(self):
            return self.getTypedRuleContext(KqlParser.PartitionOperatorInClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_partitionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOperator" ):
                listener.enterPartitionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOperator" ):
                listener.exitPartitionOperator(self)




    def partitionOperator(self):

        localctx = KqlParser.PartitionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_partitionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.match(KqlParser.PARTITION)
            self.state = 1624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0):
                self.state = 1621
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1627
            self.match(KqlParser.BY)
            self.state = 1628
            localctx.ByExpression = self.entityExpression()
            self.state = 1630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.IN:
                self.state = 1629
                localctx.InClause = self.partitionOperatorInClause()


            self.state = 1634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.OPENPAREN]:
                self.state = 1632
                localctx.SubExpressionBody = self.partitionOperatorSubExpressionBody()
                pass
            elif token in [KqlParser.OPENBRACE]:
                self.state = 1633
                localctx.FullExpressionBody = self.partitionOperatorFullExpressionBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOperatorInClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FunctionCall = None # FunctionCallExpressionContext
            self.Literal = None # DynamicLiteralExpressionContext

        def IN(self):
            return self.getToken(KqlParser.IN, 0)

        def functionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallExpressionContext,0)


        def dynamicLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DynamicLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_partitionOperatorInClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOperatorInClause" ):
                listener.enterPartitionOperatorInClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOperatorInClause" ):
                listener.exitPartitionOperatorInClause(self)




    def partitionOperatorInClause(self):

        localctx = KqlParser.PartitionOperatorInClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_partitionOperatorInClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self.match(KqlParser.IN)
            self.state = 1639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.OPENBRACKET, KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.COUNT, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID, KqlParser.IDENTIFIER]:
                self.state = 1637
                localctx.FunctionCall = self.functionCallExpression()
                pass
            elif token in [KqlParser.DYNAMIC]:
                self.state = 1638
                localctx.Literal = self.dynamicLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOperatorSubExpressionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SubExpression = None # PipeSubExpressionContext

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def pipeSubExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeSubExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_partitionOperatorSubExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOperatorSubExpressionBody" ):
                listener.enterPartitionOperatorSubExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOperatorSubExpressionBody" ):
                listener.exitPartitionOperatorSubExpressionBody(self)




    def partitionOperatorSubExpressionBody(self):

        localctx = KqlParser.PartitionOperatorSubExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_partitionOperatorSubExpressionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.match(KqlParser.OPENPAREN)
            self.state = 1642
            localctx.SubExpression = self.pipeSubExpression()
            self.state = 1643
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOperatorFullExpressionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # PipeExpressionContext

        def OPENBRACE(self):
            return self.getToken(KqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(KqlParser.CLOSEBRACE, 0)

        def pipeExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_partitionOperatorFullExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOperatorFullExpressionBody" ):
                listener.enterPartitionOperatorFullExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOperatorFullExpressionBody" ):
                listener.exitPartitionOperatorFullExpressionBody(self)




    def partitionOperatorFullExpressionBody(self):

        localctx = KqlParser.PartitionOperatorFullExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_partitionOperatorFullExpressionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.match(KqlParser.OPENBRACE)
            self.state = 1646
            localctx.Expression = self.pipeExpression()
            self.state = 1647
            self.match(KqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionByOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Column = None # EntityExpressionContext
            self.IdClause = None # PartitionByOperatorIdClauseContext
            self.SubExpression = None # ContextualSubExpressionContext

        def PARTITIONBY(self):
            return self.getToken(KqlParser.PARTITIONBY, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def entityExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityExpressionContext,0)


        def contextualSubExpression(self):
            return self.getTypedRuleContext(KqlParser.ContextualSubExpressionContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def partitionByOperatorIdClause(self):
            return self.getTypedRuleContext(KqlParser.PartitionByOperatorIdClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_partitionByOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionByOperator" ):
                listener.enterPartitionByOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionByOperator" ):
                listener.exitPartitionByOperator(self)




    def partitionByOperator(self):

        localctx = KqlParser.PartitionByOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_partitionByOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1649
            self.match(KqlParser.PARTITIONBY)
            self.state = 1653
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1650
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1655
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

            self.state = 1656
            localctx.Column = self.entityExpression()
            self.state = 1658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.ID:
                self.state = 1657
                localctx.IdClause = self.partitionByOperatorIdClause()


            self.state = 1660
            self.match(KqlParser.OPENPAREN)
            self.state = 1661
            localctx.SubExpression = self.contextualSubExpression()
            self.state = 1662
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionByOperatorIdClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.IdValue = None # Token

        def ID(self):
            return self.getToken(KqlParser.ID, 0)

        def GUIDLITERAL(self):
            return self.getToken(KqlParser.GUIDLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_partitionByOperatorIdClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionByOperatorIdClause" ):
                listener.enterPartitionByOperatorIdClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionByOperatorIdClause" ):
                listener.exitPartitionByOperatorIdClause(self)




    def partitionByOperatorIdClause(self):

        localctx = KqlParser.PartitionByOperatorIdClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_partitionByOperatorIdClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self.match(KqlParser.ID)
            self.state = 1665
            localctx.IdValue = self.match(KqlParser.GUIDLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def PRINT(self):
            return self.getToken(KqlParser.PRINT, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_printOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintOperator" ):
                listener.enterPrintOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintOperator" ):
                listener.exitPrintOperator(self)




    def printOperator(self):

        localctx = KqlParser.PrintOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_printOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(KqlParser.PRINT)
            self.state = 1668
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1669
                self.match(KqlParser.COMMA)
                self.state = 1670
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectAwayOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._simpleOrWildcardedNameReference = None # SimpleOrWildcardedNameReferenceContext
            self.Columns = list() # of SimpleOrWildcardedNameReferenceContexts

        def PROJECTAWAY(self):
            return self.getToken(KqlParser.PROJECTAWAY, 0)

        def simpleOrWildcardedNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.SimpleOrWildcardedNameReferenceContext)
            else:
                return self.getTypedRuleContext(KqlParser.SimpleOrWildcardedNameReferenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_projectAwayOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectAwayOperator" ):
                listener.enterProjectAwayOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectAwayOperator" ):
                listener.exitProjectAwayOperator(self)




    def projectAwayOperator(self):

        localctx = KqlParser.ProjectAwayOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_projectAwayOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1676
            self.match(KqlParser.PROJECTAWAY)
            self.state = 1685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.ASTERISK) | (1 << KqlParser.OPENBRACKET) | (1 << KqlParser.ACCESS) | (1 << KqlParser.ACCUMULATE) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AS) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.BY) | (1 << KqlParser.CLUSTER) | (1 << KqlParser.CONSUME) | (1 << KqlParser.CONTAINS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KqlParser.COUNT - 66)) | (1 << (KqlParser.DATABASE - 66)) | (1 << (KqlParser.DATATABLE - 66)) | (1 << (KqlParser.DECLARE - 66)) | (1 << (KqlParser.DEFAULT - 66)) | (1 << (KqlParser.DELTA - 66)) | (1 << (KqlParser.DISTINCT - 66)) | (1 << (KqlParser.EDGES - 66)) | (1 << (KqlParser.EVALUATE - 66)) | (1 << (KqlParser.EXECUTE - 66)) | (1 << (KqlParser.EXTEND - 66)) | (1 << (KqlParser.EXTERNALDATA - 66)) | (1 << (KqlParser.FACET - 66)) | (1 << (KqlParser.FILTER - 66)) | (1 << (KqlParser.FIND - 66)) | (1 << (KqlParser.FORK - 66)) | (1 << (KqlParser.FROM - 66)) | (1 << (KqlParser.HAS - 66)) | (1 << (KqlParser.HIDDEN_ - 66)) | (1 << (KqlParser.HOT - 66)) | (1 << (KqlParser.HOTDATA - 66)) | (1 << (KqlParser.HOTINDEX - 66)) | (1 << (KqlParser.ID - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KqlParser.IN - 130)) | (1 << (KqlParser.INTO - 130)) | (1 << (KqlParser.INVOKE - 130)) | (1 << (KqlParser.LEGEND - 130)) | (1 << (KqlParser.LET - 130)) | (1 << (KqlParser.LIMIT - 130)) | (1 << (KqlParser.LINEAR - 130)) | (1 << (KqlParser.LIST - 130)) | (1 << (KqlParser.LOOKUP - 130)) | (1 << (KqlParser.LOG - 130)) | (1 << (KqlParser.MAP - 130)) | (1 << (KqlParser.MATERIALIZE - 130)) | (1 << (KqlParser.NODES - 130)) | (1 << (KqlParser.NONE - 130)) | (1 << (KqlParser.NULL - 130)) | (1 << (KqlParser.NULLS - 130)) | (1 << (KqlParser.OF - 130)) | (1 << (KqlParser.ON - 130)) | (1 << (KqlParser.OPTIONAL - 130)) | (1 << (KqlParser.OUTPUT - 130)) | (1 << (KqlParser.PACK - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (KqlParser.PARSE - 194)) | (1 << (KqlParser.PARTITION - 194)) | (1 << (KqlParser.PARTITIONBY - 194)) | (1 << (KqlParser.PATTERN - 194)) | (1 << (KqlParser.PLUGIN - 194)) | (1 << (KqlParser.PRINT - 194)) | (1 << (KqlParser.QUERYPARAMETERS - 194)) | (1 << (KqlParser.RANGE - 194)) | (1 << (KqlParser.REDUCE - 194)) | (1 << (KqlParser.RENDER - 194)) | (1 << (KqlParser.REPLACE - 194)) | (1 << (KqlParser.RESTRICT - 194)) | (1 << (KqlParser.SAMPLE - 194)) | (1 << (KqlParser.SAMPLE_DISTINCT - 194)) | (1 << (KqlParser.SCAN - 194)) | (1 << (KqlParser.SEARCH - 194)) | (1 << (KqlParser.SERIALIZE - 194)) | (1 << (KqlParser.SERIES - 194)) | (1 << (KqlParser.SET - 194)) | (1 << (KqlParser.SORT - 194)) | (1 << (KqlParser.STACKED - 194)) | (1 << (KqlParser.STACKED100 - 194)) | (1 << (KqlParser.STEP - 194)) | (1 << (KqlParser.SUMMARIZE - 194)) | (1 << (KqlParser.TAKE - 194)) | (1 << (KqlParser.THRESHOLD - 194)) | (1 << (KqlParser.TITLE - 194)) | (1 << (KqlParser.TO - 194)) | (1 << (KqlParser.TOP - 194)) | (1 << (KqlParser.TOP_HITTERS - 194)) | (1 << (KqlParser.TOP_NESTED - 194)) | (1 << (KqlParser.TOSCALAR - 194)) | (1 << (KqlParser.TOTABLE - 194)) | (1 << (KqlParser.TYPEOF - 194)) | (1 << (KqlParser.UNSTACKED - 194)) | (1 << (KqlParser.UUID - 194)) | (1 << (KqlParser.VIEW - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (KqlParser.VISIBLE - 258)) | (1 << (KqlParser.WHERE - 258)) | (1 << (KqlParser.WITH - 258)) | (1 << (KqlParser.XAXIS - 258)) | (1 << (KqlParser.XCOLUMN - 258)) | (1 << (KqlParser.XMAX - 258)) | (1 << (KqlParser.XMIN - 258)) | (1 << (KqlParser.XTITLE - 258)) | (1 << (KqlParser.YAXIS - 258)) | (1 << (KqlParser.YCOLUMNS - 258)) | (1 << (KqlParser.YMAX - 258)) | (1 << (KqlParser.YMIN - 258)) | (1 << (KqlParser.YSPLIT - 258)) | (1 << (KqlParser.YTITLE - 258)) | (1 << (KqlParser.BOOL - 258)) | (1 << (KqlParser.GUID - 258)) | (1 << (KqlParser.IDENTIFIER - 258)))) != 0):
                self.state = 1677
                localctx._simpleOrWildcardedNameReference = self.simpleOrWildcardedNameReference()
                localctx.Columns.append(localctx._simpleOrWildcardedNameReference)
                self.state = 1682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KqlParser.COMMA:
                    self.state = 1678
                    self.match(KqlParser.COMMA)
                    self.state = 1679
                    localctx._simpleOrWildcardedNameReference = self.simpleOrWildcardedNameReference()
                    localctx.Columns.append(localctx._simpleOrWildcardedNameReference)
                    self.state = 1684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectKeepOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._simpleOrWildcardedNameReference = None # SimpleOrWildcardedNameReferenceContext
            self.Columns = list() # of SimpleOrWildcardedNameReferenceContexts

        def PROJECTKEEP(self):
            return self.getToken(KqlParser.PROJECTKEEP, 0)

        def simpleOrWildcardedNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.SimpleOrWildcardedNameReferenceContext)
            else:
                return self.getTypedRuleContext(KqlParser.SimpleOrWildcardedNameReferenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_projectKeepOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectKeepOperator" ):
                listener.enterProjectKeepOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectKeepOperator" ):
                listener.exitProjectKeepOperator(self)




    def projectKeepOperator(self):

        localctx = KqlParser.ProjectKeepOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_projectKeepOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self.match(KqlParser.PROJECTKEEP)
            self.state = 1688
            localctx._simpleOrWildcardedNameReference = self.simpleOrWildcardedNameReference()
            localctx.Columns.append(localctx._simpleOrWildcardedNameReference)
            self.state = 1693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1689
                self.match(KqlParser.COMMA)
                self.state = 1690
                localctx._simpleOrWildcardedNameReference = self.simpleOrWildcardedNameReference()
                localctx.Columns.append(localctx._simpleOrWildcardedNameReference)
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def PROJECT(self):
            return self.getToken(KqlParser.PROJECT, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_projectOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectOperator" ):
                listener.enterProjectOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectOperator" ):
                listener.exitProjectOperator(self)




    def projectOperator(self):

        localctx = KqlParser.ProjectOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_projectOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.match(KqlParser.PROJECT)
            self.state = 1705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.ASTERISK) | (1 << KqlParser.DASH) | (1 << KqlParser.OPENBRACKET) | (1 << KqlParser.OPENPAREN) | (1 << KqlParser.PLUS) | (1 << KqlParser.ACCESS) | (1 << KqlParser.ACCUMULATE) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AS) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.BY) | (1 << KqlParser.CLUSTER) | (1 << KqlParser.CONSUME) | (1 << KqlParser.CONTAINS))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (KqlParser.CONTEXTUAL_DATATABLE - 65)) | (1 << (KqlParser.COUNT - 65)) | (1 << (KqlParser.DATABASE - 65)) | (1 << (KqlParser.DATATABLE - 65)) | (1 << (KqlParser.DECLARE - 65)) | (1 << (KqlParser.DEFAULT - 65)) | (1 << (KqlParser.DELTA - 65)) | (1 << (KqlParser.DISTINCT - 65)) | (1 << (KqlParser.EDGES - 65)) | (1 << (KqlParser.EVALUATE - 65)) | (1 << (KqlParser.EXECUTE - 65)) | (1 << (KqlParser.EXTEND - 65)) | (1 << (KqlParser.EXTERNALDATA - 65)) | (1 << (KqlParser.EXTERNAL_DATA - 65)) | (1 << (KqlParser.FACET - 65)) | (1 << (KqlParser.FILTER - 65)) | (1 << (KqlParser.FIND - 65)) | (1 << (KqlParser.FORK - 65)) | (1 << (KqlParser.FROM - 65)) | (1 << (KqlParser.HAS - 65)) | (1 << (KqlParser.HIDDEN_ - 65)) | (1 << (KqlParser.HOT - 65)) | (1 << (KqlParser.HOTDATA - 65)) | (1 << (KqlParser.HOTINDEX - 65)) | (1 << (KqlParser.ID - 65)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KqlParser.IN - 130)) | (1 << (KqlParser.INTO - 130)) | (1 << (KqlParser.INVOKE - 130)) | (1 << (KqlParser.LEGEND - 130)) | (1 << (KqlParser.LET - 130)) | (1 << (KqlParser.LIMIT - 130)) | (1 << (KqlParser.LINEAR - 130)) | (1 << (KqlParser.LIST - 130)) | (1 << (KqlParser.LOOKUP - 130)) | (1 << (KqlParser.LOG - 130)) | (1 << (KqlParser.MAP - 130)) | (1 << (KqlParser.MATERIALIZE - 130)) | (1 << (KqlParser.MATERIALIZED_VIEW_COMBINE - 130)) | (1 << (KqlParser.NODES - 130)) | (1 << (KqlParser.NONE - 130)) | (1 << (KqlParser.NULL - 130)) | (1 << (KqlParser.NULLS - 130)) | (1 << (KqlParser.OF - 130)) | (1 << (KqlParser.ON - 130)) | (1 << (KqlParser.OPTIONAL - 130)) | (1 << (KqlParser.OUTPUT - 130)) | (1 << (KqlParser.PACK - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (KqlParser.PARSE - 194)) | (1 << (KqlParser.PARTITION - 194)) | (1 << (KqlParser.PARTITIONBY - 194)) | (1 << (KqlParser.PATTERN - 194)) | (1 << (KqlParser.PLUGIN - 194)) | (1 << (KqlParser.PRINT - 194)) | (1 << (KqlParser.QUERYPARAMETERS - 194)) | (1 << (KqlParser.RANGE - 194)) | (1 << (KqlParser.REDUCE - 194)) | (1 << (KqlParser.RENDER - 194)) | (1 << (KqlParser.REPLACE - 194)) | (1 << (KqlParser.RESTRICT - 194)) | (1 << (KqlParser.SAMPLE - 194)) | (1 << (KqlParser.SAMPLE_DISTINCT - 194)) | (1 << (KqlParser.SCAN - 194)) | (1 << (KqlParser.SEARCH - 194)) | (1 << (KqlParser.SERIALIZE - 194)) | (1 << (KqlParser.SERIES - 194)) | (1 << (KqlParser.SET - 194)) | (1 << (KqlParser.SORT - 194)) | (1 << (KqlParser.STACKED - 194)) | (1 << (KqlParser.STACKED100 - 194)) | (1 << (KqlParser.STEP - 194)) | (1 << (KqlParser.SUMMARIZE - 194)) | (1 << (KqlParser.TAKE - 194)) | (1 << (KqlParser.THRESHOLD - 194)) | (1 << (KqlParser.TITLE - 194)) | (1 << (KqlParser.TO - 194)) | (1 << (KqlParser.TOP - 194)) | (1 << (KqlParser.TOP_HITTERS - 194)) | (1 << (KqlParser.TOP_NESTED - 194)) | (1 << (KqlParser.TOSCALAR - 194)) | (1 << (KqlParser.TOTABLE - 194)) | (1 << (KqlParser.TYPEOF - 194)) | (1 << (KqlParser.UNSTACKED - 194)) | (1 << (KqlParser.UUID - 194)) | (1 << (KqlParser.VIEW - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (KqlParser.VISIBLE - 258)) | (1 << (KqlParser.WHERE - 258)) | (1 << (KqlParser.WITH - 258)) | (1 << (KqlParser.XAXIS - 258)) | (1 << (KqlParser.XCOLUMN - 258)) | (1 << (KqlParser.XMAX - 258)) | (1 << (KqlParser.XMIN - 258)) | (1 << (KqlParser.XTITLE - 258)) | (1 << (KqlParser.YAXIS - 258)) | (1 << (KqlParser.YCOLUMNS - 258)) | (1 << (KqlParser.YMAX - 258)) | (1 << (KqlParser.YMIN - 258)) | (1 << (KqlParser.YSPLIT - 258)) | (1 << (KqlParser.YTITLE - 258)) | (1 << (KqlParser.BOOL - 258)) | (1 << (KqlParser.DYNAMIC - 258)) | (1 << (KqlParser.GUID - 258)) | (1 << (KqlParser.LONGLITERAL - 258)) | (1 << (KqlParser.INTLITERAL - 258)) | (1 << (KqlParser.REALLITERAL - 258)) | (1 << (KqlParser.DECIMALLITERAL - 258)) | (1 << (KqlParser.STRINGLITERAL - 258)) | (1 << (KqlParser.BOOLEANLITERAL - 258)) | (1 << (KqlParser.DATETIMELITERAL - 258)) | (1 << (KqlParser.TIMESPANLITERAL - 258)) | (1 << (KqlParser.TYPELITERAL - 258)) | (1 << (KqlParser.GUIDLITERAL - 258)) | (1 << (KqlParser.IDENTIFIER - 258)))) != 0):
                self.state = 1697
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KqlParser.COMMA:
                    self.state = 1698
                    self.match(KqlParser.COMMA)
                    self.state = 1699
                    localctx._namedExpression = self.namedExpression()
                    localctx.Expressions.append(localctx._namedExpression)
                    self.state = 1704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectRenameOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def PROJECTRENAME(self):
            return self.getToken(KqlParser.PROJECTRENAME, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_projectRenameOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectRenameOperator" ):
                listener.enterProjectRenameOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectRenameOperator" ):
                listener.exitProjectRenameOperator(self)




    def projectRenameOperator(self):

        localctx = KqlParser.ProjectRenameOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_projectRenameOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1707
            self.match(KqlParser.PROJECTRENAME)
            self.state = 1716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.ASTERISK) | (1 << KqlParser.DASH) | (1 << KqlParser.OPENBRACKET) | (1 << KqlParser.OPENPAREN) | (1 << KqlParser.PLUS) | (1 << KqlParser.ACCESS) | (1 << KqlParser.ACCUMULATE) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AS) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.BY) | (1 << KqlParser.CLUSTER) | (1 << KqlParser.CONSUME) | (1 << KqlParser.CONTAINS))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (KqlParser.CONTEXTUAL_DATATABLE - 65)) | (1 << (KqlParser.COUNT - 65)) | (1 << (KqlParser.DATABASE - 65)) | (1 << (KqlParser.DATATABLE - 65)) | (1 << (KqlParser.DECLARE - 65)) | (1 << (KqlParser.DEFAULT - 65)) | (1 << (KqlParser.DELTA - 65)) | (1 << (KqlParser.DISTINCT - 65)) | (1 << (KqlParser.EDGES - 65)) | (1 << (KqlParser.EVALUATE - 65)) | (1 << (KqlParser.EXECUTE - 65)) | (1 << (KqlParser.EXTEND - 65)) | (1 << (KqlParser.EXTERNALDATA - 65)) | (1 << (KqlParser.EXTERNAL_DATA - 65)) | (1 << (KqlParser.FACET - 65)) | (1 << (KqlParser.FILTER - 65)) | (1 << (KqlParser.FIND - 65)) | (1 << (KqlParser.FORK - 65)) | (1 << (KqlParser.FROM - 65)) | (1 << (KqlParser.HAS - 65)) | (1 << (KqlParser.HIDDEN_ - 65)) | (1 << (KqlParser.HOT - 65)) | (1 << (KqlParser.HOTDATA - 65)) | (1 << (KqlParser.HOTINDEX - 65)) | (1 << (KqlParser.ID - 65)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KqlParser.IN - 130)) | (1 << (KqlParser.INTO - 130)) | (1 << (KqlParser.INVOKE - 130)) | (1 << (KqlParser.LEGEND - 130)) | (1 << (KqlParser.LET - 130)) | (1 << (KqlParser.LIMIT - 130)) | (1 << (KqlParser.LINEAR - 130)) | (1 << (KqlParser.LIST - 130)) | (1 << (KqlParser.LOOKUP - 130)) | (1 << (KqlParser.LOG - 130)) | (1 << (KqlParser.MAP - 130)) | (1 << (KqlParser.MATERIALIZE - 130)) | (1 << (KqlParser.MATERIALIZED_VIEW_COMBINE - 130)) | (1 << (KqlParser.NODES - 130)) | (1 << (KqlParser.NONE - 130)) | (1 << (KqlParser.NULL - 130)) | (1 << (KqlParser.NULLS - 130)) | (1 << (KqlParser.OF - 130)) | (1 << (KqlParser.ON - 130)) | (1 << (KqlParser.OPTIONAL - 130)) | (1 << (KqlParser.OUTPUT - 130)) | (1 << (KqlParser.PACK - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (KqlParser.PARSE - 194)) | (1 << (KqlParser.PARTITION - 194)) | (1 << (KqlParser.PARTITIONBY - 194)) | (1 << (KqlParser.PATTERN - 194)) | (1 << (KqlParser.PLUGIN - 194)) | (1 << (KqlParser.PRINT - 194)) | (1 << (KqlParser.QUERYPARAMETERS - 194)) | (1 << (KqlParser.RANGE - 194)) | (1 << (KqlParser.REDUCE - 194)) | (1 << (KqlParser.RENDER - 194)) | (1 << (KqlParser.REPLACE - 194)) | (1 << (KqlParser.RESTRICT - 194)) | (1 << (KqlParser.SAMPLE - 194)) | (1 << (KqlParser.SAMPLE_DISTINCT - 194)) | (1 << (KqlParser.SCAN - 194)) | (1 << (KqlParser.SEARCH - 194)) | (1 << (KqlParser.SERIALIZE - 194)) | (1 << (KqlParser.SERIES - 194)) | (1 << (KqlParser.SET - 194)) | (1 << (KqlParser.SORT - 194)) | (1 << (KqlParser.STACKED - 194)) | (1 << (KqlParser.STACKED100 - 194)) | (1 << (KqlParser.STEP - 194)) | (1 << (KqlParser.SUMMARIZE - 194)) | (1 << (KqlParser.TAKE - 194)) | (1 << (KqlParser.THRESHOLD - 194)) | (1 << (KqlParser.TITLE - 194)) | (1 << (KqlParser.TO - 194)) | (1 << (KqlParser.TOP - 194)) | (1 << (KqlParser.TOP_HITTERS - 194)) | (1 << (KqlParser.TOP_NESTED - 194)) | (1 << (KqlParser.TOSCALAR - 194)) | (1 << (KqlParser.TOTABLE - 194)) | (1 << (KqlParser.TYPEOF - 194)) | (1 << (KqlParser.UNSTACKED - 194)) | (1 << (KqlParser.UUID - 194)) | (1 << (KqlParser.VIEW - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (KqlParser.VISIBLE - 258)) | (1 << (KqlParser.WHERE - 258)) | (1 << (KqlParser.WITH - 258)) | (1 << (KqlParser.XAXIS - 258)) | (1 << (KqlParser.XCOLUMN - 258)) | (1 << (KqlParser.XMAX - 258)) | (1 << (KqlParser.XMIN - 258)) | (1 << (KqlParser.XTITLE - 258)) | (1 << (KqlParser.YAXIS - 258)) | (1 << (KqlParser.YCOLUMNS - 258)) | (1 << (KqlParser.YMAX - 258)) | (1 << (KqlParser.YMIN - 258)) | (1 << (KqlParser.YSPLIT - 258)) | (1 << (KqlParser.YTITLE - 258)) | (1 << (KqlParser.BOOL - 258)) | (1 << (KqlParser.DYNAMIC - 258)) | (1 << (KqlParser.GUID - 258)) | (1 << (KqlParser.LONGLITERAL - 258)) | (1 << (KqlParser.INTLITERAL - 258)) | (1 << (KqlParser.REALLITERAL - 258)) | (1 << (KqlParser.DECIMALLITERAL - 258)) | (1 << (KqlParser.STRINGLITERAL - 258)) | (1 << (KqlParser.BOOLEANLITERAL - 258)) | (1 << (KqlParser.DATETIMELITERAL - 258)) | (1 << (KqlParser.TIMESPANLITERAL - 258)) | (1 << (KqlParser.TYPELITERAL - 258)) | (1 << (KqlParser.GUIDLITERAL - 258)) | (1 << (KqlParser.IDENTIFIER - 258)))) != 0):
                self.state = 1708
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KqlParser.COMMA:
                    self.state = 1709
                    self.match(KqlParser.COMMA)
                    self.state = 1710
                    localctx._namedExpression = self.namedExpression()
                    localctx.Expressions.append(localctx._namedExpression)
                    self.state = 1715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectReorderOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._projectReorderExpression = None # ProjectReorderExpressionContext
            self.Expressions = list() # of ProjectReorderExpressionContexts

        def PROJECTREORDER(self):
            return self.getToken(KqlParser.PROJECTREORDER, 0)

        def projectReorderExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ProjectReorderExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.ProjectReorderExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_projectReorderOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectReorderOperator" ):
                listener.enterProjectReorderOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectReorderOperator" ):
                listener.exitProjectReorderOperator(self)




    def projectReorderOperator(self):

        localctx = KqlParser.ProjectReorderOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_projectReorderOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self.match(KqlParser.PROJECTREORDER)
            self.state = 1727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.ASTERISK) | (1 << KqlParser.OPENBRACKET) | (1 << KqlParser.ACCESS) | (1 << KqlParser.ACCUMULATE) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AS) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.BY) | (1 << KqlParser.CLUSTER) | (1 << KqlParser.CONSUME) | (1 << KqlParser.CONTAINS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KqlParser.COUNT - 66)) | (1 << (KqlParser.DATABASE - 66)) | (1 << (KqlParser.DATATABLE - 66)) | (1 << (KqlParser.DECLARE - 66)) | (1 << (KqlParser.DEFAULT - 66)) | (1 << (KqlParser.DELTA - 66)) | (1 << (KqlParser.DISTINCT - 66)) | (1 << (KqlParser.EDGES - 66)) | (1 << (KqlParser.EVALUATE - 66)) | (1 << (KqlParser.EXECUTE - 66)) | (1 << (KqlParser.EXTEND - 66)) | (1 << (KqlParser.EXTERNALDATA - 66)) | (1 << (KqlParser.FACET - 66)) | (1 << (KqlParser.FILTER - 66)) | (1 << (KqlParser.FIND - 66)) | (1 << (KqlParser.FORK - 66)) | (1 << (KqlParser.FROM - 66)) | (1 << (KqlParser.HAS - 66)) | (1 << (KqlParser.HIDDEN_ - 66)) | (1 << (KqlParser.HOT - 66)) | (1 << (KqlParser.HOTDATA - 66)) | (1 << (KqlParser.HOTINDEX - 66)) | (1 << (KqlParser.ID - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KqlParser.IN - 130)) | (1 << (KqlParser.INTO - 130)) | (1 << (KqlParser.INVOKE - 130)) | (1 << (KqlParser.LEGEND - 130)) | (1 << (KqlParser.LET - 130)) | (1 << (KqlParser.LIMIT - 130)) | (1 << (KqlParser.LINEAR - 130)) | (1 << (KqlParser.LIST - 130)) | (1 << (KqlParser.LOOKUP - 130)) | (1 << (KqlParser.LOG - 130)) | (1 << (KqlParser.MAP - 130)) | (1 << (KqlParser.MATERIALIZE - 130)) | (1 << (KqlParser.NODES - 130)) | (1 << (KqlParser.NONE - 130)) | (1 << (KqlParser.NULL - 130)) | (1 << (KqlParser.NULLS - 130)) | (1 << (KqlParser.OF - 130)) | (1 << (KqlParser.ON - 130)) | (1 << (KqlParser.OPTIONAL - 130)) | (1 << (KqlParser.OUTPUT - 130)) | (1 << (KqlParser.PACK - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (KqlParser.PARSE - 194)) | (1 << (KqlParser.PARTITION - 194)) | (1 << (KqlParser.PARTITIONBY - 194)) | (1 << (KqlParser.PATTERN - 194)) | (1 << (KqlParser.PLUGIN - 194)) | (1 << (KqlParser.PRINT - 194)) | (1 << (KqlParser.QUERYPARAMETERS - 194)) | (1 << (KqlParser.RANGE - 194)) | (1 << (KqlParser.REDUCE - 194)) | (1 << (KqlParser.RENDER - 194)) | (1 << (KqlParser.REPLACE - 194)) | (1 << (KqlParser.RESTRICT - 194)) | (1 << (KqlParser.SAMPLE - 194)) | (1 << (KqlParser.SAMPLE_DISTINCT - 194)) | (1 << (KqlParser.SCAN - 194)) | (1 << (KqlParser.SEARCH - 194)) | (1 << (KqlParser.SERIALIZE - 194)) | (1 << (KqlParser.SERIES - 194)) | (1 << (KqlParser.SET - 194)) | (1 << (KqlParser.SORT - 194)) | (1 << (KqlParser.STACKED - 194)) | (1 << (KqlParser.STACKED100 - 194)) | (1 << (KqlParser.STEP - 194)) | (1 << (KqlParser.SUMMARIZE - 194)) | (1 << (KqlParser.TAKE - 194)) | (1 << (KqlParser.THRESHOLD - 194)) | (1 << (KqlParser.TITLE - 194)) | (1 << (KqlParser.TO - 194)) | (1 << (KqlParser.TOP - 194)) | (1 << (KqlParser.TOP_HITTERS - 194)) | (1 << (KqlParser.TOP_NESTED - 194)) | (1 << (KqlParser.TOSCALAR - 194)) | (1 << (KqlParser.TOTABLE - 194)) | (1 << (KqlParser.TYPEOF - 194)) | (1 << (KqlParser.UNSTACKED - 194)) | (1 << (KqlParser.UUID - 194)) | (1 << (KqlParser.VIEW - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (KqlParser.VISIBLE - 258)) | (1 << (KqlParser.WHERE - 258)) | (1 << (KqlParser.WITH - 258)) | (1 << (KqlParser.XAXIS - 258)) | (1 << (KqlParser.XCOLUMN - 258)) | (1 << (KqlParser.XMAX - 258)) | (1 << (KqlParser.XMIN - 258)) | (1 << (KqlParser.XTITLE - 258)) | (1 << (KqlParser.YAXIS - 258)) | (1 << (KqlParser.YCOLUMNS - 258)) | (1 << (KqlParser.YMAX - 258)) | (1 << (KqlParser.YMIN - 258)) | (1 << (KqlParser.YSPLIT - 258)) | (1 << (KqlParser.YTITLE - 258)) | (1 << (KqlParser.BOOL - 258)) | (1 << (KqlParser.GUID - 258)) | (1 << (KqlParser.IDENTIFIER - 258)))) != 0):
                self.state = 1719
                localctx._projectReorderExpression = self.projectReorderExpression()
                localctx.Expressions.append(localctx._projectReorderExpression)
                self.state = 1724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KqlParser.COMMA:
                    self.state = 1720
                    self.match(KqlParser.COMMA)
                    self.state = 1721
                    localctx._projectReorderExpression = self.projectReorderExpression()
                    localctx.Expressions.append(localctx._projectReorderExpression)
                    self.state = 1726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectReorderExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # SimpleOrWildcardedNameReferenceContext
            self.Order = None # Token

        def simpleOrWildcardedNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleOrWildcardedNameReferenceContext,0)


        def ASC(self):
            return self.getToken(KqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(KqlParser.DESC, 0)

        def GRANNYASC(self):
            return self.getToken(KqlParser.GRANNYASC, 0)

        def GRANNYDESC(self):
            return self.getToken(KqlParser.GRANNYDESC, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_projectReorderExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectReorderExpression" ):
                listener.enterProjectReorderExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectReorderExpression" ):
                listener.exitProjectReorderExpression(self)




    def projectReorderExpression(self):

        localctx = KqlParser.ProjectReorderExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_projectReorderExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            localctx.Expression = self.simpleOrWildcardedNameReference()
            self.state = 1731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (KqlParser.ASC - 48)) | (1 << (KqlParser.DESC - 48)) | (1 << (KqlParser.GRANNYASC - 48)) | (1 << (KqlParser.GRANNYDESC - 48)))) != 0):
                self.state = 1730
                localctx.Order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (KqlParser.ASC - 48)) | (1 << (KqlParser.DESC - 48)) | (1 << (KqlParser.GRANNYASC - 48)) | (1 << (KqlParser.GRANNYDESC - 48)))) != 0)):
                    localctx.Order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReduceByOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.ByExpression = None # NamedExpressionContext
            self.WithClause = None # ReduceByWithClauseContext

        def REDUCE(self):
            return self.getToken(KqlParser.REDUCE, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def reduceByWithClause(self):
            return self.getTypedRuleContext(KqlParser.ReduceByWithClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_reduceByOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReduceByOperator" ):
                listener.enterReduceByOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReduceByOperator" ):
                listener.exitReduceByOperator(self)




    def reduceByOperator(self):

        localctx = KqlParser.ReduceByOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_reduceByOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            self.match(KqlParser.REDUCE)
            self.state = 1737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or _la==KqlParser.WITH_SOURCE or _la==KqlParser.WITH_STEP_NAME:
                self.state = 1734
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1739
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1740
            self.match(KqlParser.BY)
            self.state = 1741
            localctx.ByExpression = self.namedExpression()
            self.state = 1743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.WITH:
                self.state = 1742
                localctx.WithClause = self.reduceByWithClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReduceByWithClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_reduceByWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReduceByWithClause" ):
                listener.enterReduceByWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReduceByWithClause" ):
                listener.exitReduceByWithClause(self)




    def reduceByWithClause(self):

        localctx = KqlParser.ReduceByWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_reduceByWithClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.match(KqlParser.WITH)
            self.state = 1746
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 1751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1747
                self.match(KqlParser.COMMA)
                self.state = 1748
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 1753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.CharType = None # Token
            self.WithClause = None # RenderOperatorWithClauseContext
            self.LegacyPropertyList = None # RenderOperatorLegacyPropertyListContext

        def RENDER(self):
            return self.getToken(KqlParser.RENDER, 0)

        def TABLE(self):
            return self.getToken(KqlParser.TABLE, 0)

        def LIST(self):
            return self.getToken(KqlParser.LIST, 0)

        def BARCHART(self):
            return self.getToken(KqlParser.BARCHART, 0)

        def PIECHART(self):
            return self.getToken(KqlParser.PIECHART, 0)

        def LADDERCHART(self):
            return self.getToken(KqlParser.LADDERCHART, 0)

        def TIMECHART(self):
            return self.getToken(KqlParser.TIMECHART, 0)

        def LINECHART(self):
            return self.getToken(KqlParser.LINECHART, 0)

        def ANOMALYCHART(self):
            return self.getToken(KqlParser.ANOMALYCHART, 0)

        def PIVOTCHART(self):
            return self.getToken(KqlParser.PIVOTCHART, 0)

        def AREACHART(self):
            return self.getToken(KqlParser.AREACHART, 0)

        def STACKEDAREACHART(self):
            return self.getToken(KqlParser.STACKEDAREACHART, 0)

        def SCATTERCHART(self):
            return self.getToken(KqlParser.SCATTERCHART, 0)

        def TIMEPIVOT(self):
            return self.getToken(KqlParser.TIMEPIVOT, 0)

        def COLUMNCHART(self):
            return self.getToken(KqlParser.COLUMNCHART, 0)

        def TIMELINE(self):
            return self.getToken(KqlParser.TIMELINE, 0)

        def CHART3D_(self):
            return self.getToken(KqlParser.CHART3D_, 0)

        def CARD(self):
            return self.getToken(KqlParser.CARD, 0)

        def TREEMAP(self):
            return self.getToken(KqlParser.TREEMAP, 0)

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def renderOperatorWithClause(self):
            return self.getTypedRuleContext(KqlParser.RenderOperatorWithClauseContext,0)


        def renderOperatorLegacyPropertyList(self):
            return self.getTypedRuleContext(KqlParser.RenderOperatorLegacyPropertyListContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_renderOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperator" ):
                listener.enterRenderOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperator" ):
                listener.exitRenderOperator(self)




    def renderOperator(self):

        localctx = KqlParser.RenderOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_renderOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.match(KqlParser.RENDER)
            self.state = 1755
            localctx.CharType = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.CHART3D_) | (1 << KqlParser.ANOMALYCHART) | (1 << KqlParser.AREACHART) | (1 << KqlParser.BARCHART) | (1 << KqlParser.CARD) | (1 << KqlParser.COLUMNCHART))) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (KqlParser.LADDERCHART - 138)) | (1 << (KqlParser.LINECHART - 138)) | (1 << (KqlParser.LIST - 138)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (KqlParser.PIECHART - 202)) | (1 << (KqlParser.PIVOTCHART - 202)) | (1 << (KqlParser.SCATTERCHART - 202)) | (1 << (KqlParser.STACKEDAREACHART - 202)) | (1 << (KqlParser.TABLE - 202)) | (1 << (KqlParser.TIMECHART - 202)) | (1 << (KqlParser.TIMELINE - 202)) | (1 << (KqlParser.TIMEPIVOT - 202)) | (1 << (KqlParser.TREEMAP - 202)))) != 0) or _la==KqlParser.IDENTIFIER):
                localctx.CharType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1756
                localctx.WithClause = self.renderOperatorWithClause()

            elif la_ == 2:
                self.state = 1757
                localctx.LegacyPropertyList = self.renderOperatorLegacyPropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorWithClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._renderOperatorProperty = None # RenderOperatorPropertyContext
            self.Properties = list() # of RenderOperatorPropertyContexts

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def renderOperatorProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RenderOperatorPropertyContext)
            else:
                return self.getTypedRuleContext(KqlParser.RenderOperatorPropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_renderOperatorWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperatorWithClause" ):
                listener.enterRenderOperatorWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperatorWithClause" ):
                listener.exitRenderOperatorWithClause(self)




    def renderOperatorWithClause(self):

        localctx = KqlParser.RenderOperatorWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_renderOperatorWithClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.match(KqlParser.WITH)
            self.state = 1761
            self.match(KqlParser.OPENPAREN)
            self.state = 1770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.ACCUMULATE or _la==KqlParser.ANOMALYCOLUMNS or _la==KqlParser.KIND or _la==KqlParser.LEGEND or ((((_la - 227)) & ~0x3f) == 0 and ((1 << (_la - 227)) & ((1 << (KqlParser.SERIES - 227)) | (1 << (KqlParser.TITLE - 227)) | (1 << (KqlParser.XAXIS - 227)) | (1 << (KqlParser.XCOLUMN - 227)) | (1 << (KqlParser.XMAX - 227)) | (1 << (KqlParser.XMIN - 227)) | (1 << (KqlParser.XTITLE - 227)) | (1 << (KqlParser.YAXIS - 227)) | (1 << (KqlParser.YCOLUMNS - 227)) | (1 << (KqlParser.YMAX - 227)) | (1 << (KqlParser.YMIN - 227)) | (1 << (KqlParser.YSPLIT - 227)) | (1 << (KqlParser.YTITLE - 227)))) != 0):
                self.state = 1762
                localctx._renderOperatorProperty = self.renderOperatorProperty()
                localctx.Properties.append(localctx._renderOperatorProperty)
                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KqlParser.COMMA:
                    self.state = 1763
                    self.match(KqlParser.COMMA)
                    self.state = 1764
                    localctx._renderOperatorProperty = self.renderOperatorProperty()
                    localctx.Properties.append(localctx._renderOperatorProperty)
                    self.state = 1769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1772
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorLegacyPropertyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._renderOperatorLegacyProperty = None # RenderOperatorLegacyPropertyContext
            self.Properties = list() # of RenderOperatorLegacyPropertyContexts

        def renderOperatorLegacyProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RenderOperatorLegacyPropertyContext)
            else:
                return self.getTypedRuleContext(KqlParser.RenderOperatorLegacyPropertyContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_renderOperatorLegacyPropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperatorLegacyPropertyList" ):
                listener.enterRenderOperatorLegacyPropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperatorLegacyPropertyList" ):
                listener.exitRenderOperatorLegacyPropertyList(self)




    def renderOperatorLegacyPropertyList(self):

        localctx = KqlParser.RenderOperatorLegacyPropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_renderOperatorLegacyPropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1774
                localctx._renderOperatorLegacyProperty = self.renderOperatorLegacyProperty()
                localctx.Properties.append(localctx._renderOperatorLegacyProperty)
                self.state = 1777 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==KqlParser.ACCUMULATE or _la==KqlParser.BY or _la==KqlParser.KIND or _la==KqlParser.TITLE or _la==KqlParser.WITH):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorPropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # Token
            self.ExpressionValue = None # FunctionCallOrPathExpressionContext
            self.NameValue = None # SimpleNameReferenceContext
            self.NameListValue = None # RenderPropertyNameListContext
            self.TokenValue = None # Token
            self.BoolValue = None # Token
            self.NumberValue = None # NumericLiteralExpressionContext
            self.LiteralValue = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def TITLE(self):
            return self.getToken(KqlParser.TITLE, 0)

        def functionCallOrPathExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallOrPathExpressionContext,0)


        def XCOLUMN(self):
            return self.getToken(KqlParser.XCOLUMN, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def SERIES(self):
            return self.getToken(KqlParser.SERIES, 0)

        def renderPropertyNameList(self):
            return self.getTypedRuleContext(KqlParser.RenderPropertyNameListContext,0)


        def YCOLUMNS(self):
            return self.getToken(KqlParser.YCOLUMNS, 0)

        def ANOMALYCOLUMNS(self):
            return self.getToken(KqlParser.ANOMALYCOLUMNS, 0)

        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def DEFAULT(self):
            return self.getToken(KqlParser.DEFAULT, 0)

        def UNSTACKED(self):
            return self.getToken(KqlParser.UNSTACKED, 0)

        def STACKED(self):
            return self.getToken(KqlParser.STACKED, 0)

        def STACKED100(self):
            return self.getToken(KqlParser.STACKED100, 0)

        def MAP(self):
            return self.getToken(KqlParser.MAP, 0)

        def XTITLE(self):
            return self.getToken(KqlParser.XTITLE, 0)

        def YTITLE(self):
            return self.getToken(KqlParser.YTITLE, 0)

        def XAXIS(self):
            return self.getToken(KqlParser.XAXIS, 0)

        def LINEAR(self):
            return self.getToken(KqlParser.LINEAR, 0)

        def LOG(self):
            return self.getToken(KqlParser.LOG, 0)

        def YAXIS(self):
            return self.getToken(KqlParser.YAXIS, 0)

        def LEGEND(self):
            return self.getToken(KqlParser.LEGEND, 0)

        def VISIBLE(self):
            return self.getToken(KqlParser.VISIBLE, 0)

        def HIDDEN_(self):
            return self.getToken(KqlParser.HIDDEN_, 0)

        def YSPLIT(self):
            return self.getToken(KqlParser.YSPLIT, 0)

        def NONE(self):
            return self.getToken(KqlParser.NONE, 0)

        def AXES(self):
            return self.getToken(KqlParser.AXES, 0)

        def PANELS(self):
            return self.getToken(KqlParser.PANELS, 0)

        def ACCUMULATE(self):
            return self.getToken(KqlParser.ACCUMULATE, 0)

        def BOOLEANLITERAL(self):
            return self.getToken(KqlParser.BOOLEANLITERAL, 0)

        def YMIN(self):
            return self.getToken(KqlParser.YMIN, 0)

        def numericLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.NumericLiteralExpressionContext,0)


        def YMAX(self):
            return self.getToken(KqlParser.YMAX, 0)

        def XMIN(self):
            return self.getToken(KqlParser.XMIN, 0)

        def literalExpression(self):
            return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,0)


        def XMAX(self):
            return self.getToken(KqlParser.XMAX, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_renderOperatorProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperatorProperty" ):
                listener.enterRenderOperatorProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperatorProperty" ):
                listener.exitRenderOperatorProperty(self)




    def renderOperatorProperty(self):

        localctx = KqlParser.RenderOperatorPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_renderOperatorProperty)
        self._la = 0 # Token type
        try:
            self.state = 1830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.TITLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1779
                localctx.Name = self.match(KqlParser.TITLE)
                self.state = 1780
                self.match(KqlParser.EQUAL)
                self.state = 1781
                localctx.ExpressionValue = self.functionCallOrPathExpression()
                pass
            elif token in [KqlParser.XCOLUMN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1782
                localctx.Name = self.match(KqlParser.XCOLUMN)
                self.state = 1783
                self.match(KqlParser.EQUAL)
                self.state = 1784
                localctx.NameValue = self.simpleNameReference()
                pass
            elif token in [KqlParser.SERIES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1785
                localctx.Name = self.match(KqlParser.SERIES)
                self.state = 1786
                self.match(KqlParser.EQUAL)
                self.state = 1787
                localctx.NameListValue = self.renderPropertyNameList()
                pass
            elif token in [KqlParser.YCOLUMNS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1788
                localctx.Name = self.match(KqlParser.YCOLUMNS)
                self.state = 1789
                self.match(KqlParser.EQUAL)
                self.state = 1790
                localctx.NameListValue = self.renderPropertyNameList()
                pass
            elif token in [KqlParser.ANOMALYCOLUMNS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1791
                localctx.Name = self.match(KqlParser.ANOMALYCOLUMNS)
                self.state = 1792
                self.match(KqlParser.EQUAL)
                self.state = 1793
                localctx.NameListValue = self.renderPropertyNameList()
                pass
            elif token in [KqlParser.KIND]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1794
                localctx.Name = self.match(KqlParser.KIND)
                self.state = 1795
                self.match(KqlParser.EQUAL)
                self.state = 1796
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==KqlParser.DEFAULT or _la==KqlParser.MAP or ((((_la - 232)) & ~0x3f) == 0 and ((1 << (_la - 232)) & ((1 << (KqlParser.STACKED - 232)) | (1 << (KqlParser.STACKED100 - 232)) | (1 << (KqlParser.UNSTACKED - 232)))) != 0)):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [KqlParser.XTITLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1797
                localctx.Name = self.match(KqlParser.XTITLE)
                self.state = 1798
                self.match(KqlParser.EQUAL)
                self.state = 1799
                localctx.ExpressionValue = self.functionCallOrPathExpression()
                pass
            elif token in [KqlParser.YTITLE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1800
                localctx.Name = self.match(KqlParser.YTITLE)
                self.state = 1801
                self.match(KqlParser.EQUAL)
                self.state = 1802
                localctx.ExpressionValue = self.functionCallOrPathExpression()
                pass
            elif token in [KqlParser.XAXIS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1803
                localctx.Name = self.match(KqlParser.XAXIS)
                self.state = 1804
                self.match(KqlParser.EQUAL)
                self.state = 1805
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==KqlParser.LINEAR or _la==KqlParser.LOG):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [KqlParser.YAXIS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1806
                localctx.Name = self.match(KqlParser.YAXIS)
                self.state = 1807
                self.match(KqlParser.EQUAL)
                self.state = 1808
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==KqlParser.LINEAR or _la==KqlParser.LOG):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [KqlParser.LEGEND]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1809
                localctx.Name = self.match(KqlParser.LEGEND)
                self.state = 1810
                self.match(KqlParser.EQUAL)
                self.state = 1811
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==KqlParser.HIDDEN_ or _la==KqlParser.VISIBLE):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [KqlParser.YSPLIT]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1812
                localctx.Name = self.match(KqlParser.YSPLIT)
                self.state = 1813
                self.match(KqlParser.EQUAL)
                self.state = 1814
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==KqlParser.AXES or _la==KqlParser.NONE or _la==KqlParser.PANELS):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [KqlParser.ACCUMULATE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1815
                localctx.Name = self.match(KqlParser.ACCUMULATE)
                self.state = 1816
                self.match(KqlParser.EQUAL)
                self.state = 1817
                localctx.BoolValue = self.match(KqlParser.BOOLEANLITERAL)
                pass
            elif token in [KqlParser.YMIN]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1818
                localctx.Name = self.match(KqlParser.YMIN)
                self.state = 1819
                self.match(KqlParser.EQUAL)
                self.state = 1820
                localctx.NumberValue = self.numericLiteralExpression()
                pass
            elif token in [KqlParser.YMAX]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1821
                localctx.Name = self.match(KqlParser.YMAX)
                self.state = 1822
                self.match(KqlParser.EQUAL)
                self.state = 1823
                localctx.NumberValue = self.numericLiteralExpression()
                pass
            elif token in [KqlParser.XMIN]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1824
                localctx.Name = self.match(KqlParser.XMIN)
                self.state = 1825
                self.match(KqlParser.EQUAL)
                self.state = 1826
                localctx.LiteralValue = self.literalExpression()
                pass
            elif token in [KqlParser.XMAX]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1827
                localctx.Name = self.match(KqlParser.XMAX)
                self.state = 1828
                self.match(KqlParser.EQUAL)
                self.state = 1829
                localctx.LiteralValue = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderPropertyNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._extendedNameReference = None # ExtendedNameReferenceContext
            self.Names = list() # of ExtendedNameReferenceContexts

        def extendedNameReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ExtendedNameReferenceContext)
            else:
                return self.getTypedRuleContext(KqlParser.ExtendedNameReferenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_renderPropertyNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderPropertyNameList" ):
                listener.enterRenderPropertyNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderPropertyNameList" ):
                listener.exitRenderPropertyNameList(self)




    def renderPropertyNameList(self):

        localctx = KqlParser.RenderPropertyNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_renderPropertyNameList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            localctx._extendedNameReference = self.extendedNameReference()
            localctx.Names.append(localctx._extendedNameReference)
            self.state = 1837
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1833
                    self.match(KqlParser.COMMA)
                    self.state = 1834
                    localctx._extendedNameReference = self.extendedNameReference()
                    localctx.Names.append(localctx._extendedNameReference) 
                self.state = 1839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenderOperatorLegacyPropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # Token
            self.StringValue = None # StringLiteralExpressionContext
            self.TokenValue = None # Token
            self.NameListValue = None # RenderPropertyNameListContext
            self.BoolValue = None # Token

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def TITLE(self):
            return self.getToken(KqlParser.TITLE, 0)

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def DEFAULT(self):
            return self.getToken(KqlParser.DEFAULT, 0)

        def UNSTACKED(self):
            return self.getToken(KqlParser.UNSTACKED, 0)

        def STACKED(self):
            return self.getToken(KqlParser.STACKED, 0)

        def STACKED100(self):
            return self.getToken(KqlParser.STACKED100, 0)

        def MAP(self):
            return self.getToken(KqlParser.MAP, 0)

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def renderPropertyNameList(self):
            return self.getTypedRuleContext(KqlParser.RenderPropertyNameListContext,0)


        def ACCUMULATE(self):
            return self.getToken(KqlParser.ACCUMULATE, 0)

        def BOOLEANLITERAL(self):
            return self.getToken(KqlParser.BOOLEANLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_renderOperatorLegacyProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenderOperatorLegacyProperty" ):
                listener.enterRenderOperatorLegacyProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenderOperatorLegacyProperty" ):
                listener.exitRenderOperatorLegacyProperty(self)




    def renderOperatorLegacyProperty(self):

        localctx = KqlParser.RenderOperatorLegacyPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_renderOperatorLegacyProperty)
        self._la = 0 # Token type
        try:
            self.state = 1853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.TITLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1840
                localctx.Name = self.match(KqlParser.TITLE)
                self.state = 1841
                self.match(KqlParser.EQUAL)
                self.state = 1842
                localctx.StringValue = self.stringLiteralExpression()
                pass
            elif token in [KqlParser.KIND]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1843
                localctx.Name = self.match(KqlParser.KIND)
                self.state = 1844
                self.match(KqlParser.EQUAL)
                self.state = 1845
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==KqlParser.DEFAULT or _la==KqlParser.MAP or ((((_la - 232)) & ~0x3f) == 0 and ((1 << (_la - 232)) & ((1 << (KqlParser.STACKED - 232)) | (1 << (KqlParser.STACKED100 - 232)) | (1 << (KqlParser.UNSTACKED - 232)))) != 0)):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [KqlParser.WITH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1846
                localctx.Name = self.match(KqlParser.WITH)
                self.state = 1847
                localctx.StringValue = self.stringLiteralExpression()
                pass
            elif token in [KqlParser.BY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1848
                localctx.Name = self.match(KqlParser.BY)
                self.state = 1849
                localctx.NameListValue = self.renderPropertyNameList()
                pass
            elif token in [KqlParser.ACCUMULATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1850
                localctx.Name = self.match(KqlParser.ACCUMULATE)
                self.state = 1851
                self.match(KqlParser.EQUAL)
                self.state = 1852
                localctx.BoolValue = self.match(KqlParser.BOOLEANLITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleDistinctOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Expression = None # NamedExpressionContext
            self.OfExpression = None # NamedExpressionContext

        def SAMPLE_DISTINCT(self):
            return self.getToken(KqlParser.SAMPLE_DISTINCT, 0)

        def OF(self):
            return self.getToken(KqlParser.OF, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_sampleDistinctOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleDistinctOperator" ):
                listener.enterSampleDistinctOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleDistinctOperator" ):
                listener.exitSampleDistinctOperator(self)




    def sampleDistinctOperator(self):

        localctx = KqlParser.SampleDistinctOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_sampleDistinctOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            self.match(KqlParser.SAMPLE_DISTINCT)
            self.state = 1859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or _la==KqlParser.WITH_SOURCE or _la==KqlParser.WITH_STEP_NAME:
                self.state = 1856
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1862
            localctx.Expression = self.namedExpression()
            self.state = 1863
            self.match(KqlParser.OF)
            self.state = 1864
            localctx.OfExpression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Expression = None # NamedExpressionContext

        def SAMPLE(self):
            return self.getToken(KqlParser.SAMPLE, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_sampleOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleOperator" ):
                listener.enterSampleOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleOperator" ):
                listener.exitSampleOperator(self)




    def sampleOperator(self):

        localctx = KqlParser.SampleOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_sampleOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1866
            self.match(KqlParser.SAMPLE)
            self.state = 1870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or _la==KqlParser.WITH_SOURCE or _la==KqlParser.WITH_STEP_NAME:
                self.state = 1867
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1873
            localctx.Expression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.OrderByClause = None # ScanOperatorOrderByClauseContext
            self.PartitionByClause = None # ScanOperatorPartitionByClauseContext
            self.DeclareClause = None # ScanOperatorDeclareClauseContext
            self._scanOperatorStep = None # ScanOperatorStepContext
            self.Steps = list() # of ScanOperatorStepContexts

        def SCAN(self):
            return self.getToken(KqlParser.SCAN, 0)

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def scanOperatorOrderByClause(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorOrderByClauseContext,0)


        def scanOperatorPartitionByClause(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorPartitionByClauseContext,0)


        def scanOperatorDeclareClause(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorDeclareClauseContext,0)


        def scanOperatorStep(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ScanOperatorStepContext)
            else:
                return self.getTypedRuleContext(KqlParser.ScanOperatorStepContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_scanOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperator" ):
                listener.enterScanOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperator" ):
                listener.exitScanOperator(self)




    def scanOperator(self):

        localctx = KqlParser.ScanOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_scanOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            self.match(KqlParser.SCAN)
            self.state = 1879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0):
                self.state = 1876
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 1881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.ORDER:
                self.state = 1882
                localctx.OrderByClause = self.scanOperatorOrderByClause()


            self.state = 1886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.PARTITION:
                self.state = 1885
                localctx.PartitionByClause = self.scanOperatorPartitionByClause()


            self.state = 1889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.DECLARE:
                self.state = 1888
                localctx.DeclareClause = self.scanOperatorDeclareClause()


            self.state = 1891
            self.match(KqlParser.WITH)
            self.state = 1892
            self.match(KqlParser.OPENPAREN)
            self.state = 1894 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1893
                localctx._scanOperatorStep = self.scanOperatorStep()
                localctx.Steps.append(localctx._scanOperatorStep)
                self.state = 1896 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==KqlParser.STEP):
                    break

            self.state = 1898
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorOrderByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._orderedExpression = None # OrderedExpressionContext
            self.Expressions = list() # of OrderedExpressionContexts

        def ORDER(self):
            return self.getToken(KqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def orderedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.OrderedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.OrderedExpressionContext,i)


        def COMMA(self):
            return self.getToken(KqlParser.COMMA, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorOrderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorOrderByClause" ):
                listener.enterScanOperatorOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorOrderByClause" ):
                listener.exitScanOperatorOrderByClause(self)




    def scanOperatorOrderByClause(self):

        localctx = KqlParser.ScanOperatorOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_scanOperatorOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self.match(KqlParser.ORDER)
            self.state = 1901
            self.match(KqlParser.BY)
            self.state = 1902
            localctx._orderedExpression = self.orderedExpression()
            localctx.Expressions.append(localctx._orderedExpression)

            self.state = 1903
            self.match(KqlParser.COMMA)
            self.state = 1904
            localctx._orderedExpression = self.orderedExpression()
            localctx.Expressions.append(localctx._orderedExpression)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorPartitionByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unnamedExpression = None # UnnamedExpressionContext
            self.Expressions = list() # of UnnamedExpressionContexts

        def PARTITION(self):
            return self.getToken(KqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorPartitionByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorPartitionByClause" ):
                listener.enterScanOperatorPartitionByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorPartitionByClause" ):
                listener.exitScanOperatorPartitionByClause(self)




    def scanOperatorPartitionByClause(self):

        localctx = KqlParser.ScanOperatorPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_scanOperatorPartitionByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1906
            self.match(KqlParser.PARTITION)
            self.state = 1907
            self.match(KqlParser.BY)
            self.state = 1908
            localctx._unnamedExpression = self.unnamedExpression()
            localctx.Expressions.append(localctx._unnamedExpression)
            self.state = 1913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1909
                self.match(KqlParser.COMMA)
                self.state = 1910
                localctx._unnamedExpression = self.unnamedExpression()
                localctx.Expressions.append(localctx._unnamedExpression)
                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorDeclareClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._scalarParameter = None # ScalarParameterContext
            self.Parameters = list() # of ScalarParameterContexts

        def DECLARE(self):
            return self.getToken(KqlParser.DECLARE, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def scalarParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ScalarParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.ScalarParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorDeclareClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorDeclareClause" ):
                listener.enterScanOperatorDeclareClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorDeclareClause" ):
                listener.exitScanOperatorDeclareClause(self)




    def scanOperatorDeclareClause(self):

        localctx = KqlParser.ScanOperatorDeclareClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_scanOperatorDeclareClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1916
            self.match(KqlParser.DECLARE)
            self.state = 1917
            self.match(KqlParser.OPENPAREN)
            self.state = 1918
            localctx._scalarParameter = self.scalarParameter()
            localctx.Parameters.append(localctx._scalarParameter)
            self.state = 1923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1919
                self.match(KqlParser.COMMA)
                self.state = 1920
                localctx._scalarParameter = self.scalarParameter()
                localctx.Parameters.append(localctx._scalarParameter)
                self.state = 1925
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1926
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorStepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.OutputClause = None # ScanOperatorStepOutputClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.Body = None # ScanOperatorBodyContext

        def STEP(self):
            return self.getToken(KqlParser.STEP, 0)

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def SEMICOLON(self):
            return self.getToken(KqlParser.SEMICOLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def OPTIONAL(self):
            return self.getToken(KqlParser.OPTIONAL, 0)

        def scanOperatorStepOutputClause(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorStepOutputClauseContext,0)


        def scanOperatorBody(self):
            return self.getTypedRuleContext(KqlParser.ScanOperatorBodyContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorStep

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorStep" ):
                listener.enterScanOperatorStep(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorStep" ):
                listener.exitScanOperatorStep(self)




    def scanOperatorStep(self):

        localctx = KqlParser.ScanOperatorStepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_scanOperatorStep)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1928
            self.match(KqlParser.STEP)
            self.state = 1929
            localctx.Name = self.parameterName()
            self.state = 1931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.OPTIONAL:
                self.state = 1930
                self.match(KqlParser.OPTIONAL)


            self.state = 1934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.OUTPUT:
                self.state = 1933
                localctx.OutputClause = self.scanOperatorStepOutputClause()


            self.state = 1936
            self.match(KqlParser.COLON)
            self.state = 1937
            localctx.Expression = self.unnamedExpression()
            self.state = 1939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.EQUAL_GREATERTHAN:
                self.state = 1938
                localctx.Body = self.scanOperatorBody()


            self.state = 1941
            self.match(KqlParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorStepOutputClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OutputKind = None # Token

        def OUTPUT(self):
            return self.getToken(KqlParser.OUTPUT, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def ALL(self):
            return self.getToken(KqlParser.ALL, 0)

        def LAST(self):
            return self.getToken(KqlParser.LAST, 0)

        def NONE(self):
            return self.getToken(KqlParser.NONE, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorStepOutputClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorStepOutputClause" ):
                listener.enterScanOperatorStepOutputClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorStepOutputClause" ):
                listener.exitScanOperatorStepOutputClause(self)




    def scanOperatorStepOutputClause(self):

        localctx = KqlParser.ScanOperatorStepOutputClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_scanOperatorStepOutputClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self.match(KqlParser.OUTPUT)
            self.state = 1944
            self.match(KqlParser.EQUAL)
            self.state = 1945
            localctx.OutputKind = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.ALL or _la==KqlParser.LAST or _la==KqlParser.NONE):
                localctx.OutputKind = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._scanOperatorAssignment = None # ScanOperatorAssignmentContext
            self.Assignments = list() # of ScanOperatorAssignmentContexts

        def EQUAL_GREATERTHAN(self):
            return self.getToken(KqlParser.EQUAL_GREATERTHAN, 0)

        def scanOperatorAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ScanOperatorAssignmentContext)
            else:
                return self.getTypedRuleContext(KqlParser.ScanOperatorAssignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorBody" ):
                listener.enterScanOperatorBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorBody" ):
                listener.exitScanOperatorBody(self)




    def scanOperatorBody(self):

        localctx = KqlParser.ScanOperatorBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_scanOperatorBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.match(KqlParser.EQUAL_GREATERTHAN)
            self.state = 1948
            localctx._scanOperatorAssignment = self.scanOperatorAssignment()
            localctx.Assignments.append(localctx._scanOperatorAssignment)
            self.state = 1953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1949
                self.match(KqlParser.COMMA)
                self.state = 1950
                localctx._scanOperatorAssignment = self.scanOperatorAssignment()
                localctx.Assignments.append(localctx._scanOperatorAssignment)
                self.state = 1955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanOperatorAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Expression = None # UnnamedExpressionContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_scanOperatorAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanOperatorAssignment" ):
                listener.enterScanOperatorAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanOperatorAssignment" ):
                listener.exitScanOperatorAssignment(self)




    def scanOperatorAssignment(self):

        localctx = KqlParser.ScanOperatorAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_scanOperatorAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1956
            localctx.Name = self.parameterName()
            self.state = 1957
            self.match(KqlParser.EQUAL)
            self.state = 1958
            localctx.Expression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.DataScope = None # DataScopeClauseContext
            self.InClause = None # SearchOperatorInClauseContext
            self.Expression = None # UnnamedExpressionContext
            self.Star = None # StarExpressionContext
            self.StarAndExpression = None # SearchOperatorStarAndExpressionContext

        def SEARCH(self):
            return self.getToken(KqlParser.SEARCH, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def starExpression(self):
            return self.getTypedRuleContext(KqlParser.StarExpressionContext,0)


        def searchOperatorStarAndExpression(self):
            return self.getTypedRuleContext(KqlParser.SearchOperatorStarAndExpressionContext,0)


        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def dataScopeClause(self):
            return self.getTypedRuleContext(KqlParser.DataScopeClauseContext,0)


        def searchOperatorInClause(self):
            return self.getTypedRuleContext(KqlParser.SearchOperatorInClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_searchOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchOperator" ):
                listener.enterSearchOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchOperator" ):
                listener.exitSearchOperator(self)




    def searchOperator(self):

        localctx = KqlParser.SearchOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_searchOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1960
            self.match(KqlParser.SEARCH)
            self.state = 1964
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1961
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 1966
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

            self.state = 1968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.DATASCOPE:
                self.state = 1967
                localctx.DataScope = self.dataScopeClause()


            self.state = 1971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.IN:
                self.state = 1970
                localctx.InClause = self.searchOperatorInClause()


            self.state = 1976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1973
                localctx.Expression = self.unnamedExpression()
                pass

            elif la_ == 2:
                self.state = 1974
                localctx.Star = self.starExpression()
                pass

            elif la_ == 3:
                self.state = 1975
                localctx.StarAndExpression = self.searchOperatorStarAndExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchOperatorStarAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # UnnamedExpressionContext

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def AND(self):
            return self.getToken(KqlParser.AND, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_searchOperatorStarAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchOperatorStarAndExpression" ):
                listener.enterSearchOperatorStarAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchOperatorStarAndExpression" ):
                listener.exitSearchOperatorStarAndExpression(self)




    def searchOperatorStarAndExpression(self):

        localctx = KqlParser.SearchOperatorStarAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_searchOperatorStarAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            self.match(KqlParser.ASTERISK)
            self.state = 1979
            self.match(KqlParser.AND)
            self.state = 1980
            localctx.Expression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SearchOperatorInClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._findOperatorSource = None # FindOperatorSourceContext
            self.Expressions = list() # of FindOperatorSourceContexts

        def IN(self):
            return self.getToken(KqlParser.IN, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def findOperatorSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.FindOperatorSourceContext)
            else:
                return self.getTypedRuleContext(KqlParser.FindOperatorSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_searchOperatorInClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchOperatorInClause" ):
                listener.enterSearchOperatorInClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchOperatorInClause" ):
                listener.exitSearchOperatorInClause(self)




    def searchOperatorInClause(self):

        localctx = KqlParser.SearchOperatorInClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_searchOperatorInClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.match(KqlParser.IN)
            self.state = 1983
            self.match(KqlParser.OPENPAREN)
            self.state = 1984
            localctx._findOperatorSource = self.findOperatorSource()
            localctx.Expressions.append(localctx._findOperatorSource)
            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 1985
                self.match(KqlParser.COMMA)
                self.state = 1986
                localctx._findOperatorSource = self.findOperatorSource()
                localctx.Expressions.append(localctx._findOperatorSource)
                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1992
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SerializeOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts

        def SERIALIZE(self):
            return self.getToken(KqlParser.SERIALIZE, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_serializeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerializeOperator" ):
                listener.enterSerializeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerializeOperator" ):
                listener.exitSerializeOperator(self)




    def serializeOperator(self):

        localctx = KqlParser.SerializeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_serializeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            self.match(KqlParser.SERIALIZE)
            self.state = 1998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or _la==KqlParser.WITH_SOURCE or _la==KqlParser.WITH_STEP_NAME:
                self.state = 1995
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2001
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 2002
                self.match(KqlParser.COMMA)
                self.state = 2003
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 2008
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._orderedExpression = None # OrderedExpressionContext
            self.Expressions = list() # of OrderedExpressionContexts

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def orderedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.OrderedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.OrderedExpressionContext,i)


        def SORT(self):
            return self.getToken(KqlParser.SORT, 0)

        def ORDER(self):
            return self.getToken(KqlParser.ORDER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_sortOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortOperator" ):
                listener.enterSortOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortOperator" ):
                listener.exitSortOperator(self)




    def sortOperator(self):

        localctx = KqlParser.SortOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_sortOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.ORDER or _la==KqlParser.SORT):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0):
                self.state = 2010
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2016
            self.match(KqlParser.BY)
            self.state = 2017
            localctx._orderedExpression = self.orderedExpression()
            localctx.Expressions.append(localctx._orderedExpression)
            self.state = 2022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 2018
                self.match(KqlParser.COMMA)
                self.state = 2019
                localctx._orderedExpression = self.orderedExpression()
                localctx.Expressions.append(localctx._orderedExpression)
                self.state = 2024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.Ordering = None # SortOrderingContext

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def sortOrdering(self):
            return self.getTypedRuleContext(KqlParser.SortOrderingContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_orderedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedExpression" ):
                listener.enterOrderedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedExpression" ):
                listener.exitOrderedExpression(self)




    def orderedExpression(self):

        localctx = KqlParser.OrderedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_orderedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2025
            localctx.Expression = self.namedExpression()
            self.state = 2026
            localctx.Ordering = self.sortOrdering()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortOrderingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OrderKind = None # Token
            self.NullsKind = None # Token

        def NULLS(self):
            return self.getToken(KqlParser.NULLS, 0)

        def ASC(self):
            return self.getToken(KqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(KqlParser.DESC, 0)

        def FIRST(self):
            return self.getToken(KqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(KqlParser.LAST, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_sortOrdering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortOrdering" ):
                listener.enterSortOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortOrdering" ):
                listener.exitSortOrdering(self)




    def sortOrdering(self):

        localctx = KqlParser.SortOrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_sortOrdering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.ASC or _la==KqlParser.DESC:
                self.state = 2028
                localctx.OrderKind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==KqlParser.ASC or _la==KqlParser.DESC):
                    localctx.OrderKind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.NULLS:
                self.state = 2031
                self.match(KqlParser.NULLS)
                self.state = 2032
                localctx.NullsKind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==KqlParser.FIRST or _la==KqlParser.LAST):
                    localctx.NullsKind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SummarizeOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts
            self.ByClause = None # SummarizeOperatorByClauseContext

        def SUMMARIZE(self):
            return self.getToken(KqlParser.SUMMARIZE, 0)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def summarizeOperatorByClause(self):
            return self.getTypedRuleContext(KqlParser.SummarizeOperatorByClauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_summarizeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSummarizeOperator" ):
                listener.enterSummarizeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSummarizeOperator" ):
                listener.exitSummarizeOperator(self)




    def summarizeOperator(self):

        localctx = KqlParser.SummarizeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_summarizeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self.match(KqlParser.SUMMARIZE)
            self.state = 2039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or _la==KqlParser.WITH_SOURCE or _la==KqlParser.WITH_STEP_NAME:
                self.state = 2036
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2041
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 2042
                localctx._namedExpression = self.namedExpression()
                localctx.Expressions.append(localctx._namedExpression)
                self.state = 2047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KqlParser.COMMA:
                    self.state = 2043
                    self.match(KqlParser.COMMA)
                    self.state = 2044
                    localctx._namedExpression = self.namedExpression()
                    localctx.Expressions.append(localctx._namedExpression)
                    self.state = 2049
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.BY:
                self.state = 2052
                localctx.ByClause = self.summarizeOperatorByClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SummarizeOperatorByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._namedExpression = None # NamedExpressionContext
            self.Expressions = list() # of NamedExpressionContexts
            self.BinClause = None # SummarizeOperatorLegacyBinClauseContext

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def COMMA(self):
            return self.getToken(KqlParser.COMMA, 0)

        def summarizeOperatorLegacyBinClause(self):
            return self.getTypedRuleContext(KqlParser.SummarizeOperatorLegacyBinClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_summarizeOperatorByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSummarizeOperatorByClause" ):
                listener.enterSummarizeOperatorByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSummarizeOperatorByClause" ):
                listener.exitSummarizeOperatorByClause(self)




    def summarizeOperatorByClause(self):

        localctx = KqlParser.SummarizeOperatorByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_summarizeOperatorByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.match(KqlParser.BY)
            self.state = 2056
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)

            self.state = 2057
            self.match(KqlParser.COMMA)
            self.state = 2058
            localctx._namedExpression = self.namedExpression()
            localctx.Expressions.append(localctx._namedExpression)
            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.BIN:
                self.state = 2060
                localctx.BinClause = self.summarizeOperatorLegacyBinClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SummarizeOperatorLegacyBinClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NumberLikeLiteralExpressionContext

        def BIN(self):
            return self.getToken(KqlParser.BIN, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def numberLikeLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.NumberLikeLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_summarizeOperatorLegacyBinClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSummarizeOperatorLegacyBinClause" ):
                listener.enterSummarizeOperatorLegacyBinClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSummarizeOperatorLegacyBinClause" ):
                listener.exitSummarizeOperatorLegacyBinClause(self)




    def summarizeOperatorLegacyBinClause(self):

        localctx = KqlParser.SummarizeOperatorLegacyBinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_summarizeOperatorLegacyBinClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.match(KqlParser.BIN)
            self.state = 2064
            self.match(KqlParser.EQUAL)
            self.state = 2065
            localctx.Expression = self.numberLikeLiteralExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakeOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Expression = None # NamedExpressionContext

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def LIMIT(self):
            return self.getToken(KqlParser.LIMIT, 0)

        def TAKE(self):
            return self.getToken(KqlParser.TAKE, 0)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_takeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTakeOperator" ):
                listener.enterTakeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTakeOperator" ):
                listener.exitTakeOperator(self)




    def takeOperator(self):

        localctx = KqlParser.TakeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_takeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.LIMIT or _la==KqlParser.TAKE):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or _la==KqlParser.WITH_SOURCE or _la==KqlParser.WITH_STEP_NAME:
                self.state = 2068
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2074
            localctx.Expression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Expression = None # NamedExpressionContext
            self.ByExpression = None # OrderedExpressionContext

        def TOP(self):
            return self.getToken(KqlParser.TOP, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def orderedExpression(self):
            return self.getTypedRuleContext(KqlParser.OrderedExpressionContext,0)


        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_topOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopOperator" ):
                listener.enterTopOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopOperator" ):
                listener.exitTopOperator(self)




    def topOperator(self):

        localctx = KqlParser.TopOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_topOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2076
            self.match(KqlParser.TOP)
            self.state = 2080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or _la==KqlParser.WITH_SOURCE or _la==KqlParser.WITH_STEP_NAME:
                self.state = 2077
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2083
            localctx.Expression = self.namedExpression()
            self.state = 2084
            self.match(KqlParser.BY)
            self.state = 2085
            localctx.ByExpression = self.orderedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopHittersOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.OfExpression = None # NamedExpressionContext
            self.ByClause = None # TopHittersOperatorByClauseContext

        def TOP_HITTERS(self):
            return self.getToken(KqlParser.TOP_HITTERS, 0)

        def OF(self):
            return self.getToken(KqlParser.OF, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def topHittersOperatorByClause(self):
            return self.getTypedRuleContext(KqlParser.TopHittersOperatorByClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_topHittersOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopHittersOperator" ):
                listener.enterTopHittersOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopHittersOperator" ):
                listener.exitTopHittersOperator(self)




    def topHittersOperator(self):

        localctx = KqlParser.TopHittersOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_topHittersOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            self.match(KqlParser.TOP_HITTERS)
            self.state = 2088
            localctx.Expression = self.namedExpression()
            self.state = 2089
            self.match(KqlParser.OF)
            self.state = 2090
            localctx.OfExpression = self.namedExpression()
            self.state = 2092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.BY:
                self.state = 2091
                localctx.ByClause = self.topHittersOperatorByClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopHittersOperatorByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ByExpression = None # OrderedExpressionContext

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def orderedExpression(self):
            return self.getTypedRuleContext(KqlParser.OrderedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_topHittersOperatorByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopHittersOperatorByClause" ):
                listener.enterTopHittersOperatorByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopHittersOperatorByClause" ):
                listener.exitTopHittersOperatorByClause(self)




    def topHittersOperatorByClause(self):

        localctx = KqlParser.TopHittersOperatorByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_topHittersOperatorByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2094
            self.match(KqlParser.BY)
            self.state = 2095
            localctx.ByExpression = self.orderedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopNestedOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._topNestedOperatorPart = None # TopNestedOperatorPartContext
            self.Segments = list() # of TopNestedOperatorPartContexts

        def topNestedOperatorPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.TopNestedOperatorPartContext)
            else:
                return self.getTypedRuleContext(KqlParser.TopNestedOperatorPartContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_topNestedOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopNestedOperator" ):
                listener.enterTopNestedOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopNestedOperator" ):
                listener.exitTopNestedOperator(self)




    def topNestedOperator(self):

        localctx = KqlParser.TopNestedOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_topNestedOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2097
            localctx._topNestedOperatorPart = self.topNestedOperatorPart()
            localctx.Segments.append(localctx._topNestedOperatorPart)
            self.state = 2102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 2098
                self.match(KqlParser.COMMA)
                self.state = 2099
                localctx._topNestedOperatorPart = self.topNestedOperatorPart()
                localctx.Segments.append(localctx._topNestedOperatorPart)
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopNestedOperatorPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext
            self.OfExpression = None # NamedExpressionContext
            self.WithOthers = None # TopNestedOperatorWithOthersClauseContext
            self.ByExpression = None # OrderedExpressionContext

        def TOP_NESTED(self):
            return self.getToken(KqlParser.TOP_NESTED, 0)

        def OF(self):
            return self.getToken(KqlParser.OF, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.NamedExpressionContext,i)


        def orderedExpression(self):
            return self.getTypedRuleContext(KqlParser.OrderedExpressionContext,0)


        def topNestedOperatorWithOthersClause(self):
            return self.getTypedRuleContext(KqlParser.TopNestedOperatorWithOthersClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_topNestedOperatorPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopNestedOperatorPart" ):
                listener.enterTopNestedOperatorPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopNestedOperatorPart" ):
                listener.exitTopNestedOperatorPart(self)




    def topNestedOperatorPart(self):

        localctx = KqlParser.TopNestedOperatorPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_topNestedOperatorPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            self.match(KqlParser.TOP_NESTED)
            self.state = 2107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 2106
                localctx.Expression = self.namedExpression()


            self.state = 2109
            self.match(KqlParser.OF)
            self.state = 2110
            localctx.OfExpression = self.namedExpression()
            self.state = 2112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.WITH:
                self.state = 2111
                localctx.WithOthers = self.topNestedOperatorWithOthersClause()


            self.state = 2114
            self.match(KqlParser.BY)
            self.state = 2115
            localctx.ByExpression = self.orderedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopNestedOperatorWithOthersClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def OTHERS(self):
            return self.getToken(KqlParser.OTHERS, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_topNestedOperatorWithOthersClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopNestedOperatorWithOthersClause" ):
                listener.enterTopNestedOperatorWithOthersClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopNestedOperatorWithOthersClause" ):
                listener.exitTopNestedOperatorWithOthersClause(self)




    def topNestedOperatorWithOthersClause(self):

        localctx = KqlParser.TopNestedOperatorWithOthersClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_topNestedOperatorWithOthersClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            self.match(KqlParser.WITH)
            self.state = 2118
            self.match(KqlParser.OTHERS)
            self.state = 2119
            self.match(KqlParser.EQUAL)
            self.state = 2120
            localctx.Expression = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self._unionOperatorExpression = None # UnionOperatorExpressionContext
            self.Expressions = list() # of UnionOperatorExpressionContexts

        def UNION(self):
            return self.getToken(KqlParser.UNION, 0)

        def unionOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.UnionOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.UnionOperatorExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_unionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionOperator" ):
                listener.enterUnionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionOperator" ):
                listener.exitUnionOperator(self)




    def unionOperator(self):

        localctx = KqlParser.UnionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_unionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2122
            self.match(KqlParser.UNION)
            self.state = 2126
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2123
                    localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                    localctx.Parameters.append(localctx._relaxedQueryOperatorParameter) 
                self.state = 2128
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

            self.state = 2129
            localctx._unionOperatorExpression = self.unionOperatorExpression()
            localctx.Expressions.append(localctx._unionOperatorExpression)
            self.state = 2134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 2130
                self.match(KqlParser.COMMA)
                self.state = 2131
                localctx._unionOperatorExpression = self.unionOperatorExpression()
                localctx.Expressions.append(localctx._unionOperatorExpression)
                self.state = 2136
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcardedEntityExpression(self):
            return self.getTypedRuleContext(KqlParser.WildcardedEntityExpressionContext,0)


        def entityNameReference(self):
            return self.getTypedRuleContext(KqlParser.EntityNameReferenceContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(KqlParser.ParenthesizedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_unionOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionOperatorExpression" ):
                listener.enterUnionOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionOperatorExpression" ):
                listener.exitUnionOperatorExpression(self)




    def unionOperatorExpression(self):

        localctx = KqlParser.UnionOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_unionOperatorExpression)
        try:
            self.state = 2140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2137
                self.wildcardedEntityExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2138
                self.entityNameReference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2139
                self.parenthesizedExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._strictQueryOperatorParameter = None # StrictQueryOperatorParameterContext
            self.Parameters = list() # of StrictQueryOperatorParameterContexts
            self.Predicate = None # NamedExpressionContext

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def FILTER(self):
            return self.getToken(KqlParser.FILTER, 0)

        def WHERE(self):
            return self.getToken(KqlParser.WHERE, 0)

        def strictQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StrictQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.StrictQueryOperatorParameterContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_whereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereOperator" ):
                listener.enterWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereOperator" ):
                listener.exitWhereOperator(self)




    def whereOperator(self):

        localctx = KqlParser.WhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_whereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2142
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.FILTER or _la==KqlParser.WHERE):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or _la==KqlParser.WITH_SOURCE or _la==KqlParser.WITH_STEP_NAME:
                self.state = 2143
                localctx._strictQueryOperatorParameter = self.strictQueryOperatorParameter()
                localctx.Parameters.append(localctx._strictQueryOperatorParameter)
                self.state = 2148
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2149
            localctx.Predicate = self.namedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualSubExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pipeSubExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeSubExpressionContext,0)


        def contextualPipeExpression(self):
            return self.getTypedRuleContext(KqlParser.ContextualPipeExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_contextualSubExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualSubExpression" ):
                listener.enterContextualSubExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualSubExpression" ):
                listener.exitContextualSubExpression(self)




    def contextualSubExpression(self):

        localctx = KqlParser.ContextualSubExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_contextualSubExpression)
        try:
            self.state = 2153
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.AS, KqlParser.ASSERTSCHEMA, KqlParser.CONSUME, KqlParser.COUNT, KqlParser.DISTINCT, KqlParser.EVALUATE, KqlParser.EXECUTE_AND_CACHE, KqlParser.EXTEND, KqlParser.FACET, KqlParser.FILTER, KqlParser.FIND, KqlParser.FORK, KqlParser.GETSCHEMA, KqlParser.GRAPHMARKCOMPONENTS, KqlParser.GRAPHMATCH, KqlParser.GRAPHMERGE, KqlParser.GRAPHSHORTESTPATHS, KqlParser.GRAPHTOTABLE, KqlParser.INVOKE, KqlParser.JOIN, KqlParser.LIMIT, KqlParser.LOOKUP, KqlParser.MAKEGRAPH, KqlParser.MAKESERIES, KqlParser.MV_APPLY, KqlParser.MV_EXPAND, KqlParser.MVAPPLY, KqlParser.MVEXPAND, KqlParser.ORDER, KqlParser.PARSE, KqlParser.PARSEKV, KqlParser.PARSEWHERE, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PROJECT, KqlParser.PROJECTAWAY, KqlParser.PROJECTKEEP, KqlParser.PROJECTRENAME, KqlParser.PROJECTREORDER, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.SAMPLE, KqlParser.SAMPLE_DISTINCT, KqlParser.SCAN, KqlParser.SEARCH, KqlParser.SERIALIZE, KqlParser.SORT, KqlParser.SUMMARIZE, KqlParser.TAKE, KqlParser.TOP, KqlParser.TOP_HITTERS, KqlParser.TOP_NESTED, KqlParser.UNION, KqlParser.WHERE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2151
                self.pipeSubExpression()
                pass
            elif token in [KqlParser.CONTEXTUAL_DATATABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2152
                self.contextualPipeExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualPipeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ContextualDataTableExpressionContext
            self._contextualPipeExpressionPipedOperator = None # ContextualPipeExpressionPipedOperatorContext
            self.PipedOperators = list() # of ContextualPipeExpressionPipedOperatorContexts

        def contextualDataTableExpression(self):
            return self.getTypedRuleContext(KqlParser.ContextualDataTableExpressionContext,0)


        def contextualPipeExpressionPipedOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ContextualPipeExpressionPipedOperatorContext)
            else:
                return self.getTypedRuleContext(KqlParser.ContextualPipeExpressionPipedOperatorContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_contextualPipeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualPipeExpression" ):
                listener.enterContextualPipeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualPipeExpression" ):
                listener.exitContextualPipeExpression(self)




    def contextualPipeExpression(self):

        localctx = KqlParser.ContextualPipeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_contextualPipeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            localctx.Expression = self.contextualDataTableExpression()
            self.state = 2159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.BAR:
                self.state = 2156
                localctx._contextualPipeExpressionPipedOperator = self.contextualPipeExpressionPipedOperator()
                localctx.PipedOperators.append(localctx._contextualPipeExpressionPipedOperator)
                self.state = 2161
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualPipeExpressionPipedOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # AfterPipeOperatorContext

        def BAR(self):
            return self.getToken(KqlParser.BAR, 0)

        def afterPipeOperator(self):
            return self.getTypedRuleContext(KqlParser.AfterPipeOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_contextualPipeExpressionPipedOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualPipeExpressionPipedOperator" ):
                listener.enterContextualPipeExpressionPipedOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualPipeExpressionPipedOperator" ):
                listener.exitContextualPipeExpressionPipedOperator(self)




    def contextualPipeExpressionPipedOperator(self):

        localctx = KqlParser.ContextualPipeExpressionPipedOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_contextualPipeExpressionPipedOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2162
            self.match(KqlParser.BAR)
            self.state = 2163
            localctx.Operator = self.afterPipeOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictQueryOperatorParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NameToken = None # Token
            self.NameValue = None # IdentifierOrKeywordNameContext
            self.LiteralValue = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def BAGEXPANSION(self):
            return self.getToken(KqlParser.BAGEXPANSION, 0)

        def BIN_LEGACY(self):
            return self.getToken(KqlParser.BIN_LEGACY, 0)

        def CROSSCLUSTER__(self):
            return self.getToken(KqlParser.CROSSCLUSTER__, 0)

        def CROSSDB__(self):
            return self.getToken(KqlParser.CROSSDB__, 0)

        def DECODEBLOCKS(self):
            return self.getToken(KqlParser.DECODEBLOCKS, 0)

        def EXPANDOUTPUT(self):
            return self.getToken(KqlParser.EXPANDOUTPUT, 0)

        def HINT_CONCURRENCY(self):
            return self.getToken(KqlParser.HINT_CONCURRENCY, 0)

        def HINT_DISTRIBUTION(self):
            return self.getToken(KqlParser.HINT_DISTRIBUTION, 0)

        def HINT_MATERIALIZED(self):
            return self.getToken(KqlParser.HINT_MATERIALIZED, 0)

        def HINT_NUM_PARTITIONS(self):
            return self.getToken(KqlParser.HINT_NUM_PARTITIONS, 0)

        def HINT_PASS_FILTERS(self):
            return self.getToken(KqlParser.HINT_PASS_FILTERS, 0)

        def HINT_PASS_FILTERS_COLUMN(self):
            return self.getToken(KqlParser.HINT_PASS_FILTERS_COLUMN, 0)

        def HINT_PROGRESSIVE_TOP(self):
            return self.getToken(KqlParser.HINT_PROGRESSIVE_TOP, 0)

        def HINT_REMOTE(self):
            return self.getToken(KqlParser.HINT_REMOTE, 0)

        def HINT_SUFFLEKEY(self):
            return self.getToken(KqlParser.HINT_SUFFLEKEY, 0)

        def HINT_SPREAD(self):
            return self.getToken(KqlParser.HINT_SPREAD, 0)

        def HINT_STRATEGY(self):
            return self.getToken(KqlParser.HINT_STRATEGY, 0)

        def ISFUZZY(self):
            return self.getToken(KqlParser.ISFUZZY, 0)

        def ISFUZZY__(self):
            return self.getToken(KqlParser.ISFUZZY__, 0)

        def ID__(self):
            return self.getToken(KqlParser.ID__, 0)

        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def PACKEDCOLUMN__(self):
            return self.getToken(KqlParser.PACKEDCOLUMN__, 0)

        def SOURCECOLUMNINDEX__(self):
            return self.getToken(KqlParser.SOURCECOLUMNINDEX__, 0)

        def WITH_ITEM_INDEX(self):
            return self.getToken(KqlParser.WITH_ITEM_INDEX, 0)

        def WITH_MATCH_ID(self):
            return self.getToken(KqlParser.WITH_MATCH_ID, 0)

        def WITH_STEP_NAME(self):
            return self.getToken(KqlParser.WITH_STEP_NAME, 0)

        def WITHSOURCE(self):
            return self.getToken(KqlParser.WITHSOURCE, 0)

        def WITH_SOURCE(self):
            return self.getToken(KqlParser.WITH_SOURCE, 0)

        def WITHNOSOURCE__(self):
            return self.getToken(KqlParser.WITHNOSOURCE__, 0)

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordNameContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_strictQueryOperatorParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrictQueryOperatorParameter" ):
                listener.enterStrictQueryOperatorParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrictQueryOperatorParameter" ):
                listener.exitStrictQueryOperatorParameter(self)




    def strictQueryOperatorParameter(self):

        localctx = KqlParser.StrictQueryOperatorParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_strictQueryOperatorParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2165
            localctx.NameToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or _la==KqlParser.WITH_SOURCE or _la==KqlParser.WITH_STEP_NAME):
                localctx.NameToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2166
            self.match(KqlParser.EQUAL)
            self.state = 2169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID, KqlParser.IDENTIFIER]:
                self.state = 2167
                localctx.NameValue = self.identifierOrKeywordName()
                pass
            elif token in [KqlParser.DASH, KqlParser.PLUS, KqlParser.DYNAMIC, KqlParser.LONGLITERAL, KqlParser.INTLITERAL, KqlParser.REALLITERAL, KqlParser.DECIMALLITERAL, KqlParser.STRINGLITERAL, KqlParser.BOOLEANLITERAL, KqlParser.DATETIMELITERAL, KqlParser.TIMESPANLITERAL, KqlParser.TYPELITERAL, KqlParser.GUIDLITERAL]:
                self.state = 2168
                localctx.LiteralValue = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelaxedQueryOperatorParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NameToken = None # Token
            self.NameValue = None # IdentifierOrKeywordNameContext
            self.LiteralValue = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def BAGEXPANSION(self):
            return self.getToken(KqlParser.BAGEXPANSION, 0)

        def BIN_LEGACY(self):
            return self.getToken(KqlParser.BIN_LEGACY, 0)

        def CROSSCLUSTER__(self):
            return self.getToken(KqlParser.CROSSCLUSTER__, 0)

        def CROSSDB__(self):
            return self.getToken(KqlParser.CROSSDB__, 0)

        def DECODEBLOCKS(self):
            return self.getToken(KqlParser.DECODEBLOCKS, 0)

        def EXPANDOUTPUT(self):
            return self.getToken(KqlParser.EXPANDOUTPUT, 0)

        def HINT_CONCURRENCY(self):
            return self.getToken(KqlParser.HINT_CONCURRENCY, 0)

        def HINT_DISTRIBUTION(self):
            return self.getToken(KqlParser.HINT_DISTRIBUTION, 0)

        def HINT_MATERIALIZED(self):
            return self.getToken(KqlParser.HINT_MATERIALIZED, 0)

        def HINT_NUM_PARTITIONS(self):
            return self.getToken(KqlParser.HINT_NUM_PARTITIONS, 0)

        def HINT_PASS_FILTERS(self):
            return self.getToken(KqlParser.HINT_PASS_FILTERS, 0)

        def HINT_PASS_FILTERS_COLUMN(self):
            return self.getToken(KqlParser.HINT_PASS_FILTERS_COLUMN, 0)

        def HINT_PROGRESSIVE_TOP(self):
            return self.getToken(KqlParser.HINT_PROGRESSIVE_TOP, 0)

        def HINT_REMOTE(self):
            return self.getToken(KqlParser.HINT_REMOTE, 0)

        def HINT_SUFFLEKEY(self):
            return self.getToken(KqlParser.HINT_SUFFLEKEY, 0)

        def HINT_SPREAD(self):
            return self.getToken(KqlParser.HINT_SPREAD, 0)

        def HINT_STRATEGY(self):
            return self.getToken(KqlParser.HINT_STRATEGY, 0)

        def ISFUZZY(self):
            return self.getToken(KqlParser.ISFUZZY, 0)

        def ISFUZZY__(self):
            return self.getToken(KqlParser.ISFUZZY__, 0)

        def ID__(self):
            return self.getToken(KqlParser.ID__, 0)

        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def PACKEDCOLUMN__(self):
            return self.getToken(KqlParser.PACKEDCOLUMN__, 0)

        def SOURCECOLUMNINDEX__(self):
            return self.getToken(KqlParser.SOURCECOLUMNINDEX__, 0)

        def WITH_ITEM_INDEX(self):
            return self.getToken(KqlParser.WITH_ITEM_INDEX, 0)

        def WITH_MATCH_ID(self):
            return self.getToken(KqlParser.WITH_MATCH_ID, 0)

        def WITH_STEP_NAME(self):
            return self.getToken(KqlParser.WITH_STEP_NAME, 0)

        def WITHSOURCE(self):
            return self.getToken(KqlParser.WITHSOURCE, 0)

        def WITH_SOURCE(self):
            return self.getToken(KqlParser.WITH_SOURCE, 0)

        def WITHNOSOURCE__(self):
            return self.getToken(KqlParser.WITHNOSOURCE__, 0)

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordNameContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_relaxedQueryOperatorParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelaxedQueryOperatorParameter" ):
                listener.enterRelaxedQueryOperatorParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelaxedQueryOperatorParameter" ):
                listener.exitRelaxedQueryOperatorParameter(self)




    def relaxedQueryOperatorParameter(self):

        localctx = KqlParser.RelaxedQueryOperatorParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_relaxedQueryOperatorParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            localctx.NameToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0)):
                localctx.NameToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2172
            self.match(KqlParser.EQUAL)
            self.state = 2175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID, KqlParser.IDENTIFIER]:
                self.state = 2173
                localctx.NameValue = self.identifierOrKeywordName()
                pass
            elif token in [KqlParser.DASH, KqlParser.PLUS, KqlParser.DYNAMIC, KqlParser.LONGLITERAL, KqlParser.INTLITERAL, KqlParser.REALLITERAL, KqlParser.DECIMALLITERAL, KqlParser.STRINGLITERAL, KqlParser.BOOLEANLITERAL, KqlParser.DATETIMELITERAL, KqlParser.TIMESPANLITERAL, KqlParser.TYPELITERAL, KqlParser.GUIDLITERAL]:
                self.state = 2174
                localctx.LiteralValue = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOperatorPropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # Token
            self.NameValue = None # IdentifierOrKeywordNameContext
            self.LiteralValue = None # LiteralExpressionContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def identifierOrKeywordName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordNameContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_queryOperatorProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOperatorProperty" ):
                listener.enterQueryOperatorProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOperatorProperty" ):
                listener.exitQueryOperatorProperty(self)




    def queryOperatorProperty(self):

        localctx = KqlParser.QueryOperatorPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_queryOperatorProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            localctx.Name = self.match(KqlParser.IDENTIFIER)
            self.state = 2178
            self.match(KqlParser.EQUAL)
            self.state = 2181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID, KqlParser.IDENTIFIER]:
                self.state = 2179
                localctx.NameValue = self.identifierOrKeywordName()
                pass
            elif token in [KqlParser.DASH, KqlParser.PLUS, KqlParser.DYNAMIC, KqlParser.LONGLITERAL, KqlParser.INTLITERAL, KqlParser.REALLITERAL, KqlParser.DECIMALLITERAL, KqlParser.STRINGLITERAL, KqlParser.BOOLEANLITERAL, KqlParser.DATETIMELITERAL, KqlParser.TIMESPANLITERAL, KqlParser.TYPELITERAL, KqlParser.GUIDLITERAL]:
                self.state = 2180
                localctx.LiteralValue = self.literalExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # NamedExpressionNameClauseContext
            self.Expression = None # UnnamedExpressionContext

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def namedExpressionNameClause(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionNameClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)




    def namedExpression(self):

        localctx = KqlParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 2183
                localctx.Name = self.namedExpressionNameClause()


            self.state = 2186
            localctx.Expression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionNameClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrExtendedKeywordOrEscapedNameContext
            self.NameList = None # NamedExpressionNameListContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def identifierOrExtendedKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,0)


        def namedExpressionNameList(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionNameListContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_namedExpressionNameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionNameClause" ):
                listener.enterNamedExpressionNameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionNameClause" ):
                listener.exitNamedExpressionNameClause(self)




    def namedExpressionNameClause(self):

        localctx = KqlParser.NamedExpressionNameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_namedExpressionNameClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.OPENBRACKET, KqlParser.ACCESS, KqlParser.ACCUMULATE, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AS, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.BY, KqlParser.CLUSTER, KqlParser.CONSUME, KqlParser.CONTAINS, KqlParser.COUNT, KqlParser.DATABASE, KqlParser.DATATABLE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.DISTINCT, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.EXTEND, KqlParser.EXTERNALDATA, KqlParser.FACET, KqlParser.FILTER, KqlParser.FIND, KqlParser.FORK, KqlParser.FROM, KqlParser.HAS, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.IN, KqlParser.INTO, KqlParser.INVOKE, KqlParser.LEGEND, KqlParser.LET, KqlParser.LIMIT, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.MATERIALIZE, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.OF, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARSE, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.PRINT, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SAMPLE, KqlParser.SAMPLE_DISTINCT, KqlParser.SCAN, KqlParser.SEARCH, KqlParser.SERIALIZE, KqlParser.SERIES, KqlParser.SET, KqlParser.SORT, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.SUMMARIZE, KqlParser.TAKE, KqlParser.THRESHOLD, KqlParser.TITLE, KqlParser.TO, KqlParser.TOP, KqlParser.TOP_HITTERS, KqlParser.TOP_NESTED, KqlParser.TOSCALAR, KqlParser.TOTABLE, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WHERE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID, KqlParser.IDENTIFIER]:
                self.state = 2188
                localctx.Name = self.identifierOrExtendedKeywordOrEscapedName()
                pass
            elif token in [KqlParser.OPENPAREN]:
                self.state = 2189
                localctx.NameList = self.namedExpressionNameList()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2192
            self.match(KqlParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifierOrExtendedKeywordOrEscapedName = None # IdentifierOrExtendedKeywordOrEscapedNameContext
            self.Names = list() # of IdentifierOrExtendedKeywordOrEscapedNameContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def identifierOrExtendedKeywordOrEscapedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext)
            else:
                return self.getTypedRuleContext(KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_namedExpressionNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionNameList" ):
                listener.enterNamedExpressionNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionNameList" ):
                listener.exitNamedExpressionNameList(self)




    def namedExpressionNameList(self):

        localctx = KqlParser.NamedExpressionNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_namedExpressionNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2194
            self.match(KqlParser.OPENPAREN)
            self.state = 2195
            localctx._identifierOrExtendedKeywordOrEscapedName = self.identifierOrExtendedKeywordOrEscapedName()
            localctx.Names.append(localctx._identifierOrExtendedKeywordOrEscapedName)
            self.state = 2200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 2196
                self.match(KqlParser.COMMA)
                self.state = 2197
                localctx._identifierOrExtendedKeywordOrEscapedName = self.identifierOrExtendedKeywordOrEscapedName()
                localctx.Names.append(localctx._identifierOrExtendedKeywordOrEscapedName)
                self.state = 2202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2203
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopedFunctionCallExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Scope = None # SimpleNameReferenceContext
            self.FunctionCall = None # FunctionCallExpressionContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def functionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_scopedFunctionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScopedFunctionCallExpression" ):
                listener.enterScopedFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScopedFunctionCallExpression" ):
                listener.exitScopedFunctionCallExpression(self)




    def scopedFunctionCallExpression(self):

        localctx = KqlParser.ScopedFunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_scopedFunctionCallExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2205
            localctx.Scope = self.simpleNameReference()
            self.state = 2206
            self.match(KqlParser.DOT)
            self.state = 2207
            localctx.FunctionCall = self.functionCallExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnamedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(KqlParser.LogicalOrExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_unnamedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamedExpression" ):
                listener.enterUnnamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamedExpression" ):
                listener.exitUnnamedExpression(self)




    def unnamedExpression(self):

        localctx = KqlParser.UnnamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_unnamedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2209
            self.logicalOrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # LogicalAndExpressionContext
            self._logicalOrOperation = None # LogicalOrOperationContext
            self.Operations = list() # of LogicalOrOperationContexts

        def logicalAndExpression(self):
            return self.getTypedRuleContext(KqlParser.LogicalAndExpressionContext,0)


        def logicalOrOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.LogicalOrOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.LogicalOrOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = KqlParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            localctx.Left = self.logicalAndExpression()
            self.state = 2215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.OR:
                self.state = 2212
                localctx._logicalOrOperation = self.logicalOrOperation()
                localctx.Operations.append(localctx._logicalOrOperation)
                self.state = 2217
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Right = None # LogicalAndExpressionContext

        def OR(self):
            return self.getToken(KqlParser.OR, 0)

        def logicalAndExpression(self):
            return self.getTypedRuleContext(KqlParser.LogicalAndExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_logicalOrOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrOperation" ):
                listener.enterLogicalOrOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrOperation" ):
                listener.exitLogicalOrOperation(self)




    def logicalOrOperation(self):

        localctx = KqlParser.LogicalOrOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_logicalOrOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2218
            self.match(KqlParser.OR)
            self.state = 2219
            localctx.Right = self.logicalAndExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # EqualityExpressionContext
            self._logicalAndOperation = None # LogicalAndOperationContext
            self.Operations = list() # of LogicalAndOperationContexts

        def equalityExpression(self):
            return self.getTypedRuleContext(KqlParser.EqualityExpressionContext,0)


        def logicalAndOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.LogicalAndOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.LogicalAndOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = KqlParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2221
            localctx.Left = self.equalityExpression()
            self.state = 2225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.AND:
                self.state = 2222
                localctx._logicalAndOperation = self.logicalAndOperation()
                localctx.Operations.append(localctx._logicalAndOperation)
                self.state = 2227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Right = None # EqualityExpressionContext

        def AND(self):
            return self.getToken(KqlParser.AND, 0)

        def equalityExpression(self):
            return self.getTypedRuleContext(KqlParser.EqualityExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_logicalAndOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndOperation" ):
                listener.enterLogicalAndOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndOperation" ):
                listener.exitLogicalAndOperation(self)




    def logicalAndOperation(self):

        localctx = KqlParser.LogicalAndOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_logicalAndOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2228
            self.match(KqlParser.AND)
            self.state = 2229
            localctx.Right = self.equalityExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(KqlParser.RelationalExpressionContext,0)


        def equalsEqualityExpression(self):
            return self.getTypedRuleContext(KqlParser.EqualsEqualityExpressionContext,0)


        def listEqualityExpression(self):
            return self.getTypedRuleContext(KqlParser.ListEqualityExpressionContext,0)


        def betweenEqualityExpression(self):
            return self.getTypedRuleContext(KqlParser.BetweenEqualityExpressionContext,0)


        def starEqualityExpression(self):
            return self.getTypedRuleContext(KqlParser.StarEqualityExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = KqlParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_equalityExpression)
        try:
            self.state = 2236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2231
                self.relationalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2232
                self.equalsEqualityExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2233
                self.listEqualityExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2234
                self.betweenEqualityExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2235
                self.starEqualityExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualsEqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # RelationalExpressionContext
            self.OperatorToken = None # Token
            self.Right = None # RelationalExpressionContext

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelationalExpressionContext,i)


        def EQUALEQUAL(self):
            return self.getToken(KqlParser.EQUALEQUAL, 0)

        def LESSTHAN_GREATERTHAN(self):
            return self.getToken(KqlParser.LESSTHAN_GREATERTHAN, 0)

        def EXCLAIMATIONPOINT_EQUAL(self):
            return self.getToken(KqlParser.EXCLAIMATIONPOINT_EQUAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_equalsEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualsEqualityExpression" ):
                listener.enterEqualsEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualsEqualityExpression" ):
                listener.exitEqualsEqualityExpression(self)




    def equalsEqualityExpression(self):

        localctx = KqlParser.EqualsEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_equalsEqualityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2238
            localctx.Left = self.relationalExpression()
            self.state = 2239
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.EQUALEQUAL) | (1 << KqlParser.EXCLAIMATIONPOINT_EQUAL) | (1 << KqlParser.LESSTHAN_GREATERTHAN))) != 0)):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2240
            localctx.Right = self.relationalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListEqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # RelationalExpressionContext
            self.OperatorToken = None # Token
            self._invocationExpression = None # InvocationExpressionContext
            self.Expressions = list() # of InvocationExpressionContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def relationalExpression(self):
            return self.getTypedRuleContext(KqlParser.RelationalExpressionContext,0)


        def invocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.InvocationExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,i)


        def IN(self):
            return self.getToken(KqlParser.IN, 0)

        def NOT_IN(self):
            return self.getToken(KqlParser.NOT_IN, 0)

        def IN_CI(self):
            return self.getToken(KqlParser.IN_CI, 0)

        def NOT_IN_CI(self):
            return self.getToken(KqlParser.NOT_IN_CI, 0)

        def HAS_ANY(self):
            return self.getToken(KqlParser.HAS_ANY, 0)

        def HAS_ALL(self):
            return self.getToken(KqlParser.HAS_ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_listEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListEqualityExpression" ):
                listener.enterListEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListEqualityExpression" ):
                listener.exitListEqualityExpression(self)




    def listEqualityExpression(self):

        localctx = KqlParser.ListEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_listEqualityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2242
            localctx.Left = self.relationalExpression()
            self.state = 2243
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (KqlParser.HAS_ALL - 105)) | (1 << (KqlParser.HAS_ANY - 105)) | (1 << (KqlParser.IN - 105)) | (1 << (KqlParser.IN_CI - 105)))) != 0) or _la==KqlParser.NOT_IN or _la==KqlParser.NOT_IN_CI):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2244
            self.match(KqlParser.OPENPAREN)
            self.state = 2245
            localctx._invocationExpression = self.invocationExpression()
            localctx.Expressions.append(localctx._invocationExpression)
            self.state = 2250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 2246
                self.match(KqlParser.COMMA)
                self.state = 2247
                localctx._invocationExpression = self.invocationExpression()
                localctx.Expressions.append(localctx._invocationExpression)
                self.state = 2252
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2253
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BetweenEqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # RelationalExpressionContext
            self.OperatorToken = None # Token
            self.StartExpression = None # InvocationExpressionContext
            self.EndExpression = None # InvocationExpressionContext

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def DOTDOT(self):
            return self.getToken(KqlParser.DOTDOT, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def relationalExpression(self):
            return self.getTypedRuleContext(KqlParser.RelationalExpressionContext,0)


        def invocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.InvocationExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,i)


        def BETWEEN(self):
            return self.getToken(KqlParser.BETWEEN, 0)

        def NOT_BETWEEN(self):
            return self.getToken(KqlParser.NOT_BETWEEN, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_betweenEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenEqualityExpression" ):
                listener.enterBetweenEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenEqualityExpression" ):
                listener.exitBetweenEqualityExpression(self)




    def betweenEqualityExpression(self):

        localctx = KqlParser.BetweenEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_betweenEqualityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2255
            localctx.Left = self.relationalExpression()
            self.state = 2256
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.BETWEEN or _la==KqlParser.NOT_BETWEEN):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2257
            self.match(KqlParser.OPENPAREN)
            self.state = 2258
            localctx.StartExpression = self.invocationExpression()
            self.state = 2259
            self.match(KqlParser.DOTDOT)
            self.state = 2260
            localctx.EndExpression = self.invocationExpression()
            self.state = 2261
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StarEqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # RelationalExpressionContext

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def EQUALEQUAL(self):
            return self.getToken(KqlParser.EQUALEQUAL, 0)

        def relationalExpression(self):
            return self.getTypedRuleContext(KqlParser.RelationalExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_starEqualityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarEqualityExpression" ):
                listener.enterStarEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarEqualityExpression" ):
                listener.exitStarEqualityExpression(self)




    def starEqualityExpression(self):

        localctx = KqlParser.StarEqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_starEqualityExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.match(KqlParser.ASTERISK)
            self.state = 2264
            self.match(KqlParser.EQUALEQUAL)
            self.state = 2265
            localctx.Expression = self.relationalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # AdditiveExpressionContext
            self.OperatorToken = None # Token
            self.Right = None # AdditiveExpressionContext

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.AdditiveExpressionContext,i)


        def LESSTHAN(self):
            return self.getToken(KqlParser.LESSTHAN, 0)

        def GREATERTHAN(self):
            return self.getToken(KqlParser.GREATERTHAN, 0)

        def LESSTHAN_EQUAL(self):
            return self.getToken(KqlParser.LESSTHAN_EQUAL, 0)

        def GREATERTHAN_EQUAL(self):
            return self.getToken(KqlParser.GREATERTHAN_EQUAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = KqlParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2267
            localctx.Left = self.additiveExpression()
            self.state = 2270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.GREATERTHAN) | (1 << KqlParser.GREATERTHAN_EQUAL) | (1 << KqlParser.LESSTHAN) | (1 << KqlParser.LESSTHAN_EQUAL))) != 0):
                self.state = 2268
                localctx.OperatorToken = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.GREATERTHAN) | (1 << KqlParser.GREATERTHAN_EQUAL) | (1 << KqlParser.LESSTHAN) | (1 << KqlParser.LESSTHAN_EQUAL))) != 0)):
                    localctx.OperatorToken = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2269
                localctx.Right = self.additiveExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # MultiplicativeExpressionContext
            self._additiveOperation = None # AdditiveOperationContext
            self.Operations = list() # of AdditiveOperationContexts

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(KqlParser.MultiplicativeExpressionContext,0)


        def additiveOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.AdditiveOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.AdditiveOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = KqlParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2272
            localctx.Left = self.multiplicativeExpression()
            self.state = 2276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.DASH or _la==KqlParser.PLUS:
                self.state = 2273
                localctx._additiveOperation = self.additiveOperation()
                localctx.Operations.append(localctx._additiveOperation)
                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OperatorToken = None # Token
            self.Right = None # MultiplicativeExpressionContext

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(KqlParser.MultiplicativeExpressionContext,0)


        def PLUS(self):
            return self.getToken(KqlParser.PLUS, 0)

        def DASH(self):
            return self.getToken(KqlParser.DASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_additiveOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOperation" ):
                listener.enterAdditiveOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOperation" ):
                listener.exitAdditiveOperation(self)




    def additiveOperation(self):

        localctx = KqlParser.AdditiveOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_additiveOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2279
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.DASH or _la==KqlParser.PLUS):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2280
            localctx.Right = self.multiplicativeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # StringOperatorExpressionContext
            self._multiplicativeOperation = None # MultiplicativeOperationContext
            self.Operations = list() # of MultiplicativeOperationContexts

        def stringOperatorExpression(self):
            return self.getTypedRuleContext(KqlParser.StringOperatorExpressionContext,0)


        def multiplicativeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.MultiplicativeOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.MultiplicativeOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = KqlParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2282
            localctx.Left = self.stringOperatorExpression()
            self.state = 2286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.ASTERISK) | (1 << KqlParser.PERCENTSIGN) | (1 << KqlParser.SLASH))) != 0):
                self.state = 2283
                localctx._multiplicativeOperation = self.multiplicativeOperation()
                localctx.Operations.append(localctx._multiplicativeOperation)
                self.state = 2288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OperatorToken = None # Token
            self.Right = None # StringOperatorExpressionContext

        def stringOperatorExpression(self):
            return self.getTypedRuleContext(KqlParser.StringOperatorExpressionContext,0)


        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(KqlParser.SLASH, 0)

        def PERCENTSIGN(self):
            return self.getToken(KqlParser.PERCENTSIGN, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_multiplicativeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOperation" ):
                listener.enterMultiplicativeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOperation" ):
                listener.exitMultiplicativeOperation(self)




    def multiplicativeOperation(self):

        localctx = KqlParser.MultiplicativeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_multiplicativeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2289
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.ASTERISK) | (1 << KqlParser.PERCENTSIGN) | (1 << KqlParser.SLASH))) != 0)):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2290
            localctx.Right = self.stringOperatorExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringBinaryOperatorExpression(self):
            return self.getTypedRuleContext(KqlParser.StringBinaryOperatorExpressionContext,0)


        def stringStarOperatorExpression(self):
            return self.getTypedRuleContext(KqlParser.StringStarOperatorExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_stringOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringOperatorExpression" ):
                listener.enterStringOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringOperatorExpression" ):
                listener.exitStringOperatorExpression(self)




    def stringOperatorExpression(self):

        localctx = KqlParser.StringOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_stringOperatorExpression)
        try:
            self.state = 2294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.DASH, KqlParser.OPENBRACKET, KqlParser.OPENPAREN, KqlParser.PLUS, KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.CONTEXTUAL_DATATABLE, KqlParser.COUNT, KqlParser.DATABASE, KqlParser.DATATABLE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.EXTERNALDATA, KqlParser.EXTERNAL_DATA, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.MATERIALIZED_VIEW_COMBINE, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TOSCALAR, KqlParser.TOTABLE, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.DYNAMIC, KqlParser.GUID, KqlParser.LONGLITERAL, KqlParser.INTLITERAL, KqlParser.REALLITERAL, KqlParser.DECIMALLITERAL, KqlParser.STRINGLITERAL, KqlParser.BOOLEANLITERAL, KqlParser.DATETIMELITERAL, KqlParser.TIMESPANLITERAL, KqlParser.TYPELITERAL, KqlParser.GUIDLITERAL, KqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2292
                self.stringBinaryOperatorExpression()
                pass
            elif token in [KqlParser.ASTERISK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2293
                self.stringStarOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringBinaryOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Left = None # InvocationExpressionContext
            self._stringBinaryOperation = None # StringBinaryOperationContext
            self.Operations = list() # of StringBinaryOperationContexts

        def invocationExpression(self):
            return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,0)


        def stringBinaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StringBinaryOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.StringBinaryOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_stringBinaryOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringBinaryOperatorExpression" ):
                listener.enterStringBinaryOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringBinaryOperatorExpression" ):
                listener.exitStringBinaryOperatorExpression(self)




    def stringBinaryOperatorExpression(self):

        localctx = KqlParser.StringBinaryOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_stringBinaryOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2296
            localctx.Left = self.invocationExpression()
            self.state = 2300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.COLON) | (1 << KqlParser.EQUALTILDE) | (1 << KqlParser.EXCLAIMATIONPOINT_TILDE) | (1 << KqlParser.CONTAINS) | (1 << KqlParser.CONTAINSCS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (KqlParser.CONTAINS_CS - 64)) | (1 << (KqlParser.ENDSWITH - 64)) | (1 << (KqlParser.ENDSWITH_CS - 64)) | (1 << (KqlParser.HAS - 64)) | (1 << (KqlParser.HAS_CS - 64)) | (1 << (KqlParser.HASPREFIX - 64)) | (1 << (KqlParser.HASPREFIX_CS - 64)) | (1 << (KqlParser.HASSUFFIX - 64)) | (1 << (KqlParser.HASSUFFIX_CS - 64)))) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (KqlParser.LIKE - 142)) | (1 << (KqlParser.LIKECS - 142)) | (1 << (KqlParser.MATCHES_REGEX - 142)) | (1 << (KqlParser.NOT_CONTAINS - 142)) | (1 << (KqlParser.NOT_CONTAINS_CS - 142)) | (1 << (KqlParser.NOT_ENDSWITH_CS - 142)) | (1 << (KqlParser.NOT_ENDSWITH - 142)) | (1 << (KqlParser.NOT_HAS - 142)) | (1 << (KqlParser.NOT_HAS_CS - 142)) | (1 << (KqlParser.NOT_HASPREFIX - 142)) | (1 << (KqlParser.NOT_HASPREFIX_CS - 142)) | (1 << (KqlParser.NOT_HASSUFFIX - 142)) | (1 << (KqlParser.NOT_HASSUFFIX_CS - 142)) | (1 << (KqlParser.NOT_STARTSWITH - 142)) | (1 << (KqlParser.NOT_STARTSWITH_CS - 142)) | (1 << (KqlParser.NOTCONTAINS - 142)) | (1 << (KqlParser.NOTCONTAINSCS - 142)) | (1 << (KqlParser.NOTLIKE - 142)) | (1 << (KqlParser.NOTLIKECS - 142)))) != 0) or _la==KqlParser.STARTSWITH or _la==KqlParser.STARTSWITH_CS:
                self.state = 2297
                localctx._stringBinaryOperation = self.stringBinaryOperation()
                localctx.Operations.append(localctx._stringBinaryOperation)
                self.state = 2302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringBinaryOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # StringBinaryOperatorContext
            self.HasOperator = None # Token
            self.Right = None # InvocationExpressionContext

        def invocationExpression(self):
            return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,0)


        def stringBinaryOperator(self):
            return self.getTypedRuleContext(KqlParser.StringBinaryOperatorContext,0)


        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_stringBinaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringBinaryOperation" ):
                listener.enterStringBinaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringBinaryOperation" ):
                listener.exitStringBinaryOperation(self)




    def stringBinaryOperation(self):

        localctx = KqlParser.StringBinaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_stringBinaryOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2305
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.EQUALTILDE, KqlParser.EXCLAIMATIONPOINT_TILDE, KqlParser.CONTAINS, KqlParser.CONTAINSCS, KqlParser.CONTAINS_CS, KqlParser.ENDSWITH, KqlParser.ENDSWITH_CS, KqlParser.HAS, KqlParser.HAS_CS, KqlParser.HASPREFIX, KqlParser.HASPREFIX_CS, KqlParser.HASSUFFIX, KqlParser.HASSUFFIX_CS, KqlParser.LIKE, KqlParser.LIKECS, KqlParser.MATCHES_REGEX, KqlParser.NOT_CONTAINS, KqlParser.NOT_CONTAINS_CS, KqlParser.NOT_ENDSWITH_CS, KqlParser.NOT_ENDSWITH, KqlParser.NOT_HAS, KqlParser.NOT_HAS_CS, KqlParser.NOT_HASPREFIX, KqlParser.NOT_HASPREFIX_CS, KqlParser.NOT_HASSUFFIX, KqlParser.NOT_HASSUFFIX_CS, KqlParser.NOT_STARTSWITH, KqlParser.NOT_STARTSWITH_CS, KqlParser.NOTCONTAINS, KqlParser.NOTCONTAINSCS, KqlParser.NOTLIKE, KqlParser.NOTLIKECS, KqlParser.STARTSWITH, KqlParser.STARTSWITH_CS]:
                self.state = 2303
                localctx.Operator = self.stringBinaryOperator()
                pass
            elif token in [KqlParser.COLON]:
                self.state = 2304
                localctx.HasOperator = self.match(KqlParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2307
            localctx.Right = self.invocationExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringBinaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OperatorToken = None # Token

        def EQUALTILDE(self):
            return self.getToken(KqlParser.EQUALTILDE, 0)

        def EXCLAIMATIONPOINT_TILDE(self):
            return self.getToken(KqlParser.EXCLAIMATIONPOINT_TILDE, 0)

        def HAS(self):
            return self.getToken(KqlParser.HAS, 0)

        def NOT_HAS(self):
            return self.getToken(KqlParser.NOT_HAS, 0)

        def HAS_CS(self):
            return self.getToken(KqlParser.HAS_CS, 0)

        def NOT_HAS_CS(self):
            return self.getToken(KqlParser.NOT_HAS_CS, 0)

        def HASPREFIX(self):
            return self.getToken(KqlParser.HASPREFIX, 0)

        def NOT_HASPREFIX(self):
            return self.getToken(KqlParser.NOT_HASPREFIX, 0)

        def HASPREFIX_CS(self):
            return self.getToken(KqlParser.HASPREFIX_CS, 0)

        def NOT_HASPREFIX_CS(self):
            return self.getToken(KqlParser.NOT_HASPREFIX_CS, 0)

        def HASSUFFIX(self):
            return self.getToken(KqlParser.HASSUFFIX, 0)

        def NOT_HASSUFFIX(self):
            return self.getToken(KqlParser.NOT_HASSUFFIX, 0)

        def HASSUFFIX_CS(self):
            return self.getToken(KqlParser.HASSUFFIX_CS, 0)

        def NOT_HASSUFFIX_CS(self):
            return self.getToken(KqlParser.NOT_HASSUFFIX_CS, 0)

        def LIKE(self):
            return self.getToken(KqlParser.LIKE, 0)

        def NOTLIKE(self):
            return self.getToken(KqlParser.NOTLIKE, 0)

        def LIKECS(self):
            return self.getToken(KqlParser.LIKECS, 0)

        def NOTLIKECS(self):
            return self.getToken(KqlParser.NOTLIKECS, 0)

        def CONTAINS(self):
            return self.getToken(KqlParser.CONTAINS, 0)

        def NOTCONTAINS(self):
            return self.getToken(KqlParser.NOTCONTAINS, 0)

        def CONTAINSCS(self):
            return self.getToken(KqlParser.CONTAINSCS, 0)

        def NOTCONTAINSCS(self):
            return self.getToken(KqlParser.NOTCONTAINSCS, 0)

        def NOT_CONTAINS(self):
            return self.getToken(KqlParser.NOT_CONTAINS, 0)

        def CONTAINS_CS(self):
            return self.getToken(KqlParser.CONTAINS_CS, 0)

        def NOT_CONTAINS_CS(self):
            return self.getToken(KqlParser.NOT_CONTAINS_CS, 0)

        def STARTSWITH(self):
            return self.getToken(KqlParser.STARTSWITH, 0)

        def NOT_STARTSWITH(self):
            return self.getToken(KqlParser.NOT_STARTSWITH, 0)

        def STARTSWITH_CS(self):
            return self.getToken(KqlParser.STARTSWITH_CS, 0)

        def NOT_STARTSWITH_CS(self):
            return self.getToken(KqlParser.NOT_STARTSWITH_CS, 0)

        def ENDSWITH(self):
            return self.getToken(KqlParser.ENDSWITH, 0)

        def NOT_ENDSWITH(self):
            return self.getToken(KqlParser.NOT_ENDSWITH, 0)

        def ENDSWITH_CS(self):
            return self.getToken(KqlParser.ENDSWITH_CS, 0)

        def NOT_ENDSWITH_CS(self):
            return self.getToken(KqlParser.NOT_ENDSWITH_CS, 0)

        def MATCHES_REGEX(self):
            return self.getToken(KqlParser.MATCHES_REGEX, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_stringBinaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringBinaryOperator" ):
                listener.enterStringBinaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringBinaryOperator" ):
                listener.exitStringBinaryOperator(self)




    def stringBinaryOperator(self):

        localctx = KqlParser.StringBinaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_stringBinaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            localctx.OperatorToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.EQUALTILDE) | (1 << KqlParser.EXCLAIMATIONPOINT_TILDE) | (1 << KqlParser.CONTAINS) | (1 << KqlParser.CONTAINSCS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (KqlParser.CONTAINS_CS - 64)) | (1 << (KqlParser.ENDSWITH - 64)) | (1 << (KqlParser.ENDSWITH_CS - 64)) | (1 << (KqlParser.HAS - 64)) | (1 << (KqlParser.HAS_CS - 64)) | (1 << (KqlParser.HASPREFIX - 64)) | (1 << (KqlParser.HASPREFIX_CS - 64)) | (1 << (KqlParser.HASSUFFIX - 64)) | (1 << (KqlParser.HASSUFFIX_CS - 64)))) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (KqlParser.LIKE - 142)) | (1 << (KqlParser.LIKECS - 142)) | (1 << (KqlParser.MATCHES_REGEX - 142)) | (1 << (KqlParser.NOT_CONTAINS - 142)) | (1 << (KqlParser.NOT_CONTAINS_CS - 142)) | (1 << (KqlParser.NOT_ENDSWITH_CS - 142)) | (1 << (KqlParser.NOT_ENDSWITH - 142)) | (1 << (KqlParser.NOT_HAS - 142)) | (1 << (KqlParser.NOT_HAS_CS - 142)) | (1 << (KqlParser.NOT_HASPREFIX - 142)) | (1 << (KqlParser.NOT_HASPREFIX_CS - 142)) | (1 << (KqlParser.NOT_HASSUFFIX - 142)) | (1 << (KqlParser.NOT_HASSUFFIX_CS - 142)) | (1 << (KqlParser.NOT_STARTSWITH - 142)) | (1 << (KqlParser.NOT_STARTSWITH_CS - 142)) | (1 << (KqlParser.NOTCONTAINS - 142)) | (1 << (KqlParser.NOTCONTAINSCS - 142)) | (1 << (KqlParser.NOTLIKE - 142)) | (1 << (KqlParser.NOTLIKECS - 142)))) != 0) or _la==KqlParser.STARTSWITH or _la==KqlParser.STARTSWITH_CS):
                localctx.OperatorToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringStarOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LeftStarToken = None # Token
            self.Operator = None # StringBinaryOperatorContext
            self.Right = None # InvocationExpressionContext

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def stringBinaryOperator(self):
            return self.getTypedRuleContext(KqlParser.StringBinaryOperatorContext,0)


        def invocationExpression(self):
            return self.getTypedRuleContext(KqlParser.InvocationExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_stringStarOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringStarOperatorExpression" ):
                listener.enterStringStarOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringStarOperatorExpression" ):
                listener.exitStringStarOperatorExpression(self)




    def stringStarOperatorExpression(self):

        localctx = KqlParser.StringStarOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_stringStarOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2311
            localctx.LeftStarToken = self.match(KqlParser.ASTERISK)
            self.state = 2312
            localctx.Operator = self.stringBinaryOperator()
            self.state = 2313
            localctx.Right = self.invocationExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvocationExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OperatorToken = None # Token
            self.Expression = None # FunctionCallOrPathExpressionContext

        def functionCallOrPathExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallOrPathExpressionContext,0)


        def PLUS(self):
            return self.getToken(KqlParser.PLUS, 0)

        def DASH(self):
            return self.getToken(KqlParser.DASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_invocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvocationExpression" ):
                listener.enterInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvocationExpression" ):
                listener.exitInvocationExpression(self)




    def invocationExpression(self):

        localctx = KqlParser.InvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_invocationExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.DASH or _la==KqlParser.PLUS:
                self.state = 2315
                localctx.OperatorToken = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==KqlParser.DASH or _la==KqlParser.PLUS):
                    localctx.OperatorToken = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2318
            localctx.Expression = self.functionCallOrPathExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallOrPathRoot(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallOrPathRootContext,0)


        def functionCallOrPathPathExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallOrPathPathExpressionContext,0)


        def toTableExpression(self):
            return self.getTypedRuleContext(KqlParser.ToTableExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_functionCallOrPathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathExpression" ):
                listener.enterFunctionCallOrPathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathExpression" ):
                listener.exitFunctionCallOrPathExpression(self)




    def functionCallOrPathExpression(self):

        localctx = KqlParser.FunctionCallOrPathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_functionCallOrPathExpression)
        try:
            self.state = 2323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2320
                self.functionCallOrPathRoot()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2321
                self.functionCallOrPathPathExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2322
                self.toTableExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathRootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotCompositeFunctionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.DotCompositeFunctionCallExpressionContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(KqlParser.PrimaryExpressionContext,0)


        def toScalarExpression(self):
            return self.getTypedRuleContext(KqlParser.ToScalarExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_functionCallOrPathRoot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathRoot" ):
                listener.enterFunctionCallOrPathRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathRoot" ):
                listener.exitFunctionCallOrPathRoot(self)




    def functionCallOrPathRoot(self):

        localctx = KqlParser.FunctionCallOrPathRootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_functionCallOrPathRoot)
        try:
            self.state = 2328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2325
                self.dotCompositeFunctionCallExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2326
                self.primaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2327
                self.toScalarExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathPathExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # FunctionCallOrPathRootContext
            self._functionCallOrPathOperation = None # FunctionCallOrPathOperationContext
            self.Operations = list() # of FunctionCallOrPathOperationContexts

        def functionCallOrPathRoot(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallOrPathRootContext,0)


        def functionCallOrPathOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.FunctionCallOrPathOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.FunctionCallOrPathOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_functionCallOrPathPathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathPathExpression" ):
                listener.enterFunctionCallOrPathPathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathPathExpression" ):
                listener.exitFunctionCallOrPathPathExpression(self)




    def functionCallOrPathPathExpression(self):

        localctx = KqlParser.FunctionCallOrPathPathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_functionCallOrPathPathExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            localctx.Expression = self.functionCallOrPathRoot()
            self.state = 2332 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2331
                localctx._functionCallOrPathOperation = self.functionCallOrPathOperation()
                localctx.Operations.append(localctx._functionCallOrPathOperation)
                self.state = 2334 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==KqlParser.DOT or _la==KqlParser.OPENBRACKET):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionalCallOrPathPathOperation(self):
            return self.getTypedRuleContext(KqlParser.FunctionalCallOrPathPathOperationContext,0)


        def functionCallOrPathElementOperation(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallOrPathElementOperationContext,0)


        def legacyFunctionCallOrPathElementOperation(self):
            return self.getTypedRuleContext(KqlParser.LegacyFunctionCallOrPathElementOperationContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_functionCallOrPathOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathOperation" ):
                listener.enterFunctionCallOrPathOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathOperation" ):
                listener.exitFunctionCallOrPathOperation(self)




    def functionCallOrPathOperation(self):

        localctx = KqlParser.FunctionCallOrPathOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_functionCallOrPathOperation)
        try:
            self.state = 2339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2336
                self.functionalCallOrPathPathOperation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2337
                self.functionCallOrPathElementOperation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2338
                self.legacyFunctionCallOrPathElementOperation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionalCallOrPathPathOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_functionalCallOrPathPathOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionalCallOrPathPathOperation" ):
                listener.enterFunctionalCallOrPathPathOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionalCallOrPathPathOperation" ):
                listener.exitFunctionalCallOrPathPathOperation(self)




    def functionalCallOrPathPathOperation(self):

        localctx = KqlParser.FunctionalCallOrPathPathOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_functionalCallOrPathPathOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            self.match(KqlParser.DOT)
            self.state = 2342
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOrPathElementOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Element = None # UnnamedExpressionContext

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_functionCallOrPathElementOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOrPathElementOperation" ):
                listener.enterFunctionCallOrPathElementOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOrPathElementOperation" ):
                listener.exitFunctionCallOrPathElementOperation(self)




    def functionCallOrPathElementOperation(self):

        localctx = KqlParser.FunctionCallOrPathElementOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_functionCallOrPathElementOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2344
            self.match(KqlParser.OPENBRACKET)
            self.state = 2345
            localctx.Element = self.unnamedExpression()
            self.state = 2346
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LegacyFunctionCallOrPathElementOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Element = None # UnnamedExpressionContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_legacyFunctionCallOrPathElementOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyFunctionCallOrPathElementOperation" ):
                listener.enterLegacyFunctionCallOrPathElementOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyFunctionCallOrPathElementOperation" ):
                listener.exitLegacyFunctionCallOrPathElementOperation(self)




    def legacyFunctionCallOrPathElementOperation(self):

        localctx = KqlParser.LegacyFunctionCallOrPathElementOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_legacyFunctionCallOrPathElementOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2348
            self.match(KqlParser.DOT)
            self.state = 2349
            self.match(KqlParser.OPENBRACKET)
            self.state = 2350
            localctx.Element = self.unnamedExpression()
            self.state = 2351
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToScalarExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # PipeExpressionContext

        def TOSCALAR(self):
            return self.getToken(KqlParser.TOSCALAR, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def pipeExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeExpressionContext,0)


        def noOptimizationParameter(self):
            return self.getTypedRuleContext(KqlParser.NoOptimizationParameterContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_toScalarExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterToScalarExpression" ):
                listener.enterToScalarExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitToScalarExpression" ):
                listener.exitToScalarExpression(self)




    def toScalarExpression(self):

        localctx = KqlParser.ToScalarExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_toScalarExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.match(KqlParser.TOSCALAR)
            self.state = 2355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.KIND:
                self.state = 2354
                self.noOptimizationParameter()


            self.state = 2357
            self.match(KqlParser.OPENPAREN)
            self.state = 2358
            localctx.Expression = self.pipeExpression()
            self.state = 2359
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToTableExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # PipeExpressionContext

        def TOTABLE(self):
            return self.getToken(KqlParser.TOTABLE, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def pipeExpression(self):
            return self.getTypedRuleContext(KqlParser.PipeExpressionContext,0)


        def noOptimizationParameter(self):
            return self.getTypedRuleContext(KqlParser.NoOptimizationParameterContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_toTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterToTableExpression" ):
                listener.enterToTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitToTableExpression" ):
                listener.exitToTableExpression(self)




    def toTableExpression(self):

        localctx = KqlParser.ToTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_toTableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2361
            self.match(KqlParser.TOTABLE)
            self.state = 2363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.KIND:
                self.state = 2362
                self.noOptimizationParameter()


            self.state = 2365
            self.match(KqlParser.OPENPAREN)
            self.state = 2366
            localctx.Expression = self.pipeExpression()
            self.state = 2367
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoOptimizationParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def NOOPTIMIZATION(self):
            return self.getToken(KqlParser.NOOPTIMIZATION, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_noOptimizationParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoOptimizationParameter" ):
                listener.enterNoOptimizationParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoOptimizationParameter" ):
                listener.exitNoOptimizationParameter(self)




    def noOptimizationParameter(self):

        localctx = KqlParser.NoOptimizationParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_noOptimizationParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2369
            self.match(KqlParser.KIND)
            self.state = 2370
            self.match(KqlParser.EQUAL)
            self.state = 2371
            self.match(KqlParser.NOOPTIMIZATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotCompositeFunctionCallExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Call = None # FunctionCallExpressionContext
            self._dotCompositeFunctionCallOperation = None # DotCompositeFunctionCallOperationContext
            self.Operations = list() # of DotCompositeFunctionCallOperationContexts

        def functionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallExpressionContext,0)


        def dotCompositeFunctionCallOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.DotCompositeFunctionCallOperationContext)
            else:
                return self.getTypedRuleContext(KqlParser.DotCompositeFunctionCallOperationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_dotCompositeFunctionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotCompositeFunctionCallExpression" ):
                listener.enterDotCompositeFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotCompositeFunctionCallExpression" ):
                listener.exitDotCompositeFunctionCallExpression(self)




    def dotCompositeFunctionCallExpression(self):

        localctx = KqlParser.DotCompositeFunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_dotCompositeFunctionCallExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            localctx.Call = self.functionCallExpression()
            self.state = 2377
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2374
                    localctx._dotCompositeFunctionCallOperation = self.dotCompositeFunctionCallOperation()
                    localctx.Operations.append(localctx._dotCompositeFunctionCallOperation) 
                self.state = 2379
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotCompositeFunctionCallOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Call = None # FunctionCallExpressionContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def functionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.FunctionCallExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_dotCompositeFunctionCallOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotCompositeFunctionCallOperation" ):
                listener.enterDotCompositeFunctionCallOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotCompositeFunctionCallOperation" ):
                listener.exitDotCompositeFunctionCallOperation(self)




    def dotCompositeFunctionCallOperation(self):

        localctx = KqlParser.DotCompositeFunctionCallOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_dotCompositeFunctionCallOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2380
            self.match(KqlParser.DOT)
            self.state = 2381
            localctx.Call = self.functionCallExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedFunctionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedFunctionCallExpressionContext,0)


        def countExpression(self):
            return self.getTypedRuleContext(KqlParser.CountExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_functionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpression" ):
                listener.enterFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpression" ):
                listener.exitFunctionCallExpression(self)




    def functionCallExpression(self):

        localctx = KqlParser.FunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_functionCallExpression)
        try:
            self.state = 2385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.OPENBRACKET, KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID, KqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2383
                self.namedFunctionCallExpression()
                pass
            elif token in [KqlParser.COUNT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2384
                self.countExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedFunctionCallExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # SimpleNameReferenceContext
            self._argumentExpression = None # ArgumentExpressionContext
            self.Arguments = list() # of ArgumentExpressionContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def argumentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ArgumentExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.ArgumentExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_namedFunctionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedFunctionCallExpression" ):
                listener.enterNamedFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedFunctionCallExpression" ):
                listener.exitNamedFunctionCallExpression(self)




    def namedFunctionCallExpression(self):

        localctx = KqlParser.NamedFunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_namedFunctionCallExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2387
            localctx.Name = self.simpleNameReference()
            self.state = 2388
            self.match(KqlParser.OPENPAREN)
            self.state = 2397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.ASTERISK) | (1 << KqlParser.DASH) | (1 << KqlParser.OPENBRACKET) | (1 << KqlParser.OPENPAREN) | (1 << KqlParser.PLUS) | (1 << KqlParser.ACCESS) | (1 << KqlParser.ACCUMULATE) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AS) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.BY) | (1 << KqlParser.CLUSTER) | (1 << KqlParser.CONSUME) | (1 << KqlParser.CONTAINS))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (KqlParser.CONTEXTUAL_DATATABLE - 65)) | (1 << (KqlParser.COUNT - 65)) | (1 << (KqlParser.DATABASE - 65)) | (1 << (KqlParser.DATATABLE - 65)) | (1 << (KqlParser.DECLARE - 65)) | (1 << (KqlParser.DEFAULT - 65)) | (1 << (KqlParser.DELTA - 65)) | (1 << (KqlParser.DISTINCT - 65)) | (1 << (KqlParser.EDGES - 65)) | (1 << (KqlParser.EVALUATE - 65)) | (1 << (KqlParser.EXECUTE - 65)) | (1 << (KqlParser.EXTEND - 65)) | (1 << (KqlParser.EXTERNALDATA - 65)) | (1 << (KqlParser.EXTERNAL_DATA - 65)) | (1 << (KqlParser.FACET - 65)) | (1 << (KqlParser.FILTER - 65)) | (1 << (KqlParser.FIND - 65)) | (1 << (KqlParser.FORK - 65)) | (1 << (KqlParser.FROM - 65)) | (1 << (KqlParser.HAS - 65)) | (1 << (KqlParser.HIDDEN_ - 65)) | (1 << (KqlParser.HOT - 65)) | (1 << (KqlParser.HOTDATA - 65)) | (1 << (KqlParser.HOTINDEX - 65)) | (1 << (KqlParser.ID - 65)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KqlParser.IN - 130)) | (1 << (KqlParser.INTO - 130)) | (1 << (KqlParser.INVOKE - 130)) | (1 << (KqlParser.LEGEND - 130)) | (1 << (KqlParser.LET - 130)) | (1 << (KqlParser.LIMIT - 130)) | (1 << (KqlParser.LINEAR - 130)) | (1 << (KqlParser.LIST - 130)) | (1 << (KqlParser.LOOKUP - 130)) | (1 << (KqlParser.LOG - 130)) | (1 << (KqlParser.MAP - 130)) | (1 << (KqlParser.MATERIALIZE - 130)) | (1 << (KqlParser.MATERIALIZED_VIEW_COMBINE - 130)) | (1 << (KqlParser.NODES - 130)) | (1 << (KqlParser.NONE - 130)) | (1 << (KqlParser.NULL - 130)) | (1 << (KqlParser.NULLS - 130)) | (1 << (KqlParser.OF - 130)) | (1 << (KqlParser.ON - 130)) | (1 << (KqlParser.OPTIONAL - 130)) | (1 << (KqlParser.OUTPUT - 130)) | (1 << (KqlParser.PACK - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (KqlParser.PARSE - 194)) | (1 << (KqlParser.PARTITION - 194)) | (1 << (KqlParser.PARTITIONBY - 194)) | (1 << (KqlParser.PATTERN - 194)) | (1 << (KqlParser.PLUGIN - 194)) | (1 << (KqlParser.PRINT - 194)) | (1 << (KqlParser.QUERYPARAMETERS - 194)) | (1 << (KqlParser.RANGE - 194)) | (1 << (KqlParser.REDUCE - 194)) | (1 << (KqlParser.RENDER - 194)) | (1 << (KqlParser.REPLACE - 194)) | (1 << (KqlParser.RESTRICT - 194)) | (1 << (KqlParser.SAMPLE - 194)) | (1 << (KqlParser.SAMPLE_DISTINCT - 194)) | (1 << (KqlParser.SCAN - 194)) | (1 << (KqlParser.SEARCH - 194)) | (1 << (KqlParser.SERIALIZE - 194)) | (1 << (KqlParser.SERIES - 194)) | (1 << (KqlParser.SET - 194)) | (1 << (KqlParser.SORT - 194)) | (1 << (KqlParser.STACKED - 194)) | (1 << (KqlParser.STACKED100 - 194)) | (1 << (KqlParser.STEP - 194)) | (1 << (KqlParser.SUMMARIZE - 194)) | (1 << (KqlParser.TAKE - 194)) | (1 << (KqlParser.THRESHOLD - 194)) | (1 << (KqlParser.TITLE - 194)) | (1 << (KqlParser.TO - 194)) | (1 << (KqlParser.TOP - 194)) | (1 << (KqlParser.TOP_HITTERS - 194)) | (1 << (KqlParser.TOP_NESTED - 194)) | (1 << (KqlParser.TOSCALAR - 194)) | (1 << (KqlParser.TOTABLE - 194)) | (1 << (KqlParser.TYPEOF - 194)) | (1 << (KqlParser.UNSTACKED - 194)) | (1 << (KqlParser.UUID - 194)) | (1 << (KqlParser.VIEW - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (KqlParser.VISIBLE - 258)) | (1 << (KqlParser.WHERE - 258)) | (1 << (KqlParser.WITH - 258)) | (1 << (KqlParser.XAXIS - 258)) | (1 << (KqlParser.XCOLUMN - 258)) | (1 << (KqlParser.XMAX - 258)) | (1 << (KqlParser.XMIN - 258)) | (1 << (KqlParser.XTITLE - 258)) | (1 << (KqlParser.YAXIS - 258)) | (1 << (KqlParser.YCOLUMNS - 258)) | (1 << (KqlParser.YMAX - 258)) | (1 << (KqlParser.YMIN - 258)) | (1 << (KqlParser.YSPLIT - 258)) | (1 << (KqlParser.YTITLE - 258)) | (1 << (KqlParser.BOOL - 258)) | (1 << (KqlParser.DYNAMIC - 258)) | (1 << (KqlParser.GUID - 258)) | (1 << (KqlParser.LONGLITERAL - 258)) | (1 << (KqlParser.INTLITERAL - 258)) | (1 << (KqlParser.REALLITERAL - 258)) | (1 << (KqlParser.DECIMALLITERAL - 258)) | (1 << (KqlParser.STRINGLITERAL - 258)) | (1 << (KqlParser.BOOLEANLITERAL - 258)) | (1 << (KqlParser.DATETIMELITERAL - 258)) | (1 << (KqlParser.TIMESPANLITERAL - 258)) | (1 << (KqlParser.TYPELITERAL - 258)) | (1 << (KqlParser.GUIDLITERAL - 258)) | (1 << (KqlParser.IDENTIFIER - 258)))) != 0):
                self.state = 2389
                localctx._argumentExpression = self.argumentExpression()
                localctx.Arguments.append(localctx._argumentExpression)
                self.state = 2394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KqlParser.COMMA:
                    self.state = 2390
                    self.match(KqlParser.COMMA)
                    self.state = 2391
                    localctx._argumentExpression = self.argumentExpression()
                    localctx.Arguments.append(localctx._argumentExpression)
                    self.state = 2396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2399
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def starExpression(self):
            return self.getTypedRuleContext(KqlParser.StarExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_argumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpression" ):
                listener.enterArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpression" ):
                listener.exitArgumentExpression(self)




    def argumentExpression(self):

        localctx = KqlParser.ArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_argumentExpression)
        try:
            self.state = 2403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2401
                self.namedExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2402
                self.starExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # NamedExpressionContext

        def COUNT(self):
            return self.getToken(KqlParser.COUNT, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def namedExpression(self):
            return self.getTypedRuleContext(KqlParser.NamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_countExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountExpression" ):
                listener.enterCountExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountExpression" ):
                listener.exitCountExpression(self)




    def countExpression(self):

        localctx = KqlParser.CountExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_countExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            self.match(KqlParser.COUNT)
            self.state = 2406
            self.match(KqlParser.OPENPAREN)
            self.state = 2408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.ASTERISK) | (1 << KqlParser.DASH) | (1 << KqlParser.OPENBRACKET) | (1 << KqlParser.OPENPAREN) | (1 << KqlParser.PLUS) | (1 << KqlParser.ACCESS) | (1 << KqlParser.ACCUMULATE) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AS) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.BY) | (1 << KqlParser.CLUSTER) | (1 << KqlParser.CONSUME) | (1 << KqlParser.CONTAINS))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (KqlParser.CONTEXTUAL_DATATABLE - 65)) | (1 << (KqlParser.COUNT - 65)) | (1 << (KqlParser.DATABASE - 65)) | (1 << (KqlParser.DATATABLE - 65)) | (1 << (KqlParser.DECLARE - 65)) | (1 << (KqlParser.DEFAULT - 65)) | (1 << (KqlParser.DELTA - 65)) | (1 << (KqlParser.DISTINCT - 65)) | (1 << (KqlParser.EDGES - 65)) | (1 << (KqlParser.EVALUATE - 65)) | (1 << (KqlParser.EXECUTE - 65)) | (1 << (KqlParser.EXTEND - 65)) | (1 << (KqlParser.EXTERNALDATA - 65)) | (1 << (KqlParser.EXTERNAL_DATA - 65)) | (1 << (KqlParser.FACET - 65)) | (1 << (KqlParser.FILTER - 65)) | (1 << (KqlParser.FIND - 65)) | (1 << (KqlParser.FORK - 65)) | (1 << (KqlParser.FROM - 65)) | (1 << (KqlParser.HAS - 65)) | (1 << (KqlParser.HIDDEN_ - 65)) | (1 << (KqlParser.HOT - 65)) | (1 << (KqlParser.HOTDATA - 65)) | (1 << (KqlParser.HOTINDEX - 65)) | (1 << (KqlParser.ID - 65)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KqlParser.IN - 130)) | (1 << (KqlParser.INTO - 130)) | (1 << (KqlParser.INVOKE - 130)) | (1 << (KqlParser.LEGEND - 130)) | (1 << (KqlParser.LET - 130)) | (1 << (KqlParser.LIMIT - 130)) | (1 << (KqlParser.LINEAR - 130)) | (1 << (KqlParser.LIST - 130)) | (1 << (KqlParser.LOOKUP - 130)) | (1 << (KqlParser.LOG - 130)) | (1 << (KqlParser.MAP - 130)) | (1 << (KqlParser.MATERIALIZE - 130)) | (1 << (KqlParser.MATERIALIZED_VIEW_COMBINE - 130)) | (1 << (KqlParser.NODES - 130)) | (1 << (KqlParser.NONE - 130)) | (1 << (KqlParser.NULL - 130)) | (1 << (KqlParser.NULLS - 130)) | (1 << (KqlParser.OF - 130)) | (1 << (KqlParser.ON - 130)) | (1 << (KqlParser.OPTIONAL - 130)) | (1 << (KqlParser.OUTPUT - 130)) | (1 << (KqlParser.PACK - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (KqlParser.PARSE - 194)) | (1 << (KqlParser.PARTITION - 194)) | (1 << (KqlParser.PARTITIONBY - 194)) | (1 << (KqlParser.PATTERN - 194)) | (1 << (KqlParser.PLUGIN - 194)) | (1 << (KqlParser.PRINT - 194)) | (1 << (KqlParser.QUERYPARAMETERS - 194)) | (1 << (KqlParser.RANGE - 194)) | (1 << (KqlParser.REDUCE - 194)) | (1 << (KqlParser.RENDER - 194)) | (1 << (KqlParser.REPLACE - 194)) | (1 << (KqlParser.RESTRICT - 194)) | (1 << (KqlParser.SAMPLE - 194)) | (1 << (KqlParser.SAMPLE_DISTINCT - 194)) | (1 << (KqlParser.SCAN - 194)) | (1 << (KqlParser.SEARCH - 194)) | (1 << (KqlParser.SERIALIZE - 194)) | (1 << (KqlParser.SERIES - 194)) | (1 << (KqlParser.SET - 194)) | (1 << (KqlParser.SORT - 194)) | (1 << (KqlParser.STACKED - 194)) | (1 << (KqlParser.STACKED100 - 194)) | (1 << (KqlParser.STEP - 194)) | (1 << (KqlParser.SUMMARIZE - 194)) | (1 << (KqlParser.TAKE - 194)) | (1 << (KqlParser.THRESHOLD - 194)) | (1 << (KqlParser.TITLE - 194)) | (1 << (KqlParser.TO - 194)) | (1 << (KqlParser.TOP - 194)) | (1 << (KqlParser.TOP_HITTERS - 194)) | (1 << (KqlParser.TOP_NESTED - 194)) | (1 << (KqlParser.TOSCALAR - 194)) | (1 << (KqlParser.TOTABLE - 194)) | (1 << (KqlParser.TYPEOF - 194)) | (1 << (KqlParser.UNSTACKED - 194)) | (1 << (KqlParser.UUID - 194)) | (1 << (KqlParser.VIEW - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (KqlParser.VISIBLE - 258)) | (1 << (KqlParser.WHERE - 258)) | (1 << (KqlParser.WITH - 258)) | (1 << (KqlParser.XAXIS - 258)) | (1 << (KqlParser.XCOLUMN - 258)) | (1 << (KqlParser.XMAX - 258)) | (1 << (KqlParser.XMIN - 258)) | (1 << (KqlParser.XTITLE - 258)) | (1 << (KqlParser.YAXIS - 258)) | (1 << (KqlParser.YCOLUMNS - 258)) | (1 << (KqlParser.YMAX - 258)) | (1 << (KqlParser.YMIN - 258)) | (1 << (KqlParser.YSPLIT - 258)) | (1 << (KqlParser.YTITLE - 258)) | (1 << (KqlParser.BOOL - 258)) | (1 << (KqlParser.DYNAMIC - 258)) | (1 << (KqlParser.GUID - 258)) | (1 << (KqlParser.LONGLITERAL - 258)) | (1 << (KqlParser.INTLITERAL - 258)) | (1 << (KqlParser.REALLITERAL - 258)) | (1 << (KqlParser.DECIMALLITERAL - 258)) | (1 << (KqlParser.STRINGLITERAL - 258)) | (1 << (KqlParser.BOOLEANLITERAL - 258)) | (1 << (KqlParser.DATETIMELITERAL - 258)) | (1 << (KqlParser.TIMESPANLITERAL - 258)) | (1 << (KqlParser.TYPELITERAL - 258)) | (1 << (KqlParser.GUIDLITERAL - 258)) | (1 << (KqlParser.IDENTIFIER - 258)))) != 0):
                self.state = 2407
                localctx.Expression = self.namedExpression()


            self.state = 2410
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StarExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_starExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarExpression" ):
                listener.enterStarExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarExpression" ):
                listener.exitStarExpression(self)




    def starExpression(self):

        localctx = KqlParser.StarExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_starExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            self.match(KqlParser.ASTERISK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.UnsignedLiteralExpressionContext,0)


        def nameReferenceWithDataScope(self):
            return self.getTypedRuleContext(KqlParser.NameReferenceWithDataScopeContext,0)


        def dataTableExpression(self):
            return self.getTypedRuleContext(KqlParser.DataTableExpressionContext,0)


        def externalDataExpression(self):
            return self.getTypedRuleContext(KqlParser.ExternalDataExpressionContext,0)


        def contextualDataTableExpression(self):
            return self.getTypedRuleContext(KqlParser.ContextualDataTableExpressionContext,0)


        def materializedViewCombineExpression(self):
            return self.getTypedRuleContext(KqlParser.MaterializedViewCombineExpressionContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(KqlParser.ParenthesizedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = KqlParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_primaryExpression)
        try:
            self.state = 2421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.DYNAMIC, KqlParser.LONGLITERAL, KqlParser.INTLITERAL, KqlParser.REALLITERAL, KqlParser.DECIMALLITERAL, KqlParser.STRINGLITERAL, KqlParser.BOOLEANLITERAL, KqlParser.DATETIMELITERAL, KqlParser.TIMESPANLITERAL, KqlParser.TYPELITERAL, KqlParser.GUIDLITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2414
                self.unsignedLiteralExpression()
                pass
            elif token in [KqlParser.OPENBRACKET, KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID, KqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2415
                self.nameReferenceWithDataScope()
                pass
            elif token in [KqlParser.DATATABLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2416
                self.dataTableExpression()
                pass
            elif token in [KqlParser.EXTERNALDATA, KqlParser.EXTERNAL_DATA]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2417
                self.externalDataExpression()
                pass
            elif token in [KqlParser.CONTEXTUAL_DATATABLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2418
                self.contextualDataTableExpression()
                pass
            elif token in [KqlParser.MATERIALIZED_VIEW_COMBINE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2419
                self.materializedViewCombineExpression()
                pass
            elif token in [KqlParser.OPENPAREN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2420
                self.parenthesizedExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameReferenceWithDataScopeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # SimpleNameReferenceContext
            self.Scope = None # DataScopeClauseContext

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def dataScopeClause(self):
            return self.getTypedRuleContext(KqlParser.DataScopeClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_nameReferenceWithDataScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameReferenceWithDataScope" ):
                listener.enterNameReferenceWithDataScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameReferenceWithDataScope" ):
                listener.exitNameReferenceWithDataScope(self)




    def nameReferenceWithDataScope(self):

        localctx = KqlParser.NameReferenceWithDataScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_nameReferenceWithDataScope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2423
            localctx.Name = self.simpleNameReference()
            self.state = 2425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.DATASCOPE:
                self.state = 2424
                localctx.Scope = self.dataScopeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataScopeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.KindToken = None # Token

        def DATASCOPE(self):
            return self.getToken(KqlParser.DATASCOPE, 0)

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def HOTCACHE(self):
            return self.getToken(KqlParser.HOTCACHE, 0)

        def ALL(self):
            return self.getToken(KqlParser.ALL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_dataScopeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataScopeClause" ):
                listener.enterDataScopeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataScopeClause" ):
                listener.exitDataScopeClause(self)




    def dataScopeClause(self):

        localctx = KqlParser.DataScopeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_dataScopeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2427
            self.match(KqlParser.DATASCOPE)
            self.state = 2428
            self.match(KqlParser.EQUAL)
            self.state = 2429
            localctx.KindToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.ALL or _la==KqlParser.HOTCACHE):
                localctx.KindToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)




    def parenthesizedExpression(self):

        localctx = KqlParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_parenthesizedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            self.match(KqlParser.OPENPAREN)
            self.state = 2432
            localctx.Expression = self.expression()
            self.state = 2433
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # SimpleNameReferenceContext
            self.FromExpression = None # UnnamedExpressionContext
            self.ToExpression = None # UnnamedExpressionContext
            self.StepExpression = None # UnnamedExpressionContext

        def RANGE(self):
            return self.getToken(KqlParser.RANGE, 0)

        def FROM(self):
            return self.getToken(KqlParser.FROM, 0)

        def TO(self):
            return self.getToken(KqlParser.TO, 0)

        def STEP(self):
            return self.getToken(KqlParser.STEP, 0)

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def unnamedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.UnnamedExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)




    def rangeExpression(self):

        localctx = KqlParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_rangeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2435
            self.match(KqlParser.RANGE)
            self.state = 2436
            localctx.Expression = self.simpleNameReference()
            self.state = 2437
            self.match(KqlParser.FROM)
            self.state = 2438
            localctx.FromExpression = self.unnamedExpression()
            self.state = 2439
            self.match(KqlParser.TO)
            self.state = 2440
            localctx.ToExpression = self.unnamedExpression()
            self.state = 2441
            self.match(KqlParser.STEP)
            self.state = 2442
            localctx.StepExpression = self.unnamedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entityNameReference(self):
            return self.getTypedRuleContext(KqlParser.EntityNameReferenceContext,0)


        def entityPathOrElementExpression(self):
            return self.getTypedRuleContext(KqlParser.EntityPathOrElementExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_entityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityExpression" ):
                listener.enterEntityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityExpression" ):
                listener.exitEntityExpression(self)




    def entityExpression(self):

        localctx = KqlParser.EntityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_entityExpression)
        try:
            self.state = 2446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2444
                self.entityNameReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2445
                self.entityPathOrElementExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityPathOrElementExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # EntityNameReferenceContext
            self._entityPathOrElementOperator = None # EntityPathOrElementOperatorContext
            self.Operators = list() # of EntityPathOrElementOperatorContexts

        def entityNameReference(self):
            return self.getTypedRuleContext(KqlParser.EntityNameReferenceContext,0)


        def entityPathOrElementOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.EntityPathOrElementOperatorContext)
            else:
                return self.getTypedRuleContext(KqlParser.EntityPathOrElementOperatorContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_entityPathOrElementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityPathOrElementExpression" ):
                listener.enterEntityPathOrElementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityPathOrElementExpression" ):
                listener.exitEntityPathOrElementExpression(self)




    def entityPathOrElementExpression(self):

        localctx = KqlParser.EntityPathOrElementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_entityPathOrElementExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2448
            localctx.Expression = self.entityNameReference()
            self.state = 2450 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2449
                localctx._entityPathOrElementOperator = self.entityPathOrElementOperator()
                localctx.Operators.append(localctx._entityPathOrElementOperator)
                self.state = 2452 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==KqlParser.DOT or _la==KqlParser.OPENBRACKET):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityPathOrElementOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Path = None # EntityPathOperatorContext
            self.Element = None # EntityElementOperatorContext
            self.PathElement = None # LegacyEntityPathElementOperatorContext

        def entityPathOperator(self):
            return self.getTypedRuleContext(KqlParser.EntityPathOperatorContext,0)


        def entityElementOperator(self):
            return self.getTypedRuleContext(KqlParser.EntityElementOperatorContext,0)


        def legacyEntityPathElementOperator(self):
            return self.getTypedRuleContext(KqlParser.LegacyEntityPathElementOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_entityPathOrElementOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityPathOrElementOperator" ):
                listener.enterEntityPathOrElementOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityPathOrElementOperator" ):
                listener.exitEntityPathOrElementOperator(self)




    def entityPathOrElementOperator(self):

        localctx = KqlParser.EntityPathOrElementOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_entityPathOrElementOperator)
        try:
            self.state = 2457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2454
                localctx.Path = self.entityPathOperator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2455
                localctx.Element = self.entityElementOperator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2456
                localctx.PathElement = self.legacyEntityPathElementOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityPathOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # EntityNameContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def entityName(self):
            return self.getTypedRuleContext(KqlParser.EntityNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_entityPathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityPathOperator" ):
                listener.enterEntityPathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityPathOperator" ):
                listener.exitEntityPathOperator(self)




    def entityPathOperator(self):

        localctx = KqlParser.EntityPathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_entityPathOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2459
            self.match(KqlParser.DOT)
            self.state = 2460
            localctx.Name = self.entityName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityElementOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # UnnamedExpressionContext

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_entityElementOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityElementOperator" ):
                listener.enterEntityElementOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityElementOperator" ):
                listener.exitEntityElementOperator(self)




    def entityElementOperator(self):

        localctx = KqlParser.EntityElementOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_entityElementOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2462
            self.match(KqlParser.OPENBRACKET)
            self.state = 2463
            localctx.Expression = self.unnamedExpression()
            self.state = 2464
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LegacyEntityPathElementOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # UnnamedExpressionContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def unnamedExpression(self):
            return self.getTypedRuleContext(KqlParser.UnnamedExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_legacyEntityPathElementOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyEntityPathElementOperator" ):
                listener.enterLegacyEntityPathElementOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyEntityPathElementOperator" ):
                listener.exitLegacyEntityPathElementOperator(self)




    def legacyEntityPathElementOperator(self):

        localctx = KqlParser.LegacyEntityPathElementOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_legacyEntityPathElementOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2466
            self.match(KqlParser.DOT)
            self.state = 2467
            self.match(KqlParser.OPENBRACKET)
            self.state = 2468
            localctx.Expression = self.unnamedExpression()
            self.state = 2469
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ATSIGN = None # AtSignNameContext
            self.Name = None # IdentifierOrExtendedKeywordOrEscapedNameContext
            self.ExtendedName = None # ExtendedPathNameContext

        def atSignName(self):
            return self.getTypedRuleContext(KqlParser.AtSignNameContext,0)


        def identifierOrExtendedKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,0)


        def extendedPathName(self):
            return self.getTypedRuleContext(KqlParser.ExtendedPathNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_entityName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityName" ):
                listener.enterEntityName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityName" ):
                listener.exitEntityName(self)




    def entityName(self):

        localctx = KqlParser.EntityNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_entityName)
        try:
            self.state = 2474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.ATSIGN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2471
                localctx.ATSIGN = self.atSignName()
                pass
            elif token in [KqlParser.OPENBRACKET, KqlParser.ACCESS, KqlParser.ACCUMULATE, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AS, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.BY, KqlParser.CLUSTER, KqlParser.CONSUME, KqlParser.CONTAINS, KqlParser.COUNT, KqlParser.DATABASE, KqlParser.DATATABLE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.DISTINCT, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.EXTEND, KqlParser.EXTERNALDATA, KqlParser.FACET, KqlParser.FILTER, KqlParser.FIND, KqlParser.FORK, KqlParser.FROM, KqlParser.HAS, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.IN, KqlParser.INTO, KqlParser.INVOKE, KqlParser.LEGEND, KqlParser.LET, KqlParser.LIMIT, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.MATERIALIZE, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.OF, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARSE, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.PRINT, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SAMPLE, KqlParser.SAMPLE_DISTINCT, KqlParser.SCAN, KqlParser.SEARCH, KqlParser.SERIALIZE, KqlParser.SERIES, KqlParser.SET, KqlParser.SORT, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.SUMMARIZE, KqlParser.TAKE, KqlParser.THRESHOLD, KqlParser.TITLE, KqlParser.TO, KqlParser.TOP, KqlParser.TOP_HITTERS, KqlParser.TOP_NESTED, KqlParser.TOSCALAR, KqlParser.TOTABLE, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WHERE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID, KqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2472
                localctx.Name = self.identifierOrExtendedKeywordOrEscapedName()
                pass
            elif token in [KqlParser.KIND, KqlParser.WITHSOURCE, KqlParser.WITH_SOURCE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2473
                localctx.ExtendedName = self.extendedPathName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityNameReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # EntityNameContext

        def entityName(self):
            return self.getTypedRuleContext(KqlParser.EntityNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_entityNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityNameReference" ):
                listener.enterEntityNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityNameReference" ):
                listener.exitEntityNameReference(self)




    def entityNameReference(self):

        localctx = KqlParser.EntityNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_entityNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2476
            localctx.Name = self.entityName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtSignNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NameToken = None # Token

        def ATSIGN(self):
            return self.getToken(KqlParser.ATSIGN, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_atSignName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtSignName" ):
                listener.enterAtSignName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtSignName" ):
                listener.exitAtSignName(self)




    def atSignName(self):

        localctx = KqlParser.AtSignNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_atSignName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2478
            localctx.NameToken = self.match(KqlParser.ATSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedPathNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NameToken = None # Token

        def KIND(self):
            return self.getToken(KqlParser.KIND, 0)

        def WITHSOURCE(self):
            return self.getToken(KqlParser.WITHSOURCE, 0)

        def WITH_SOURCE(self):
            return self.getToken(KqlParser.WITH_SOURCE, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_extendedPathName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedPathName" ):
                listener.enterExtendedPathName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedPathName" ):
                listener.exitExtendedPathName(self)




    def extendedPathName(self):

        localctx = KqlParser.ExtendedPathNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_extendedPathName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2480
            localctx.NameToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.KIND or _la==KqlParser.WITHSOURCE or _la==KqlParser.WITH_SOURCE):
                localctx.NameToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedEntityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcardedNameReference(self):
            return self.getTypedRuleContext(KqlParser.WildcardedNameReferenceContext,0)


        def dotCompositeFunctionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.DotCompositeFunctionCallExpressionContext,0)


        def wildcardedPathExpression(self):
            return self.getTypedRuleContext(KqlParser.WildcardedPathExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedEntityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedEntityExpression" ):
                listener.enterWildcardedEntityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedEntityExpression" ):
                listener.exitWildcardedEntityExpression(self)




    def wildcardedEntityExpression(self):

        localctx = KqlParser.WildcardedEntityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_wildcardedEntityExpression)
        try:
            self.state = 2485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2482
                self.wildcardedNameReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2483
                self.dotCompositeFunctionCallExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2484
                self.wildcardedPathExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedPathExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # DotCompositeFunctionCallExpressionContext
            self.Name = None # WildcardedPathNameContext

        def DOT(self):
            return self.getToken(KqlParser.DOT, 0)

        def dotCompositeFunctionCallExpression(self):
            return self.getTypedRuleContext(KqlParser.DotCompositeFunctionCallExpressionContext,0)


        def wildcardedPathName(self):
            return self.getTypedRuleContext(KqlParser.WildcardedPathNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedPathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedPathExpression" ):
                listener.enterWildcardedPathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedPathExpression" ):
                listener.exitWildcardedPathExpression(self)




    def wildcardedPathExpression(self):

        localctx = KqlParser.WildcardedPathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_wildcardedPathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2487
            localctx.Expression = self.dotCompositeFunctionCallExpression()
            self.state = 2488
            self.match(KqlParser.DOT)
            self.state = 2489
            localctx.Name = self.wildcardedPathName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedPathNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcardedName(self):
            return self.getTypedRuleContext(KqlParser.WildcardedNameContext,0)


        def entityName(self):
            return self.getTypedRuleContext(KqlParser.EntityNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedPathName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedPathName" ):
                listener.enterWildcardedPathName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedPathName" ):
                listener.exitWildcardedPathName(self)




    def wildcardedPathName(self):

        localctx = KqlParser.WildcardedPathNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_wildcardedPathName)
        try:
            self.state = 2493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2491
                self.wildcardedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2492
                self.entityName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextualDataTableExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Id = None # Token
            self.Schema = None # RowSchemaContext

        def CONTEXTUAL_DATATABLE(self):
            return self.getToken(KqlParser.CONTEXTUAL_DATATABLE, 0)

        def GUIDLITERAL(self):
            return self.getToken(KqlParser.GUIDLITERAL, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(KqlParser.RowSchemaContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_contextualDataTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextualDataTableExpression" ):
                listener.enterContextualDataTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextualDataTableExpression" ):
                listener.exitContextualDataTableExpression(self)




    def contextualDataTableExpression(self):

        localctx = KqlParser.ContextualDataTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_contextualDataTableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2495
            self.match(KqlParser.CONTEXTUAL_DATATABLE)
            self.state = 2496
            localctx.Id = self.match(KqlParser.GUIDLITERAL)
            self.state = 2497
            localctx.Schema = self.rowSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTableExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Schema = None # RowSchemaContext
            self._literalExpression = None # LiteralExpressionContext
            self.Values = list() # of LiteralExpressionContexts

        def DATATABLE(self):
            return self.getToken(KqlParser.DATATABLE, 0)

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(KqlParser.RowSchemaContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def literalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.LiteralExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.LiteralExpressionContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_dataTableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTableExpression" ):
                listener.enterDataTableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTableExpression" ):
                listener.exitDataTableExpression(self)




    def dataTableExpression(self):

        localctx = KqlParser.DataTableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_dataTableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            self.match(KqlParser.DATATABLE)
            self.state = 2503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0):
                self.state = 2500
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 2505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2506
            localctx.Schema = self.rowSchema()
            self.state = 2507
            self.match(KqlParser.OPENBRACKET)
            self.state = 2509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.DASH or _la==KqlParser.PLUS or ((((_la - 285)) & ~0x3f) == 0 and ((1 << (_la - 285)) & ((1 << (KqlParser.DYNAMIC - 285)) | (1 << (KqlParser.LONGLITERAL - 285)) | (1 << (KqlParser.INTLITERAL - 285)) | (1 << (KqlParser.REALLITERAL - 285)) | (1 << (KqlParser.DECIMALLITERAL - 285)) | (1 << (KqlParser.STRINGLITERAL - 285)) | (1 << (KqlParser.BOOLEANLITERAL - 285)) | (1 << (KqlParser.DATETIMELITERAL - 285)) | (1 << (KqlParser.TIMESPANLITERAL - 285)) | (1 << (KqlParser.TYPELITERAL - 285)) | (1 << (KqlParser.GUIDLITERAL - 285)))) != 0):
                self.state = 2508
                localctx._literalExpression = self.literalExpression()
                localctx.Values.append(localctx._literalExpression)


            self.state = 2515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2511
                    self.match(KqlParser.COMMA)
                    self.state = 2512
                    localctx._literalExpression = self.literalExpression()
                    localctx.Values.append(localctx._literalExpression) 
                self.state = 2517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

            self.state = 2519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.COMMA:
                self.state = 2518
                self.match(KqlParser.COMMA)


            self.state = 2521
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowSchemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._rowSchemaColumnDeclaration = None # RowSchemaColumnDeclarationContext
            self.Columns = list() # of RowSchemaColumnDeclarationContexts

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def rowSchemaColumnDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RowSchemaColumnDeclarationContext)
            else:
                return self.getTypedRuleContext(KqlParser.RowSchemaColumnDeclarationContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_rowSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowSchema" ):
                listener.enterRowSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowSchema" ):
                listener.exitRowSchema(self)




    def rowSchema(self):

        localctx = KqlParser.RowSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_rowSchema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2523
            self.match(KqlParser.OPENPAREN)
            self.state = 2525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.OPENBRACKET) | (1 << KqlParser.ACCESS) | (1 << KqlParser.ACCUMULATE) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AS) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.BY) | (1 << KqlParser.CLUSTER) | (1 << KqlParser.CONSUME) | (1 << KqlParser.CONTAINS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KqlParser.COUNT - 66)) | (1 << (KqlParser.DATABASE - 66)) | (1 << (KqlParser.DATATABLE - 66)) | (1 << (KqlParser.DECLARE - 66)) | (1 << (KqlParser.DEFAULT - 66)) | (1 << (KqlParser.DELTA - 66)) | (1 << (KqlParser.DISTINCT - 66)) | (1 << (KqlParser.EDGES - 66)) | (1 << (KqlParser.EVALUATE - 66)) | (1 << (KqlParser.EXECUTE - 66)) | (1 << (KqlParser.EXTEND - 66)) | (1 << (KqlParser.EXTERNALDATA - 66)) | (1 << (KqlParser.FACET - 66)) | (1 << (KqlParser.FILTER - 66)) | (1 << (KqlParser.FIND - 66)) | (1 << (KqlParser.FORK - 66)) | (1 << (KqlParser.FROM - 66)) | (1 << (KqlParser.HAS - 66)) | (1 << (KqlParser.HIDDEN_ - 66)) | (1 << (KqlParser.HOT - 66)) | (1 << (KqlParser.HOTDATA - 66)) | (1 << (KqlParser.HOTINDEX - 66)) | (1 << (KqlParser.ID - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KqlParser.IN - 130)) | (1 << (KqlParser.INTO - 130)) | (1 << (KqlParser.INVOKE - 130)) | (1 << (KqlParser.LEGEND - 130)) | (1 << (KqlParser.LET - 130)) | (1 << (KqlParser.LIMIT - 130)) | (1 << (KqlParser.LINEAR - 130)) | (1 << (KqlParser.LIST - 130)) | (1 << (KqlParser.LOOKUP - 130)) | (1 << (KqlParser.LOG - 130)) | (1 << (KqlParser.MAP - 130)) | (1 << (KqlParser.MATERIALIZE - 130)) | (1 << (KqlParser.NODES - 130)) | (1 << (KqlParser.NONE - 130)) | (1 << (KqlParser.NULL - 130)) | (1 << (KqlParser.NULLS - 130)) | (1 << (KqlParser.OF - 130)) | (1 << (KqlParser.ON - 130)) | (1 << (KqlParser.OPTIONAL - 130)) | (1 << (KqlParser.OUTPUT - 130)) | (1 << (KqlParser.PACK - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (KqlParser.PARSE - 194)) | (1 << (KqlParser.PARTITION - 194)) | (1 << (KqlParser.PARTITIONBY - 194)) | (1 << (KqlParser.PATTERN - 194)) | (1 << (KqlParser.PLUGIN - 194)) | (1 << (KqlParser.PRINT - 194)) | (1 << (KqlParser.QUERYPARAMETERS - 194)) | (1 << (KqlParser.RANGE - 194)) | (1 << (KqlParser.REDUCE - 194)) | (1 << (KqlParser.RENDER - 194)) | (1 << (KqlParser.REPLACE - 194)) | (1 << (KqlParser.RESTRICT - 194)) | (1 << (KqlParser.SAMPLE - 194)) | (1 << (KqlParser.SAMPLE_DISTINCT - 194)) | (1 << (KqlParser.SCAN - 194)) | (1 << (KqlParser.SEARCH - 194)) | (1 << (KqlParser.SERIALIZE - 194)) | (1 << (KqlParser.SERIES - 194)) | (1 << (KqlParser.SET - 194)) | (1 << (KqlParser.SORT - 194)) | (1 << (KqlParser.STACKED - 194)) | (1 << (KqlParser.STACKED100 - 194)) | (1 << (KqlParser.STEP - 194)) | (1 << (KqlParser.SUMMARIZE - 194)) | (1 << (KqlParser.TAKE - 194)) | (1 << (KqlParser.THRESHOLD - 194)) | (1 << (KqlParser.TITLE - 194)) | (1 << (KqlParser.TO - 194)) | (1 << (KqlParser.TOP - 194)) | (1 << (KqlParser.TOP_HITTERS - 194)) | (1 << (KqlParser.TOP_NESTED - 194)) | (1 << (KqlParser.TOSCALAR - 194)) | (1 << (KqlParser.TOTABLE - 194)) | (1 << (KqlParser.TYPEOF - 194)) | (1 << (KqlParser.UNSTACKED - 194)) | (1 << (KqlParser.UUID - 194)) | (1 << (KqlParser.VIEW - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (KqlParser.VISIBLE - 258)) | (1 << (KqlParser.WHERE - 258)) | (1 << (KqlParser.WITH - 258)) | (1 << (KqlParser.XAXIS - 258)) | (1 << (KqlParser.XCOLUMN - 258)) | (1 << (KqlParser.XMAX - 258)) | (1 << (KqlParser.XMIN - 258)) | (1 << (KqlParser.XTITLE - 258)) | (1 << (KqlParser.YAXIS - 258)) | (1 << (KqlParser.YCOLUMNS - 258)) | (1 << (KqlParser.YMAX - 258)) | (1 << (KqlParser.YMIN - 258)) | (1 << (KqlParser.YSPLIT - 258)) | (1 << (KqlParser.YTITLE - 258)) | (1 << (KqlParser.BOOL - 258)) | (1 << (KqlParser.GUID - 258)) | (1 << (KqlParser.IDENTIFIER - 258)))) != 0):
                self.state = 2524
                localctx._rowSchemaColumnDeclaration = self.rowSchemaColumnDeclaration()
                localctx.Columns.append(localctx._rowSchemaColumnDeclaration)


            self.state = 2531
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2527
                    self.match(KqlParser.COMMA)
                    self.state = 2528
                    localctx._rowSchemaColumnDeclaration = self.rowSchemaColumnDeclaration()
                    localctx.Columns.append(localctx._rowSchemaColumnDeclaration) 
                self.state = 2533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

            self.state = 2535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.COMMA:
                self.state = 2534
                self.match(KqlParser.COMMA)


            self.state = 2537
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowSchemaColumnDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.Type = None # ScalarTypeContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def parameterName(self):
            return self.getTypedRuleContext(KqlParser.ParameterNameContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(KqlParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_rowSchemaColumnDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowSchemaColumnDeclaration" ):
                listener.enterRowSchemaColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowSchemaColumnDeclaration" ):
                listener.exitRowSchemaColumnDeclaration(self)




    def rowSchemaColumnDeclaration(self):

        localctx = KqlParser.RowSchemaColumnDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_rowSchemaColumnDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2539
            localctx.Name = self.parameterName()
            self.state = 2540
            self.match(KqlParser.COLON)
            self.state = 2541
            localctx.Type = self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDataExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Keyword = None # Token
            self._relaxedQueryOperatorParameter = None # RelaxedQueryOperatorParameterContext
            self.Parameters = list() # of RelaxedQueryOperatorParameterContexts
            self.Schema = None # RowSchemaContext
            self._stringLiteralExpression = None # StringLiteralExpressionContext
            self.ConnectionStrings = list() # of StringLiteralExpressionContexts
            self.WithClause = None # ExternalDataWithClauseContext

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def rowSchema(self):
            return self.getTypedRuleContext(KqlParser.RowSchemaContext,0)


        def stringLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.StringLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,i)


        def EXTERNALDATA(self):
            return self.getToken(KqlParser.EXTERNALDATA, 0)

        def EXTERNAL_DATA(self):
            return self.getToken(KqlParser.EXTERNAL_DATA, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def relaxedQueryOperatorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.RelaxedQueryOperatorParameterContext)
            else:
                return self.getTypedRuleContext(KqlParser.RelaxedQueryOperatorParameterContext,i)


        def externalDataWithClause(self):
            return self.getTypedRuleContext(KqlParser.ExternalDataWithClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_externalDataExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDataExpression" ):
                listener.enterExternalDataExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDataExpression" ):
                listener.exitExternalDataExpression(self)




    def externalDataExpression(self):

        localctx = KqlParser.ExternalDataExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_externalDataExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2543
            localctx.Keyword = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.EXTERNALDATA or _la==KqlParser.EXTERNAL_DATA):
                localctx.Keyword = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (KqlParser.BAGEXPANSION - 51)) | (1 << (KqlParser.BIN_LEGACY - 51)) | (1 << (KqlParser.CROSSCLUSTER__ - 51)) | (1 << (KqlParser.CROSSDB__ - 51)) | (1 << (KqlParser.DECODEBLOCKS - 51)) | (1 << (KqlParser.EXPANDOUTPUT - 51)) | (1 << (KqlParser.HINT_CONCURRENCY - 51)) | (1 << (KqlParser.HINT_DISTRIBUTION - 51)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (KqlParser.HINT_MATERIALIZED - 115)) | (1 << (KqlParser.HINT_NUM_PARTITIONS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS - 115)) | (1 << (KqlParser.HINT_PASS_FILTERS_COLUMN - 115)) | (1 << (KqlParser.HINT_PROGRESSIVE_TOP - 115)) | (1 << (KqlParser.HINT_REMOTE - 115)) | (1 << (KqlParser.HINT_SUFFLEKEY - 115)) | (1 << (KqlParser.HINT_SPREAD - 115)) | (1 << (KqlParser.HINT_STRATEGY - 115)) | (1 << (KqlParser.ID__ - 115)) | (1 << (KqlParser.ISFUZZY - 115)) | (1 << (KqlParser.ISFUZZY__ - 115)) | (1 << (KqlParser.KIND - 115)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (KqlParser.PACKEDCOLUMN__ - 201)) | (1 << (KqlParser.SOURCECOLUMNINDEX__ - 201)) | (1 << (KqlParser.WITHNOSOURCE__ - 201)) | (1 << (KqlParser.WITHSOURCE - 201)) | (1 << (KqlParser.WITH_ITEM_INDEX - 201)) | (1 << (KqlParser.WITH_MATCH_ID - 201)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (KqlParser.WITH_SOURCE - 266)) | (1 << (KqlParser.WITH_STEP_NAME - 266)) | (1 << (KqlParser.IDENTIFIER - 266)))) != 0):
                self.state = 2544
                localctx._relaxedQueryOperatorParameter = self.relaxedQueryOperatorParameter()
                localctx.Parameters.append(localctx._relaxedQueryOperatorParameter)
                self.state = 2549
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2550
            localctx.Schema = self.rowSchema()
            self.state = 2551
            self.match(KqlParser.OPENBRACKET)
            self.state = 2552
            localctx._stringLiteralExpression = self.stringLiteralExpression()
            localctx.ConnectionStrings.append(localctx._stringLiteralExpression)
            self.state = 2557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.COMMA:
                self.state = 2553
                self.match(KqlParser.COMMA)
                self.state = 2554
                localctx._stringLiteralExpression = self.stringLiteralExpression()
                localctx.ConnectionStrings.append(localctx._stringLiteralExpression)
                self.state = 2559
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2560
            self.match(KqlParser.CLOSEBRACKET)
            self.state = 2562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 2561
                localctx.WithClause = self.externalDataWithClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDataWithClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._externalDataWithClauseProperty = None # ExternalDataWithClausePropertyContext
            self.Properties = list() # of ExternalDataWithClausePropertyContexts

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def externalDataWithClauseProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ExternalDataWithClausePropertyContext)
            else:
                return self.getTypedRuleContext(KqlParser.ExternalDataWithClausePropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_externalDataWithClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDataWithClause" ):
                listener.enterExternalDataWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDataWithClause" ):
                listener.exitExternalDataWithClause(self)




    def externalDataWithClause(self):

        localctx = KqlParser.ExternalDataWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_externalDataWithClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2564
            self.match(KqlParser.WITH)
            self.state = 2565
            self.match(KqlParser.OPENPAREN)
            self.state = 2577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.OPENBRACKET) | (1 << KqlParser.ACCESS) | (1 << KqlParser.ACCUMULATE) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AS) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.BY) | (1 << KqlParser.CLUSTER) | (1 << KqlParser.CONSUME) | (1 << KqlParser.CONTAINS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KqlParser.COUNT - 66)) | (1 << (KqlParser.DATABASE - 66)) | (1 << (KqlParser.DATATABLE - 66)) | (1 << (KqlParser.DECLARE - 66)) | (1 << (KqlParser.DEFAULT - 66)) | (1 << (KqlParser.DELTA - 66)) | (1 << (KqlParser.DISTINCT - 66)) | (1 << (KqlParser.EDGES - 66)) | (1 << (KqlParser.EVALUATE - 66)) | (1 << (KqlParser.EXECUTE - 66)) | (1 << (KqlParser.EXTEND - 66)) | (1 << (KqlParser.EXTERNALDATA - 66)) | (1 << (KqlParser.FACET - 66)) | (1 << (KqlParser.FILTER - 66)) | (1 << (KqlParser.FIND - 66)) | (1 << (KqlParser.FORK - 66)) | (1 << (KqlParser.FROM - 66)) | (1 << (KqlParser.HAS - 66)) | (1 << (KqlParser.HIDDEN_ - 66)) | (1 << (KqlParser.HOT - 66)) | (1 << (KqlParser.HOTDATA - 66)) | (1 << (KqlParser.HOTINDEX - 66)) | (1 << (KqlParser.ID - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KqlParser.IN - 130)) | (1 << (KqlParser.INTO - 130)) | (1 << (KqlParser.INVOKE - 130)) | (1 << (KqlParser.LEGEND - 130)) | (1 << (KqlParser.LET - 130)) | (1 << (KqlParser.LIMIT - 130)) | (1 << (KqlParser.LINEAR - 130)) | (1 << (KqlParser.LIST - 130)) | (1 << (KqlParser.LOOKUP - 130)) | (1 << (KqlParser.LOG - 130)) | (1 << (KqlParser.MAP - 130)) | (1 << (KqlParser.MATERIALIZE - 130)) | (1 << (KqlParser.NODES - 130)) | (1 << (KqlParser.NONE - 130)) | (1 << (KqlParser.NULL - 130)) | (1 << (KqlParser.NULLS - 130)) | (1 << (KqlParser.OF - 130)) | (1 << (KqlParser.ON - 130)) | (1 << (KqlParser.OPTIONAL - 130)) | (1 << (KqlParser.OUTPUT - 130)) | (1 << (KqlParser.PACK - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (KqlParser.PARSE - 194)) | (1 << (KqlParser.PARTITION - 194)) | (1 << (KqlParser.PARTITIONBY - 194)) | (1 << (KqlParser.PATTERN - 194)) | (1 << (KqlParser.PLUGIN - 194)) | (1 << (KqlParser.PRINT - 194)) | (1 << (KqlParser.QUERYPARAMETERS - 194)) | (1 << (KqlParser.RANGE - 194)) | (1 << (KqlParser.REDUCE - 194)) | (1 << (KqlParser.RENDER - 194)) | (1 << (KqlParser.REPLACE - 194)) | (1 << (KqlParser.RESTRICT - 194)) | (1 << (KqlParser.SAMPLE - 194)) | (1 << (KqlParser.SAMPLE_DISTINCT - 194)) | (1 << (KqlParser.SCAN - 194)) | (1 << (KqlParser.SEARCH - 194)) | (1 << (KqlParser.SERIALIZE - 194)) | (1 << (KqlParser.SERIES - 194)) | (1 << (KqlParser.SET - 194)) | (1 << (KqlParser.SORT - 194)) | (1 << (KqlParser.STACKED - 194)) | (1 << (KqlParser.STACKED100 - 194)) | (1 << (KqlParser.STEP - 194)) | (1 << (KqlParser.SUMMARIZE - 194)) | (1 << (KqlParser.TAKE - 194)) | (1 << (KqlParser.THRESHOLD - 194)) | (1 << (KqlParser.TITLE - 194)) | (1 << (KqlParser.TO - 194)) | (1 << (KqlParser.TOP - 194)) | (1 << (KqlParser.TOP_HITTERS - 194)) | (1 << (KqlParser.TOP_NESTED - 194)) | (1 << (KqlParser.TOSCALAR - 194)) | (1 << (KqlParser.TOTABLE - 194)) | (1 << (KqlParser.TYPEOF - 194)) | (1 << (KqlParser.UNSTACKED - 194)) | (1 << (KqlParser.UUID - 194)) | (1 << (KqlParser.VIEW - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (KqlParser.VISIBLE - 258)) | (1 << (KqlParser.WHERE - 258)) | (1 << (KqlParser.WITH - 258)) | (1 << (KqlParser.XAXIS - 258)) | (1 << (KqlParser.XCOLUMN - 258)) | (1 << (KqlParser.XMAX - 258)) | (1 << (KqlParser.XMIN - 258)) | (1 << (KqlParser.XTITLE - 258)) | (1 << (KqlParser.YAXIS - 258)) | (1 << (KqlParser.YCOLUMNS - 258)) | (1 << (KqlParser.YMAX - 258)) | (1 << (KqlParser.YMIN - 258)) | (1 << (KqlParser.YSPLIT - 258)) | (1 << (KqlParser.YTITLE - 258)) | (1 << (KqlParser.BOOL - 258)) | (1 << (KqlParser.GUID - 258)) | (1 << (KqlParser.IDENTIFIER - 258)))) != 0):
                self.state = 2566
                localctx._externalDataWithClauseProperty = self.externalDataWithClauseProperty()
                localctx.Properties.append(localctx._externalDataWithClauseProperty)
                self.state = 2571
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2567
                        self.match(KqlParser.COMMA)
                        self.state = 2568
                        localctx._externalDataWithClauseProperty = self.externalDataWithClauseProperty()
                        localctx.Properties.append(localctx._externalDataWithClauseProperty) 
                    self.state = 2573
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

                self.state = 2575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KqlParser.COMMA:
                    self.state = 2574
                    self.match(KqlParser.COMMA)




            self.state = 2579
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDataWithClausePropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # ParameterNameContext
            self.StringValue = None # StringLiteralExpressionContext
            self.TokenValue = None # Token
            self.NameValue = None # ParameterNameContext

        def EQUAL(self):
            return self.getToken(KqlParser.EQUAL, 0)

        def parameterName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.ParameterNameContext)
            else:
                return self.getTypedRuleContext(KqlParser.ParameterNameContext,i)


        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def LONGLITERAL(self):
            return self.getToken(KqlParser.LONGLITERAL, 0)

        def REALLITERAL(self):
            return self.getToken(KqlParser.REALLITERAL, 0)

        def BOOLEANLITERAL(self):
            return self.getToken(KqlParser.BOOLEANLITERAL, 0)

        def DATETIMELITERAL(self):
            return self.getToken(KqlParser.DATETIMELITERAL, 0)

        def TYPELITERAL(self):
            return self.getToken(KqlParser.TYPELITERAL, 0)

        def GUIDLITERAL(self):
            return self.getToken(KqlParser.GUIDLITERAL, 0)

        def RAWGUIDLITERAL(self):
            return self.getToken(KqlParser.RAWGUIDLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_externalDataWithClauseProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDataWithClauseProperty" ):
                listener.enterExternalDataWithClauseProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDataWithClauseProperty" ):
                listener.exitExternalDataWithClauseProperty(self)




    def externalDataWithClauseProperty(self):

        localctx = KqlParser.ExternalDataWithClausePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_externalDataWithClauseProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2581
            localctx.Name = self.parameterName()
            self.state = 2582
            self.match(KqlParser.EQUAL)
            self.state = 2586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.STRINGLITERAL]:
                self.state = 2583
                localctx.StringValue = self.stringLiteralExpression()
                pass
            elif token in [KqlParser.LONGLITERAL, KqlParser.REALLITERAL, KqlParser.BOOLEANLITERAL, KqlParser.DATETIMELITERAL, KqlParser.TYPELITERAL, KqlParser.RAWGUIDLITERAL, KqlParser.GUIDLITERAL]:
                self.state = 2584
                localctx.TokenValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 305)) & ~0x3f) == 0 and ((1 << (_la - 305)) & ((1 << (KqlParser.LONGLITERAL - 305)) | (1 << (KqlParser.REALLITERAL - 305)) | (1 << (KqlParser.BOOLEANLITERAL - 305)) | (1 << (KqlParser.DATETIMELITERAL - 305)) | (1 << (KqlParser.TYPELITERAL - 305)) | (1 << (KqlParser.RAWGUIDLITERAL - 305)) | (1 << (KqlParser.GUIDLITERAL - 305)))) != 0)):
                    localctx.TokenValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [KqlParser.OPENBRACKET, KqlParser.ACCESS, KqlParser.ACCUMULATE, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AS, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.BY, KqlParser.CLUSTER, KqlParser.CONSUME, KqlParser.CONTAINS, KqlParser.COUNT, KqlParser.DATABASE, KqlParser.DATATABLE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.DISTINCT, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.EXTEND, KqlParser.EXTERNALDATA, KqlParser.FACET, KqlParser.FILTER, KqlParser.FIND, KqlParser.FORK, KqlParser.FROM, KqlParser.HAS, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.IN, KqlParser.INTO, KqlParser.INVOKE, KqlParser.LEGEND, KqlParser.LET, KqlParser.LIMIT, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.MATERIALIZE, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.OF, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARSE, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.PRINT, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SAMPLE, KqlParser.SAMPLE_DISTINCT, KqlParser.SCAN, KqlParser.SEARCH, KqlParser.SERIALIZE, KqlParser.SERIES, KqlParser.SET, KqlParser.SORT, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.SUMMARIZE, KqlParser.TAKE, KqlParser.THRESHOLD, KqlParser.TITLE, KqlParser.TO, KqlParser.TOP, KqlParser.TOP_HITTERS, KqlParser.TOP_NESTED, KqlParser.TOSCALAR, KqlParser.TOTABLE, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WHERE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID, KqlParser.IDENTIFIER]:
                self.state = 2585
                localctx.NameValue = self.parameterName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializedViewCombineExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # StringLiteralExpressionContext
            self.BaseClause = None # MaterializeViewCombineBaseClauseContext
            self.DeltaClause = None # MaterializedViewCombineDeltaClauseContext
            self.AggregationsClause = None # MaterializedViewCombineAggregationsClauseContext

        def MATERIALIZED_VIEW_COMBINE(self):
            return self.getToken(KqlParser.MATERIALIZED_VIEW_COMBINE, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def materializeViewCombineBaseClause(self):
            return self.getTypedRuleContext(KqlParser.MaterializeViewCombineBaseClauseContext,0)


        def materializedViewCombineDeltaClause(self):
            return self.getTypedRuleContext(KqlParser.MaterializedViewCombineDeltaClauseContext,0)


        def materializedViewCombineAggregationsClause(self):
            return self.getTypedRuleContext(KqlParser.MaterializedViewCombineAggregationsClauseContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_materializedViewCombineExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializedViewCombineExpression" ):
                listener.enterMaterializedViewCombineExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializedViewCombineExpression" ):
                listener.exitMaterializedViewCombineExpression(self)




    def materializedViewCombineExpression(self):

        localctx = KqlParser.MaterializedViewCombineExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_materializedViewCombineExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self.match(KqlParser.MATERIALIZED_VIEW_COMBINE)
            self.state = 2589
            self.match(KqlParser.OPENPAREN)
            self.state = 2590
            localctx.Name = self.stringLiteralExpression()
            self.state = 2591
            self.match(KqlParser.CLOSEPAREN)
            self.state = 2592
            localctx.BaseClause = self.materializeViewCombineBaseClause()
            self.state = 2593
            localctx.DeltaClause = self.materializedViewCombineDeltaClause()
            self.state = 2594
            localctx.AggregationsClause = self.materializedViewCombineAggregationsClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializeViewCombineBaseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def BASE(self):
            return self.getToken(KqlParser.BASE, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_materializeViewCombineBaseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializeViewCombineBaseClause" ):
                listener.enterMaterializeViewCombineBaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializeViewCombineBaseClause" ):
                listener.exitMaterializeViewCombineBaseClause(self)




    def materializeViewCombineBaseClause(self):

        localctx = KqlParser.MaterializeViewCombineBaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_materializeViewCombineBaseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2596
            self.match(KqlParser.BASE)
            self.state = 2597
            self.match(KqlParser.OPENPAREN)
            self.state = 2598
            localctx.Expression = self.expression()
            self.state = 2599
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializedViewCombineDeltaClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Expression = None # ExpressionContext

        def DELTA(self):
            return self.getToken(KqlParser.DELTA, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_materializedViewCombineDeltaClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializedViewCombineDeltaClause" ):
                listener.enterMaterializedViewCombineDeltaClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializedViewCombineDeltaClause" ):
                listener.exitMaterializedViewCombineDeltaClause(self)




    def materializedViewCombineDeltaClause(self):

        localctx = KqlParser.MaterializedViewCombineDeltaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_materializedViewCombineDeltaClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2601
            self.match(KqlParser.DELTA)
            self.state = 2602
            self.match(KqlParser.OPENPAREN)
            self.state = 2603
            localctx.Expression = self.expression()
            self.state = 2604
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaterializedViewCombineAggregationsClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Operator = None # SummarizeOperatorContext

        def AGGREGATIONS(self):
            return self.getToken(KqlParser.AGGREGATIONS, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def summarizeOperator(self):
            return self.getTypedRuleContext(KqlParser.SummarizeOperatorContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_materializedViewCombineAggregationsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterializedViewCombineAggregationsClause" ):
                listener.enterMaterializedViewCombineAggregationsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterializedViewCombineAggregationsClause" ):
                listener.exitMaterializedViewCombineAggregationsClause(self)




    def materializedViewCombineAggregationsClause(self):

        localctx = KqlParser.MaterializedViewCombineAggregationsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_materializedViewCombineAggregationsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            self.match(KqlParser.AGGREGATIONS)
            self.state = 2607
            self.match(KqlParser.OPENPAREN)
            self.state = 2608
            localctx.Operator = self.summarizeOperator()
            self.state = 2609
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def BOOL(self):
            return self.getToken(KqlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(KqlParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(KqlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(KqlParser.DATETIME, 0)

        def DECIMAL(self):
            return self.getToken(KqlParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(KqlParser.DOUBLE, 0)

        def DYNAMIC(self):
            return self.getToken(KqlParser.DYNAMIC, 0)

        def GUID(self):
            return self.getToken(KqlParser.GUID, 0)

        def INT(self):
            return self.getToken(KqlParser.INT, 0)

        def INT64(self):
            return self.getToken(KqlParser.INT64, 0)

        def INT8(self):
            return self.getToken(KqlParser.INT8, 0)

        def LONG(self):
            return self.getToken(KqlParser.LONG, 0)

        def REAL(self):
            return self.getToken(KqlParser.REAL, 0)

        def STRING(self):
            return self.getToken(KqlParser.STRING, 0)

        def TIME(self):
            return self.getToken(KqlParser.TIME, 0)

        def TIMESPAN(self):
            return self.getToken(KqlParser.TIMESPAN, 0)

        def UNIQUEID(self):
            return self.getToken(KqlParser.UNIQUEID, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_scalarType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarType" ):
                listener.enterScalarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarType" ):
                listener.exitScalarType(self)




    def scalarType(self):

        localctx = KqlParser.ScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_scalarType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2611
            localctx.Token = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & ((1 << (KqlParser.BOOL - 279)) | (1 << (KqlParser.BOOLEAN - 279)) | (1 << (KqlParser.DATE - 279)) | (1 << (KqlParser.DATETIME - 279)) | (1 << (KqlParser.DECIMAL - 279)) | (1 << (KqlParser.DOUBLE - 279)) | (1 << (KqlParser.DYNAMIC - 279)) | (1 << (KqlParser.GUID - 279)) | (1 << (KqlParser.INT - 279)) | (1 << (KqlParser.INT8 - 279)) | (1 << (KqlParser.INT64 - 279)) | (1 << (KqlParser.LONG - 279)) | (1 << (KqlParser.STRING - 279)) | (1 << (KqlParser.REAL - 279)) | (1 << (KqlParser.TIME - 279)) | (1 << (KqlParser.TIMESPAN - 279)) | (1 << (KqlParser.UNIQUEID - 279)))) != 0)):
                localctx.Token = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedScalarTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def BOOL(self):
            return self.getToken(KqlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(KqlParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(KqlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(KqlParser.DATETIME, 0)

        def DECIMAL(self):
            return self.getToken(KqlParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(KqlParser.DOUBLE, 0)

        def DYNAMIC(self):
            return self.getToken(KqlParser.DYNAMIC, 0)

        def FLOAT(self):
            return self.getToken(KqlParser.FLOAT, 0)

        def GUID(self):
            return self.getToken(KqlParser.GUID, 0)

        def INT(self):
            return self.getToken(KqlParser.INT, 0)

        def INT16(self):
            return self.getToken(KqlParser.INT16, 0)

        def INT32(self):
            return self.getToken(KqlParser.INT32, 0)

        def INT64(self):
            return self.getToken(KqlParser.INT64, 0)

        def INT8(self):
            return self.getToken(KqlParser.INT8, 0)

        def LONG(self):
            return self.getToken(KqlParser.LONG, 0)

        def REAL(self):
            return self.getToken(KqlParser.REAL, 0)

        def STRING(self):
            return self.getToken(KqlParser.STRING, 0)

        def TIME(self):
            return self.getToken(KqlParser.TIME, 0)

        def TIMESPAN(self):
            return self.getToken(KqlParser.TIMESPAN, 0)

        def UINT(self):
            return self.getToken(KqlParser.UINT, 0)

        def UINT16(self):
            return self.getToken(KqlParser.UINT16, 0)

        def UINT32(self):
            return self.getToken(KqlParser.UINT32, 0)

        def UINT64(self):
            return self.getToken(KqlParser.UINT64, 0)

        def UINT8(self):
            return self.getToken(KqlParser.UINT8, 0)

        def ULONG(self):
            return self.getToken(KqlParser.ULONG, 0)

        def UNIQUEID(self):
            return self.getToken(KqlParser.UNIQUEID, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_extendedScalarType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedScalarType" ):
                listener.enterExtendedScalarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedScalarType" ):
                listener.exitExtendedScalarType(self)




    def extendedScalarType(self):

        localctx = KqlParser.ExtendedScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_extendedScalarType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2613
            localctx.Token = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & ((1 << (KqlParser.BOOL - 279)) | (1 << (KqlParser.BOOLEAN - 279)) | (1 << (KqlParser.DATE - 279)) | (1 << (KqlParser.DATETIME - 279)) | (1 << (KqlParser.DECIMAL - 279)) | (1 << (KqlParser.DOUBLE - 279)) | (1 << (KqlParser.DYNAMIC - 279)) | (1 << (KqlParser.FLOAT - 279)) | (1 << (KqlParser.GUID - 279)) | (1 << (KqlParser.INT - 279)) | (1 << (KqlParser.INT8 - 279)) | (1 << (KqlParser.INT16 - 279)) | (1 << (KqlParser.INT32 - 279)) | (1 << (KqlParser.INT64 - 279)) | (1 << (KqlParser.LONG - 279)) | (1 << (KqlParser.STRING - 279)) | (1 << (KqlParser.REAL - 279)) | (1 << (KqlParser.TIME - 279)) | (1 << (KqlParser.TIMESPAN - 279)) | (1 << (KqlParser.UINT - 279)) | (1 << (KqlParser.UINT8 - 279)) | (1 << (KqlParser.UINT16 - 279)) | (1 << (KqlParser.UINT32 - 279)) | (1 << (KqlParser.UINT64 - 279)) | (1 << (KqlParser.ULONG - 279)) | (1 << (KqlParser.UNIQUEID - 279)))) != 0)):
                localctx.Token = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrExtendedKeywordOrEscapedNameContext

        def identifierOrExtendedKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_parameterName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterName" ):
                listener.enterParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterName" ):
                listener.exitParameterName(self)




    def parameterName(self):

        localctx = KqlParser.ParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_parameterName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2615
            localctx.Name = self.identifierOrExtendedKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleNameReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrKeywordOrEscapedNameContext

        def identifierOrKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_simpleNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleNameReference" ):
                listener.enterSimpleNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleNameReference" ):
                listener.exitSimpleNameReference(self)




    def simpleNameReference(self):

        localctx = KqlParser.SimpleNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_simpleNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2617
            localctx.Name = self.identifierOrKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedNameReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # IdentifierOrExtendedKeywordOrEscapedNameContext

        def identifierOrExtendedKeywordOrEscapedName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_extendedNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedNameReference" ):
                listener.enterExtendedNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedNameReference" ):
                listener.exitExtendedNameReference(self)




    def extendedNameReference(self):

        localctx = KqlParser.ExtendedNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_extendedNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2619
            localctx.Name = self.identifierOrExtendedKeywordOrEscapedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedNameReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # WildcardedNameContext

        def wildcardedName(self):
            return self.getTypedRuleContext(KqlParser.WildcardedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedNameReference" ):
                listener.enterWildcardedNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedNameReference" ):
                listener.exitWildcardedNameReference(self)




    def wildcardedNameReference(self):

        localctx = KqlParser.WildcardedNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_wildcardedNameReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2621
            localctx.Name = self.wildcardedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleOrWildcardedNameReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SimpleName = None # SimpleNameReferenceContext
            self.WildcardedName = None # WildcardedNameReferenceContext

        def simpleNameReference(self):
            return self.getTypedRuleContext(KqlParser.SimpleNameReferenceContext,0)


        def wildcardedNameReference(self):
            return self.getTypedRuleContext(KqlParser.WildcardedNameReferenceContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_simpleOrWildcardedNameReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleOrWildcardedNameReference" ):
                listener.enterSimpleOrWildcardedNameReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleOrWildcardedNameReference" ):
                listener.exitSimpleOrWildcardedNameReference(self)




    def simpleOrWildcardedNameReference(self):

        localctx = KqlParser.SimpleOrWildcardedNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_simpleOrWildcardedNameReference)
        try:
            self.state = 2625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2623
                localctx.SimpleName = self.simpleNameReference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2624
                localctx.WildcardedName = self.wildcardedNameReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_identifierName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierName" ):
                listener.enterIdentifierName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierName" ):
                listener.exitIdentifierName(self)




    def identifierName(self):

        localctx = KqlParser.IdentifierNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_identifierName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627
            localctx.Token = self.match(KqlParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def ACCESS(self):
            return self.getToken(KqlParser.ACCESS, 0)

        def AGGREGATIONS(self):
            return self.getToken(KqlParser.AGGREGATIONS, 0)

        def ALIAS(self):
            return self.getToken(KqlParser.ALIAS, 0)

        def ALL(self):
            return self.getToken(KqlParser.ALL, 0)

        def AXES(self):
            return self.getToken(KqlParser.AXES, 0)

        def BASE(self):
            return self.getToken(KqlParser.BASE, 0)

        def BIN(self):
            return self.getToken(KqlParser.BIN, 0)

        def BOOL(self):
            return self.getToken(KqlParser.BOOL, 0)

        def CLUSTER(self):
            return self.getToken(KqlParser.CLUSTER, 0)

        def DATABASE(self):
            return self.getToken(KqlParser.DATABASE, 0)

        def DECLARE(self):
            return self.getToken(KqlParser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(KqlParser.DEFAULT, 0)

        def DELTA(self):
            return self.getToken(KqlParser.DELTA, 0)

        def EDGES(self):
            return self.getToken(KqlParser.EDGES, 0)

        def EVALUATE(self):
            return self.getToken(KqlParser.EVALUATE, 0)

        def EXECUTE(self):
            return self.getToken(KqlParser.EXECUTE, 0)

        def FACET(self):
            return self.getToken(KqlParser.FACET, 0)

        def FORK(self):
            return self.getToken(KqlParser.FORK, 0)

        def FROM(self):
            return self.getToken(KqlParser.FROM, 0)

        def GUID(self):
            return self.getToken(KqlParser.GUID, 0)

        def HIDDEN_(self):
            return self.getToken(KqlParser.HIDDEN_, 0)

        def HOT(self):
            return self.getToken(KqlParser.HOT, 0)

        def HOTDATA(self):
            return self.getToken(KqlParser.HOTDATA, 0)

        def HOTINDEX(self):
            return self.getToken(KqlParser.HOTINDEX, 0)

        def ID(self):
            return self.getToken(KqlParser.ID, 0)

        def INTO(self):
            return self.getToken(KqlParser.INTO, 0)

        def LEGEND(self):
            return self.getToken(KqlParser.LEGEND, 0)

        def LET(self):
            return self.getToken(KqlParser.LET, 0)

        def LINEAR(self):
            return self.getToken(KqlParser.LINEAR, 0)

        def LOG(self):
            return self.getToken(KqlParser.LOG, 0)

        def LOOKUP(self):
            return self.getToken(KqlParser.LOOKUP, 0)

        def LIST(self):
            return self.getToken(KqlParser.LIST, 0)

        def MAP(self):
            return self.getToken(KqlParser.MAP, 0)

        def NODES(self):
            return self.getToken(KqlParser.NODES, 0)

        def NONE(self):
            return self.getToken(KqlParser.NONE, 0)

        def NULL(self):
            return self.getToken(KqlParser.NULL, 0)

        def NULLS(self):
            return self.getToken(KqlParser.NULLS, 0)

        def ON(self):
            return self.getToken(KqlParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(KqlParser.OPTIONAL, 0)

        def OUTPUT(self):
            return self.getToken(KqlParser.OUTPUT, 0)

        def PACK(self):
            return self.getToken(KqlParser.PACK, 0)

        def PARTITION(self):
            return self.getToken(KqlParser.PARTITION, 0)

        def PARTITIONBY(self):
            return self.getToken(KqlParser.PARTITIONBY, 0)

        def PATTERN(self):
            return self.getToken(KqlParser.PATTERN, 0)

        def PLUGIN(self):
            return self.getToken(KqlParser.PLUGIN, 0)

        def QUERYPARAMETERS(self):
            return self.getToken(KqlParser.QUERYPARAMETERS, 0)

        def RANGE(self):
            return self.getToken(KqlParser.RANGE, 0)

        def REDUCE(self):
            return self.getToken(KqlParser.REDUCE, 0)

        def REPLACE(self):
            return self.getToken(KqlParser.REPLACE, 0)

        def RENDER(self):
            return self.getToken(KqlParser.RENDER, 0)

        def RESTRICT(self):
            return self.getToken(KqlParser.RESTRICT, 0)

        def SERIES(self):
            return self.getToken(KqlParser.SERIES, 0)

        def STACKED(self):
            return self.getToken(KqlParser.STACKED, 0)

        def STACKED100(self):
            return self.getToken(KqlParser.STACKED100, 0)

        def STEP(self):
            return self.getToken(KqlParser.STEP, 0)

        def THRESHOLD(self):
            return self.getToken(KqlParser.THRESHOLD, 0)

        def TYPEOF(self):
            return self.getToken(KqlParser.TYPEOF, 0)

        def UNSTACKED(self):
            return self.getToken(KqlParser.UNSTACKED, 0)

        def UUID(self):
            return self.getToken(KqlParser.UUID, 0)

        def VIEW(self):
            return self.getToken(KqlParser.VIEW, 0)

        def VISIBLE(self):
            return self.getToken(KqlParser.VISIBLE, 0)

        def WITH(self):
            return self.getToken(KqlParser.WITH, 0)

        def XAXIS(self):
            return self.getToken(KqlParser.XAXIS, 0)

        def XCOLUMN(self):
            return self.getToken(KqlParser.XCOLUMN, 0)

        def XMAX(self):
            return self.getToken(KqlParser.XMAX, 0)

        def XMIN(self):
            return self.getToken(KqlParser.XMIN, 0)

        def XTITLE(self):
            return self.getToken(KqlParser.XTITLE, 0)

        def YAXIS(self):
            return self.getToken(KqlParser.YAXIS, 0)

        def YCOLUMNS(self):
            return self.getToken(KqlParser.YCOLUMNS, 0)

        def YMAX(self):
            return self.getToken(KqlParser.YMAX, 0)

        def YMIN(self):
            return self.getToken(KqlParser.YMIN, 0)

        def YTITLE(self):
            return self.getToken(KqlParser.YTITLE, 0)

        def YSPLIT(self):
            return self.getToken(KqlParser.YSPLIT, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_keywordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordName" ):
                listener.enterKeywordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordName" ):
                listener.exitKeywordName(self)




    def keywordName(self):

        localctx = KqlParser.KeywordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_keywordName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2629
            localctx.Token = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 38)) & ~0x3f) == 0 and ((1 << (_la - 38)) & ((1 << (KqlParser.ACCESS - 38)) | (1 << (KqlParser.AGGREGATIONS - 38)) | (1 << (KqlParser.ALIAS - 38)) | (1 << (KqlParser.ALL - 38)) | (1 << (KqlParser.AXES - 38)) | (1 << (KqlParser.BASE - 38)) | (1 << (KqlParser.BIN - 38)) | (1 << (KqlParser.CLUSTER - 38)) | (1 << (KqlParser.DATABASE - 38)) | (1 << (KqlParser.DECLARE - 38)) | (1 << (KqlParser.DEFAULT - 38)) | (1 << (KqlParser.DELTA - 38)) | (1 << (KqlParser.EDGES - 38)) | (1 << (KqlParser.EVALUATE - 38)) | (1 << (KqlParser.EXECUTE - 38)) | (1 << (KqlParser.FACET - 38)) | (1 << (KqlParser.FORK - 38)) | (1 << (KqlParser.FROM - 38)))) != 0) or ((((_la - 112)) & ~0x3f) == 0 and ((1 << (_la - 112)) & ((1 << (KqlParser.HIDDEN_ - 112)) | (1 << (KqlParser.HOT - 112)) | (1 << (KqlParser.HOTDATA - 112)) | (1 << (KqlParser.HOTINDEX - 112)) | (1 << (KqlParser.ID - 112)) | (1 << (KqlParser.INTO - 112)) | (1 << (KqlParser.LEGEND - 112)) | (1 << (KqlParser.LET - 112)) | (1 << (KqlParser.LINEAR - 112)) | (1 << (KqlParser.LIST - 112)) | (1 << (KqlParser.LOOKUP - 112)) | (1 << (KqlParser.LOG - 112)) | (1 << (KqlParser.MAP - 112)) | (1 << (KqlParser.NODES - 112)) | (1 << (KqlParser.NONE - 112)))) != 0) or ((((_la - 183)) & ~0x3f) == 0 and ((1 << (_la - 183)) & ((1 << (KqlParser.NULL - 183)) | (1 << (KqlParser.NULLS - 183)) | (1 << (KqlParser.ON - 183)) | (1 << (KqlParser.OPTIONAL - 183)) | (1 << (KqlParser.OUTPUT - 183)) | (1 << (KqlParser.PACK - 183)) | (1 << (KqlParser.PARTITION - 183)) | (1 << (KqlParser.PARTITIONBY - 183)) | (1 << (KqlParser.PATTERN - 183)) | (1 << (KqlParser.PLUGIN - 183)) | (1 << (KqlParser.QUERYPARAMETERS - 183)) | (1 << (KqlParser.RANGE - 183)) | (1 << (KqlParser.REDUCE - 183)) | (1 << (KqlParser.RENDER - 183)) | (1 << (KqlParser.REPLACE - 183)) | (1 << (KqlParser.RESTRICT - 183)) | (1 << (KqlParser.SERIES - 183)) | (1 << (KqlParser.STACKED - 183)) | (1 << (KqlParser.STACKED100 - 183)) | (1 << (KqlParser.STEP - 183)) | (1 << (KqlParser.THRESHOLD - 183)))) != 0) or ((((_la - 253)) & ~0x3f) == 0 and ((1 << (_la - 253)) & ((1 << (KqlParser.TYPEOF - 253)) | (1 << (KqlParser.UNSTACKED - 253)) | (1 << (KqlParser.UUID - 253)) | (1 << (KqlParser.VIEW - 253)) | (1 << (KqlParser.VISIBLE - 253)) | (1 << (KqlParser.WITH - 253)) | (1 << (KqlParser.XAXIS - 253)) | (1 << (KqlParser.XCOLUMN - 253)) | (1 << (KqlParser.XMAX - 253)) | (1 << (KqlParser.XMIN - 253)) | (1 << (KqlParser.XTITLE - 253)) | (1 << (KqlParser.YAXIS - 253)) | (1 << (KqlParser.YCOLUMNS - 253)) | (1 << (KqlParser.YMAX - 253)) | (1 << (KqlParser.YMIN - 253)) | (1 << (KqlParser.YSPLIT - 253)) | (1 << (KqlParser.YTITLE - 253)) | (1 << (KqlParser.BOOL - 253)) | (1 << (KqlParser.GUID - 253)))) != 0)):
                localctx.Token = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedKeywordNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def ACCUMULATE(self):
            return self.getToken(KqlParser.ACCUMULATE, 0)

        def AS(self):
            return self.getToken(KqlParser.AS, 0)

        def BY(self):
            return self.getToken(KqlParser.BY, 0)

        def CONTAINS(self):
            return self.getToken(KqlParser.CONTAINS, 0)

        def CONSUME(self):
            return self.getToken(KqlParser.CONSUME, 0)

        def COUNT(self):
            return self.getToken(KqlParser.COUNT, 0)

        def DATATABLE(self):
            return self.getToken(KqlParser.DATATABLE, 0)

        def DISTINCT(self):
            return self.getToken(KqlParser.DISTINCT, 0)

        def EXTEND(self):
            return self.getToken(KqlParser.EXTEND, 0)

        def EXTERNALDATA(self):
            return self.getToken(KqlParser.EXTERNALDATA, 0)

        def FIND(self):
            return self.getToken(KqlParser.FIND, 0)

        def FILTER(self):
            return self.getToken(KqlParser.FILTER, 0)

        def HAS(self):
            return self.getToken(KqlParser.HAS, 0)

        def IN(self):
            return self.getToken(KqlParser.IN, 0)

        def INVOKE(self):
            return self.getToken(KqlParser.INVOKE, 0)

        def LIMIT(self):
            return self.getToken(KqlParser.LIMIT, 0)

        def MATERIALIZE(self):
            return self.getToken(KqlParser.MATERIALIZE, 0)

        def OF(self):
            return self.getToken(KqlParser.OF, 0)

        def PARSE(self):
            return self.getToken(KqlParser.PARSE, 0)

        def PRINT(self):
            return self.getToken(KqlParser.PRINT, 0)

        def SAMPLE(self):
            return self.getToken(KqlParser.SAMPLE, 0)

        def SAMPLE_DISTINCT(self):
            return self.getToken(KqlParser.SAMPLE_DISTINCT, 0)

        def SCAN(self):
            return self.getToken(KqlParser.SCAN, 0)

        def SEARCH(self):
            return self.getToken(KqlParser.SEARCH, 0)

        def SERIALIZE(self):
            return self.getToken(KqlParser.SERIALIZE, 0)

        def SET(self):
            return self.getToken(KqlParser.SET, 0)

        def SORT(self):
            return self.getToken(KqlParser.SORT, 0)

        def SUMMARIZE(self):
            return self.getToken(KqlParser.SUMMARIZE, 0)

        def TAKE(self):
            return self.getToken(KqlParser.TAKE, 0)

        def TITLE(self):
            return self.getToken(KqlParser.TITLE, 0)

        def TO(self):
            return self.getToken(KqlParser.TO, 0)

        def TOP(self):
            return self.getToken(KqlParser.TOP, 0)

        def TOSCALAR(self):
            return self.getToken(KqlParser.TOSCALAR, 0)

        def TOTABLE(self):
            return self.getToken(KqlParser.TOTABLE, 0)

        def TOP_NESTED(self):
            return self.getToken(KqlParser.TOP_NESTED, 0)

        def TOP_HITTERS(self):
            return self.getToken(KqlParser.TOP_HITTERS, 0)

        def WHERE(self):
            return self.getToken(KqlParser.WHERE, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_extendedKeywordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedKeywordName" ):
                listener.enterExtendedKeywordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedKeywordName" ):
                listener.exitExtendedKeywordName(self)




    def extendedKeywordName(self):

        localctx = KqlParser.ExtendedKeywordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_extendedKeywordName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2631
            localctx.Token = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (KqlParser.ACCUMULATE - 39)) | (1 << (KqlParser.AS - 39)) | (1 << (KqlParser.BY - 39)) | (1 << (KqlParser.CONSUME - 39)) | (1 << (KqlParser.CONTAINS - 39)) | (1 << (KqlParser.COUNT - 39)) | (1 << (KqlParser.DATATABLE - 39)) | (1 << (KqlParser.DISTINCT - 39)) | (1 << (KqlParser.EXTEND - 39)) | (1 << (KqlParser.EXTERNALDATA - 39)) | (1 << (KqlParser.FILTER - 39)) | (1 << (KqlParser.FIND - 39)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KqlParser.HAS - 104)) | (1 << (KqlParser.IN - 104)) | (1 << (KqlParser.INVOKE - 104)) | (1 << (KqlParser.LIMIT - 104)) | (1 << (KqlParser.MATERIALIZE - 104)))) != 0) or ((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (KqlParser.OF - 185)) | (1 << (KqlParser.PARSE - 185)) | (1 << (KqlParser.PRINT - 185)) | (1 << (KqlParser.SAMPLE - 185)) | (1 << (KqlParser.SAMPLE_DISTINCT - 185)) | (1 << (KqlParser.SCAN - 185)) | (1 << (KqlParser.SEARCH - 185)) | (1 << (KqlParser.SERIALIZE - 185)) | (1 << (KqlParser.SET - 185)) | (1 << (KqlParser.SORT - 185)) | (1 << (KqlParser.SUMMARIZE - 185)) | (1 << (KqlParser.TAKE - 185)) | (1 << (KqlParser.TITLE - 185)) | (1 << (KqlParser.TO - 185)) | (1 << (KqlParser.TOP - 185)) | (1 << (KqlParser.TOP_HITTERS - 185)))) != 0) or ((((_la - 249)) & ~0x3f) == 0 and ((1 << (_la - 249)) & ((1 << (KqlParser.TOP_NESTED - 249)) | (1 << (KqlParser.TOSCALAR - 249)) | (1 << (KqlParser.TOTABLE - 249)) | (1 << (KqlParser.WHERE - 249)))) != 0)):
                localctx.Token = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EscapedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.StringLiteral = None # StringLiteralExpressionContext

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_escapedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscapedName" ):
                listener.enterEscapedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscapedName" ):
                listener.exitEscapedName(self)




    def escapedName(self):

        localctx = KqlParser.EscapedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_escapedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2633
            self.match(KqlParser.OPENBRACKET)
            self.state = 2634
            localctx.StringLiteral = self.stringLiteralExpression()
            self.state = 2635
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrKeywordNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # IdentifierNameContext
            self.Keyword = None # KeywordNameContext

        def identifierName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierNameContext,0)


        def keywordName(self):
            return self.getTypedRuleContext(KqlParser.KeywordNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_identifierOrKeywordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrKeywordName" ):
                listener.enterIdentifierOrKeywordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrKeywordName" ):
                listener.exitIdentifierOrKeywordName(self)




    def identifierOrKeywordName(self):

        localctx = KqlParser.IdentifierOrKeywordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_identifierOrKeywordName)
        try:
            self.state = 2639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2637
                localctx.Identifier = self.identifierName()
                pass
            elif token in [KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2638
                localctx.Keyword = self.keywordName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrKeywordOrEscapedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # IdentifierNameContext
            self.Keyword = None # KeywordNameContext
            self.Escaped = None # EscapedNameContext

        def identifierName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierNameContext,0)


        def keywordName(self):
            return self.getTypedRuleContext(KqlParser.KeywordNameContext,0)


        def escapedName(self):
            return self.getTypedRuleContext(KqlParser.EscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_identifierOrKeywordOrEscapedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrKeywordOrEscapedName" ):
                listener.enterIdentifierOrKeywordOrEscapedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrKeywordOrEscapedName" ):
                listener.exitIdentifierOrKeywordOrEscapedName(self)




    def identifierOrKeywordOrEscapedName(self):

        localctx = KqlParser.IdentifierOrKeywordOrEscapedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_identifierOrKeywordOrEscapedName)
        try:
            self.state = 2644
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2641
                localctx.Identifier = self.identifierName()
                pass
            elif token in [KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2642
                localctx.Keyword = self.keywordName()
                pass
            elif token in [KqlParser.OPENBRACKET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2643
                localctx.Escaped = self.escapedName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrExtendedKeywordOrEscapedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # IdentifierNameContext
            self.Keyword = None # KeywordNameContext
            self.ExtendedKeyword = None # ExtendedKeywordNameContext
            self.Escaped = None # EscapedNameContext

        def identifierName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierNameContext,0)


        def keywordName(self):
            return self.getTypedRuleContext(KqlParser.KeywordNameContext,0)


        def extendedKeywordName(self):
            return self.getTypedRuleContext(KqlParser.ExtendedKeywordNameContext,0)


        def escapedName(self):
            return self.getTypedRuleContext(KqlParser.EscapedNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_identifierOrExtendedKeywordOrEscapedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrExtendedKeywordOrEscapedName" ):
                listener.enterIdentifierOrExtendedKeywordOrEscapedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrExtendedKeywordOrEscapedName" ):
                listener.exitIdentifierOrExtendedKeywordOrEscapedName(self)




    def identifierOrExtendedKeywordOrEscapedName(self):

        localctx = KqlParser.IdentifierOrExtendedKeywordOrEscapedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_identifierOrExtendedKeywordOrEscapedName)
        try:
            self.state = 2650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2646
                localctx.Identifier = self.identifierName()
                pass
            elif token in [KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2647
                localctx.Keyword = self.keywordName()
                pass
            elif token in [KqlParser.ACCUMULATE, KqlParser.AS, KqlParser.BY, KqlParser.CONSUME, KqlParser.CONTAINS, KqlParser.COUNT, KqlParser.DATATABLE, KqlParser.DISTINCT, KqlParser.EXTEND, KqlParser.EXTERNALDATA, KqlParser.FILTER, KqlParser.FIND, KqlParser.HAS, KqlParser.IN, KqlParser.INVOKE, KqlParser.LIMIT, KqlParser.MATERIALIZE, KqlParser.OF, KqlParser.PARSE, KqlParser.PRINT, KqlParser.SAMPLE, KqlParser.SAMPLE_DISTINCT, KqlParser.SCAN, KqlParser.SEARCH, KqlParser.SERIALIZE, KqlParser.SET, KqlParser.SORT, KqlParser.SUMMARIZE, KqlParser.TAKE, KqlParser.TITLE, KqlParser.TO, KqlParser.TOP, KqlParser.TOP_HITTERS, KqlParser.TOP_NESTED, KqlParser.TOSCALAR, KqlParser.TOTABLE, KqlParser.WHERE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2648
                localctx.ExtendedKeyword = self.extendedKeywordName()
                pass
            elif token in [KqlParser.OPENBRACKET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2649
                localctx.Escaped = self.escapedName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrExtendedKeywordNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # IdentifierNameContext
            self.Keyword = None # KeywordNameContext
            self.ExtendedKeyword = None # ExtendedKeywordNameContext

        def identifierName(self):
            return self.getTypedRuleContext(KqlParser.IdentifierNameContext,0)


        def keywordName(self):
            return self.getTypedRuleContext(KqlParser.KeywordNameContext,0)


        def extendedKeywordName(self):
            return self.getTypedRuleContext(KqlParser.ExtendedKeywordNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_identifierOrExtendedKeywordName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrExtendedKeywordName" ):
                listener.enterIdentifierOrExtendedKeywordName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrExtendedKeywordName" ):
                listener.exitIdentifierOrExtendedKeywordName(self)




    def identifierOrExtendedKeywordName(self):

        localctx = KqlParser.IdentifierOrExtendedKeywordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_identifierOrExtendedKeywordName)
        try:
            self.state = 2655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2652
                localctx.Identifier = self.identifierName()
                pass
            elif token in [KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2653
                localctx.Keyword = self.keywordName()
                pass
            elif token in [KqlParser.ACCUMULATE, KqlParser.AS, KqlParser.BY, KqlParser.CONSUME, KqlParser.CONTAINS, KqlParser.COUNT, KqlParser.DATATABLE, KqlParser.DISTINCT, KqlParser.EXTEND, KqlParser.EXTERNALDATA, KqlParser.FILTER, KqlParser.FIND, KqlParser.HAS, KqlParser.IN, KqlParser.INVOKE, KqlParser.LIMIT, KqlParser.MATERIALIZE, KqlParser.OF, KqlParser.PARSE, KqlParser.PRINT, KqlParser.SAMPLE, KqlParser.SAMPLE_DISTINCT, KqlParser.SCAN, KqlParser.SEARCH, KqlParser.SERIALIZE, KqlParser.SET, KqlParser.SORT, KqlParser.SUMMARIZE, KqlParser.TAKE, KqlParser.TITLE, KqlParser.TO, KqlParser.TOP, KqlParser.TOP_HITTERS, KqlParser.TOP_NESTED, KqlParser.TOSCALAR, KqlParser.TOTABLE, KqlParser.WHERE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2654
                localctx.ExtendedKeyword = self.extendedKeywordName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Prefix = None # WildcardedNamePrefixContext
            self._wildcardedNameSegment = None # WildcardedNameSegmentContext
            self.Segments = list() # of WildcardedNameSegmentContexts

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def wildcardedNamePrefix(self):
            return self.getTypedRuleContext(KqlParser.WildcardedNamePrefixContext,0)


        def wildcardedNameSegment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.WildcardedNameSegmentContext)
            else:
                return self.getTypedRuleContext(KqlParser.WildcardedNameSegmentContext,i)


        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedName" ):
                listener.enterWildcardedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedName" ):
                listener.exitWildcardedName(self)




    def wildcardedName(self):

        localctx = KqlParser.WildcardedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_wildcardedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.ACCESS) | (1 << KqlParser.ACCUMULATE) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AS) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.BY) | (1 << KqlParser.CLUSTER) | (1 << KqlParser.CONSUME) | (1 << KqlParser.CONTAINS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KqlParser.COUNT - 66)) | (1 << (KqlParser.DATABASE - 66)) | (1 << (KqlParser.DATATABLE - 66)) | (1 << (KqlParser.DECLARE - 66)) | (1 << (KqlParser.DEFAULT - 66)) | (1 << (KqlParser.DELTA - 66)) | (1 << (KqlParser.DISTINCT - 66)) | (1 << (KqlParser.EDGES - 66)) | (1 << (KqlParser.EVALUATE - 66)) | (1 << (KqlParser.EXECUTE - 66)) | (1 << (KqlParser.EXTEND - 66)) | (1 << (KqlParser.EXTERNALDATA - 66)) | (1 << (KqlParser.FACET - 66)) | (1 << (KqlParser.FILTER - 66)) | (1 << (KqlParser.FIND - 66)) | (1 << (KqlParser.FORK - 66)) | (1 << (KqlParser.FROM - 66)) | (1 << (KqlParser.HAS - 66)) | (1 << (KqlParser.HIDDEN_ - 66)) | (1 << (KqlParser.HOT - 66)) | (1 << (KqlParser.HOTDATA - 66)) | (1 << (KqlParser.HOTINDEX - 66)) | (1 << (KqlParser.ID - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KqlParser.IN - 130)) | (1 << (KqlParser.INTO - 130)) | (1 << (KqlParser.INVOKE - 130)) | (1 << (KqlParser.LEGEND - 130)) | (1 << (KqlParser.LET - 130)) | (1 << (KqlParser.LIMIT - 130)) | (1 << (KqlParser.LINEAR - 130)) | (1 << (KqlParser.LIST - 130)) | (1 << (KqlParser.LOOKUP - 130)) | (1 << (KqlParser.LOG - 130)) | (1 << (KqlParser.MAP - 130)) | (1 << (KqlParser.MATERIALIZE - 130)) | (1 << (KqlParser.NODES - 130)) | (1 << (KqlParser.NONE - 130)) | (1 << (KqlParser.NULL - 130)) | (1 << (KqlParser.NULLS - 130)) | (1 << (KqlParser.OF - 130)) | (1 << (KqlParser.ON - 130)) | (1 << (KqlParser.OPTIONAL - 130)) | (1 << (KqlParser.OUTPUT - 130)) | (1 << (KqlParser.PACK - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (KqlParser.PARSE - 194)) | (1 << (KqlParser.PARTITION - 194)) | (1 << (KqlParser.PARTITIONBY - 194)) | (1 << (KqlParser.PATTERN - 194)) | (1 << (KqlParser.PLUGIN - 194)) | (1 << (KqlParser.PRINT - 194)) | (1 << (KqlParser.QUERYPARAMETERS - 194)) | (1 << (KqlParser.RANGE - 194)) | (1 << (KqlParser.REDUCE - 194)) | (1 << (KqlParser.RENDER - 194)) | (1 << (KqlParser.REPLACE - 194)) | (1 << (KqlParser.RESTRICT - 194)) | (1 << (KqlParser.SAMPLE - 194)) | (1 << (KqlParser.SAMPLE_DISTINCT - 194)) | (1 << (KqlParser.SCAN - 194)) | (1 << (KqlParser.SEARCH - 194)) | (1 << (KqlParser.SERIALIZE - 194)) | (1 << (KqlParser.SERIES - 194)) | (1 << (KqlParser.SET - 194)) | (1 << (KqlParser.SORT - 194)) | (1 << (KqlParser.STACKED - 194)) | (1 << (KqlParser.STACKED100 - 194)) | (1 << (KqlParser.STEP - 194)) | (1 << (KqlParser.SUMMARIZE - 194)) | (1 << (KqlParser.TAKE - 194)) | (1 << (KqlParser.THRESHOLD - 194)) | (1 << (KqlParser.TITLE - 194)) | (1 << (KqlParser.TO - 194)) | (1 << (KqlParser.TOP - 194)) | (1 << (KqlParser.TOP_HITTERS - 194)) | (1 << (KqlParser.TOP_NESTED - 194)) | (1 << (KqlParser.TOSCALAR - 194)) | (1 << (KqlParser.TOTABLE - 194)) | (1 << (KqlParser.TYPEOF - 194)) | (1 << (KqlParser.UNSTACKED - 194)) | (1 << (KqlParser.UUID - 194)) | (1 << (KqlParser.VIEW - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (KqlParser.VISIBLE - 258)) | (1 << (KqlParser.WHERE - 258)) | (1 << (KqlParser.WITH - 258)) | (1 << (KqlParser.XAXIS - 258)) | (1 << (KqlParser.XCOLUMN - 258)) | (1 << (KqlParser.XMAX - 258)) | (1 << (KqlParser.XMIN - 258)) | (1 << (KqlParser.XTITLE - 258)) | (1 << (KqlParser.YAXIS - 258)) | (1 << (KqlParser.YCOLUMNS - 258)) | (1 << (KqlParser.YMAX - 258)) | (1 << (KqlParser.YMIN - 258)) | (1 << (KqlParser.YSPLIT - 258)) | (1 << (KqlParser.YTITLE - 258)) | (1 << (KqlParser.BOOL - 258)) | (1 << (KqlParser.GUID - 258)) | (1 << (KqlParser.IDENTIFIER - 258)))) != 0):
                self.state = 2657
                localctx.Prefix = self.wildcardedNamePrefix()


            self.state = 2660
            self.match(KqlParser.ASTERISK)
            self.state = 2664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.ASTERISK) | (1 << KqlParser.ACCESS) | (1 << KqlParser.ACCUMULATE) | (1 << KqlParser.AGGREGATIONS) | (1 << KqlParser.ALIAS) | (1 << KqlParser.ALL) | (1 << KqlParser.AS) | (1 << KqlParser.AXES) | (1 << KqlParser.BASE) | (1 << KqlParser.BIN) | (1 << KqlParser.BY) | (1 << KqlParser.CLUSTER) | (1 << KqlParser.CONSUME) | (1 << KqlParser.CONTAINS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KqlParser.COUNT - 66)) | (1 << (KqlParser.DATABASE - 66)) | (1 << (KqlParser.DATATABLE - 66)) | (1 << (KqlParser.DECLARE - 66)) | (1 << (KqlParser.DEFAULT - 66)) | (1 << (KqlParser.DELTA - 66)) | (1 << (KqlParser.DISTINCT - 66)) | (1 << (KqlParser.EDGES - 66)) | (1 << (KqlParser.EVALUATE - 66)) | (1 << (KqlParser.EXECUTE - 66)) | (1 << (KqlParser.EXTEND - 66)) | (1 << (KqlParser.EXTERNALDATA - 66)) | (1 << (KqlParser.FACET - 66)) | (1 << (KqlParser.FILTER - 66)) | (1 << (KqlParser.FIND - 66)) | (1 << (KqlParser.FORK - 66)) | (1 << (KqlParser.FROM - 66)) | (1 << (KqlParser.HAS - 66)) | (1 << (KqlParser.HIDDEN_ - 66)) | (1 << (KqlParser.HOT - 66)) | (1 << (KqlParser.HOTDATA - 66)) | (1 << (KqlParser.HOTINDEX - 66)) | (1 << (KqlParser.ID - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KqlParser.IN - 130)) | (1 << (KqlParser.INTO - 130)) | (1 << (KqlParser.INVOKE - 130)) | (1 << (KqlParser.LEGEND - 130)) | (1 << (KqlParser.LET - 130)) | (1 << (KqlParser.LIMIT - 130)) | (1 << (KqlParser.LINEAR - 130)) | (1 << (KqlParser.LIST - 130)) | (1 << (KqlParser.LOOKUP - 130)) | (1 << (KqlParser.LOG - 130)) | (1 << (KqlParser.MAP - 130)) | (1 << (KqlParser.MATERIALIZE - 130)) | (1 << (KqlParser.NODES - 130)) | (1 << (KqlParser.NONE - 130)) | (1 << (KqlParser.NULL - 130)) | (1 << (KqlParser.NULLS - 130)) | (1 << (KqlParser.OF - 130)) | (1 << (KqlParser.ON - 130)) | (1 << (KqlParser.OPTIONAL - 130)) | (1 << (KqlParser.OUTPUT - 130)) | (1 << (KqlParser.PACK - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (KqlParser.PARSE - 194)) | (1 << (KqlParser.PARTITION - 194)) | (1 << (KqlParser.PARTITIONBY - 194)) | (1 << (KqlParser.PATTERN - 194)) | (1 << (KqlParser.PLUGIN - 194)) | (1 << (KqlParser.PRINT - 194)) | (1 << (KqlParser.QUERYPARAMETERS - 194)) | (1 << (KqlParser.RANGE - 194)) | (1 << (KqlParser.REDUCE - 194)) | (1 << (KqlParser.RENDER - 194)) | (1 << (KqlParser.REPLACE - 194)) | (1 << (KqlParser.RESTRICT - 194)) | (1 << (KqlParser.SAMPLE - 194)) | (1 << (KqlParser.SAMPLE_DISTINCT - 194)) | (1 << (KqlParser.SCAN - 194)) | (1 << (KqlParser.SEARCH - 194)) | (1 << (KqlParser.SERIALIZE - 194)) | (1 << (KqlParser.SERIES - 194)) | (1 << (KqlParser.SET - 194)) | (1 << (KqlParser.SORT - 194)) | (1 << (KqlParser.STACKED - 194)) | (1 << (KqlParser.STACKED100 - 194)) | (1 << (KqlParser.STEP - 194)) | (1 << (KqlParser.SUMMARIZE - 194)) | (1 << (KqlParser.TAKE - 194)) | (1 << (KqlParser.THRESHOLD - 194)) | (1 << (KqlParser.TITLE - 194)) | (1 << (KqlParser.TO - 194)) | (1 << (KqlParser.TOP - 194)) | (1 << (KqlParser.TOP_HITTERS - 194)) | (1 << (KqlParser.TOP_NESTED - 194)) | (1 << (KqlParser.TOSCALAR - 194)) | (1 << (KqlParser.TOTABLE - 194)) | (1 << (KqlParser.TYPEOF - 194)) | (1 << (KqlParser.UNSTACKED - 194)) | (1 << (KqlParser.UUID - 194)) | (1 << (KqlParser.VIEW - 194)))) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (KqlParser.VISIBLE - 258)) | (1 << (KqlParser.WHERE - 258)) | (1 << (KqlParser.WITH - 258)) | (1 << (KqlParser.XAXIS - 258)) | (1 << (KqlParser.XCOLUMN - 258)) | (1 << (KqlParser.XMAX - 258)) | (1 << (KqlParser.XMIN - 258)) | (1 << (KqlParser.XTITLE - 258)) | (1 << (KqlParser.YAXIS - 258)) | (1 << (KqlParser.YCOLUMNS - 258)) | (1 << (KqlParser.YMAX - 258)) | (1 << (KqlParser.YMIN - 258)) | (1 << (KqlParser.YSPLIT - 258)) | (1 << (KqlParser.YTITLE - 258)) | (1 << (KqlParser.BOOL - 258)) | (1 << (KqlParser.GUID - 258)) | (1 << (KqlParser.LONGLITERAL - 258)) | (1 << (KqlParser.IDENTIFIER - 258)))) != 0):
                self.state = 2661
                localctx._wildcardedNameSegment = self.wildcardedNameSegment()
                localctx.Segments.append(localctx._wildcardedNameSegment)
                self.state = 2666
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedNamePrefixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # Token
            self.Keyword = None # KeywordNameContext
            self.ExtendedKeyword = None # ExtendedKeywordNameContext

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def keywordName(self):
            return self.getTypedRuleContext(KqlParser.KeywordNameContext,0)


        def extendedKeywordName(self):
            return self.getTypedRuleContext(KqlParser.ExtendedKeywordNameContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedNamePrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedNamePrefix" ):
                listener.enterWildcardedNamePrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedNamePrefix" ):
                listener.exitWildcardedNamePrefix(self)




    def wildcardedNamePrefix(self):

        localctx = KqlParser.WildcardedNamePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_wildcardedNamePrefix)
        try:
            self.state = 2670
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2667
                localctx.Identifier = self.match(KqlParser.IDENTIFIER)
                pass
            elif token in [KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2668
                localctx.Keyword = self.keywordName()
                pass
            elif token in [KqlParser.ACCUMULATE, KqlParser.AS, KqlParser.BY, KqlParser.CONSUME, KqlParser.CONTAINS, KqlParser.COUNT, KqlParser.DATATABLE, KqlParser.DISTINCT, KqlParser.EXTEND, KqlParser.EXTERNALDATA, KqlParser.FILTER, KqlParser.FIND, KqlParser.HAS, KqlParser.IN, KqlParser.INVOKE, KqlParser.LIMIT, KqlParser.MATERIALIZE, KqlParser.OF, KqlParser.PARSE, KqlParser.PRINT, KqlParser.SAMPLE, KqlParser.SAMPLE_DISTINCT, KqlParser.SCAN, KqlParser.SEARCH, KqlParser.SERIALIZE, KqlParser.SET, KqlParser.SORT, KqlParser.SUMMARIZE, KqlParser.TAKE, KqlParser.TITLE, KqlParser.TO, KqlParser.TOP, KqlParser.TOP_HITTERS, KqlParser.TOP_NESTED, KqlParser.TOSCALAR, KqlParser.TOTABLE, KqlParser.WHERE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2669
                localctx.ExtendedKeyword = self.extendedKeywordName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardedNameSegmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Identifier = None # Token
            self.Keyword = None # KeywordNameContext
            self.ExtendedKeyword = None # ExtendedKeywordNameContext
            self.Number = None # Token
            self.Star = None # Token

        def IDENTIFIER(self):
            return self.getToken(KqlParser.IDENTIFIER, 0)

        def keywordName(self):
            return self.getTypedRuleContext(KqlParser.KeywordNameContext,0)


        def extendedKeywordName(self):
            return self.getTypedRuleContext(KqlParser.ExtendedKeywordNameContext,0)


        def LONGLITERAL(self):
            return self.getToken(KqlParser.LONGLITERAL, 0)

        def ASTERISK(self):
            return self.getToken(KqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_wildcardedNameSegment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardedNameSegment" ):
                listener.enterWildcardedNameSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardedNameSegment" ):
                listener.exitWildcardedNameSegment(self)




    def wildcardedNameSegment(self):

        localctx = KqlParser.WildcardedNameSegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_wildcardedNameSegment)
        try:
            self.state = 2677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2672
                localctx.Identifier = self.match(KqlParser.IDENTIFIER)
                pass
            elif token in [KqlParser.ACCESS, KqlParser.AGGREGATIONS, KqlParser.ALIAS, KqlParser.ALL, KqlParser.AXES, KqlParser.BASE, KqlParser.BIN, KqlParser.CLUSTER, KqlParser.DATABASE, KqlParser.DECLARE, KqlParser.DEFAULT, KqlParser.DELTA, KqlParser.EDGES, KqlParser.EVALUATE, KqlParser.EXECUTE, KqlParser.FACET, KqlParser.FORK, KqlParser.FROM, KqlParser.HIDDEN_, KqlParser.HOT, KqlParser.HOTDATA, KqlParser.HOTINDEX, KqlParser.ID, KqlParser.INTO, KqlParser.LEGEND, KqlParser.LET, KqlParser.LINEAR, KqlParser.LIST, KqlParser.LOOKUP, KqlParser.LOG, KqlParser.MAP, KqlParser.NODES, KqlParser.NONE, KqlParser.NULL, KqlParser.NULLS, KqlParser.ON, KqlParser.OPTIONAL, KqlParser.OUTPUT, KqlParser.PACK, KqlParser.PARTITION, KqlParser.PARTITIONBY, KqlParser.PATTERN, KqlParser.PLUGIN, KqlParser.QUERYPARAMETERS, KqlParser.RANGE, KqlParser.REDUCE, KqlParser.RENDER, KqlParser.REPLACE, KqlParser.RESTRICT, KqlParser.SERIES, KqlParser.STACKED, KqlParser.STACKED100, KqlParser.STEP, KqlParser.THRESHOLD, KqlParser.TYPEOF, KqlParser.UNSTACKED, KqlParser.UUID, KqlParser.VIEW, KqlParser.VISIBLE, KqlParser.WITH, KqlParser.XAXIS, KqlParser.XCOLUMN, KqlParser.XMAX, KqlParser.XMIN, KqlParser.XTITLE, KqlParser.YAXIS, KqlParser.YCOLUMNS, KqlParser.YMAX, KqlParser.YMIN, KqlParser.YSPLIT, KqlParser.YTITLE, KqlParser.BOOL, KqlParser.GUID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2673
                localctx.Keyword = self.keywordName()
                pass
            elif token in [KqlParser.ACCUMULATE, KqlParser.AS, KqlParser.BY, KqlParser.CONSUME, KqlParser.CONTAINS, KqlParser.COUNT, KqlParser.DATATABLE, KqlParser.DISTINCT, KqlParser.EXTEND, KqlParser.EXTERNALDATA, KqlParser.FILTER, KqlParser.FIND, KqlParser.HAS, KqlParser.IN, KqlParser.INVOKE, KqlParser.LIMIT, KqlParser.MATERIALIZE, KqlParser.OF, KqlParser.PARSE, KqlParser.PRINT, KqlParser.SAMPLE, KqlParser.SAMPLE_DISTINCT, KqlParser.SCAN, KqlParser.SEARCH, KqlParser.SERIALIZE, KqlParser.SET, KqlParser.SORT, KqlParser.SUMMARIZE, KqlParser.TAKE, KqlParser.TITLE, KqlParser.TO, KqlParser.TOP, KqlParser.TOP_HITTERS, KqlParser.TOP_NESTED, KqlParser.TOSCALAR, KqlParser.TOTABLE, KqlParser.WHERE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2674
                localctx.ExtendedKeyword = self.extendedKeywordName()
                pass
            elif token in [KqlParser.LONGLITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2675
                localctx.Number = self.match(KqlParser.LONGLITERAL)
                pass
            elif token in [KqlParser.ASTERISK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2676
                localctx.Star = self.match(KqlParser.ASTERISK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Signed = None # SignedLiteralExpressionContext
            self.Unsigned = None # UnsignedLiteralExpressionContext

        def signedLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.SignedLiteralExpressionContext,0)


        def unsignedLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.UnsignedLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_literalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)




    def literalExpression(self):

        localctx = KqlParser.LiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_literalExpression)
        try:
            self.state = 2681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.DASH, KqlParser.PLUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2679
                localctx.Signed = self.signedLiteralExpression()
                pass
            elif token in [KqlParser.DYNAMIC, KqlParser.LONGLITERAL, KqlParser.INTLITERAL, KqlParser.REALLITERAL, KqlParser.DECIMALLITERAL, KqlParser.STRINGLITERAL, KqlParser.BOOLEANLITERAL, KqlParser.DATETIMELITERAL, KqlParser.TIMESPANLITERAL, KqlParser.TYPELITERAL, KqlParser.GUIDLITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2680
                localctx.Unsigned = self.unsignedLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsignedLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Long = None # LongLiteralExpressionContext
            self.Int = None # IntLiteralExpressionContext
            self.Real = None # RealLiteralExpressionContext
            self.Decimal = None # DecimalLiteralExpressionContext
            self.DateTime = None # DateTimeLiteralExpressionContext
            self.TimeSpan = None # TimeSpanLiteralExpressionContext
            self.Boolean = None # BooleanLiteralExpressionContext
            self.Guid = None # GuidLiteralExpressionContext
            self.Type = None # TypeLiteralExpressionContext
            self.String = None # StringLiteralExpressionContext
            self.Dynamic = None # DynamicLiteralExpressionContext

        def longLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.LongLiteralExpressionContext,0)


        def intLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.IntLiteralExpressionContext,0)


        def realLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.RealLiteralExpressionContext,0)


        def decimalLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DecimalLiteralExpressionContext,0)


        def dateTimeLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DateTimeLiteralExpressionContext,0)


        def timeSpanLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.TimeSpanLiteralExpressionContext,0)


        def booleanLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.BooleanLiteralExpressionContext,0)


        def guidLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.GuidLiteralExpressionContext,0)


        def typeLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.TypeLiteralExpressionContext,0)


        def stringLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.StringLiteralExpressionContext,0)


        def dynamicLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DynamicLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_unsignedLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsignedLiteralExpression" ):
                listener.enterUnsignedLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsignedLiteralExpression" ):
                listener.exitUnsignedLiteralExpression(self)




    def unsignedLiteralExpression(self):

        localctx = KqlParser.UnsignedLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_unsignedLiteralExpression)
        try:
            self.state = 2694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.LONGLITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2683
                localctx.Long = self.longLiteralExpression()
                pass
            elif token in [KqlParser.INTLITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2684
                localctx.Int = self.intLiteralExpression()
                pass
            elif token in [KqlParser.REALLITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2685
                localctx.Real = self.realLiteralExpression()
                pass
            elif token in [KqlParser.DECIMALLITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2686
                localctx.Decimal = self.decimalLiteralExpression()
                pass
            elif token in [KqlParser.DATETIMELITERAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2687
                localctx.DateTime = self.dateTimeLiteralExpression()
                pass
            elif token in [KqlParser.TIMESPANLITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2688
                localctx.TimeSpan = self.timeSpanLiteralExpression()
                pass
            elif token in [KqlParser.BOOLEANLITERAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2689
                localctx.Boolean = self.booleanLiteralExpression()
                pass
            elif token in [KqlParser.GUIDLITERAL]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2690
                localctx.Guid = self.guidLiteralExpression()
                pass
            elif token in [KqlParser.TYPELITERAL]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2691
                localctx.Type = self.typeLiteralExpression()
                pass
            elif token in [KqlParser.STRINGLITERAL]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2692
                localctx.String = self.stringLiteralExpression()
                pass
            elif token in [KqlParser.DYNAMIC]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2693
                localctx.Dynamic = self.dynamicLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLikeLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Long = None # LongLiteralExpressionContext
            self.Int = None # IntLiteralExpressionContext
            self.Real = None # RealLiteralExpressionContext
            self.Decimal = None # DecimalLiteralExpressionContext
            self.Signed = None # SignedLiteralExpressionContext
            self.DateTime = None # DateTimeLiteralExpressionContext
            self.TimeSpan = None # TimeSpanLiteralExpressionContext

        def longLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.LongLiteralExpressionContext,0)


        def intLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.IntLiteralExpressionContext,0)


        def realLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.RealLiteralExpressionContext,0)


        def decimalLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DecimalLiteralExpressionContext,0)


        def signedLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.SignedLiteralExpressionContext,0)


        def dateTimeLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DateTimeLiteralExpressionContext,0)


        def timeSpanLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.TimeSpanLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_numberLikeLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLikeLiteralExpression" ):
                listener.enterNumberLikeLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLikeLiteralExpression" ):
                listener.exitNumberLikeLiteralExpression(self)




    def numberLikeLiteralExpression(self):

        localctx = KqlParser.NumberLikeLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_numberLikeLiteralExpression)
        try:
            self.state = 2703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.LONGLITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2696
                localctx.Long = self.longLiteralExpression()
                pass
            elif token in [KqlParser.INTLITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2697
                localctx.Int = self.intLiteralExpression()
                pass
            elif token in [KqlParser.REALLITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2698
                localctx.Real = self.realLiteralExpression()
                pass
            elif token in [KqlParser.DECIMALLITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2699
                localctx.Decimal = self.decimalLiteralExpression()
                pass
            elif token in [KqlParser.DASH, KqlParser.PLUS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2700
                localctx.Signed = self.signedLiteralExpression()
                pass
            elif token in [KqlParser.DATETIMELITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2701
                localctx.DateTime = self.dateTimeLiteralExpression()
                pass
            elif token in [KqlParser.TIMESPANLITERAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2702
                localctx.TimeSpan = self.timeSpanLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Long = None # LongLiteralExpressionContext
            self.Int = None # IntLiteralExpressionContext
            self.Real = None # RealLiteralExpressionContext
            self.Decimal = None # DecimalLiteralExpressionContext
            self.Signed = None # SignedLiteralExpressionContext

        def longLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.LongLiteralExpressionContext,0)


        def intLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.IntLiteralExpressionContext,0)


        def realLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.RealLiteralExpressionContext,0)


        def decimalLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DecimalLiteralExpressionContext,0)


        def signedLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.SignedLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_numericLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteralExpression" ):
                listener.enterNumericLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteralExpression" ):
                listener.exitNumericLiteralExpression(self)




    def numericLiteralExpression(self):

        localctx = KqlParser.NumericLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_numericLiteralExpression)
        try:
            self.state = 2710
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KqlParser.LONGLITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2705
                localctx.Long = self.longLiteralExpression()
                pass
            elif token in [KqlParser.INTLITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2706
                localctx.Int = self.intLiteralExpression()
                pass
            elif token in [KqlParser.REALLITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2707
                localctx.Real = self.realLiteralExpression()
                pass
            elif token in [KqlParser.DECIMALLITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2708
                localctx.Decimal = self.decimalLiteralExpression()
                pass
            elif token in [KqlParser.DASH, KqlParser.PLUS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2709
                localctx.Signed = self.signedLiteralExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Long = None # SignedLongLiteralExpressionContext
            self.Real = None # SignedRealLiteralExpressionContext

        def signedLongLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.SignedLongLiteralExpressionContext,0)


        def signedRealLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.SignedRealLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_signedLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedLiteralExpression" ):
                listener.enterSignedLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedLiteralExpression" ):
                listener.exitSignedLiteralExpression(self)




    def signedLiteralExpression(self):

        localctx = KqlParser.SignedLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_signedLiteralExpression)
        try:
            self.state = 2714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2712
                localctx.Long = self.signedLongLiteralExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2713
                localctx.Real = self.signedRealLiteralExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LongLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def LONGLITERAL(self):
            return self.getToken(KqlParser.LONGLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_longLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLongLiteralExpression" ):
                listener.enterLongLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLongLiteralExpression" ):
                listener.exitLongLiteralExpression(self)




    def longLiteralExpression(self):

        localctx = KqlParser.LongLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_longLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2716
            localctx.Token = self.match(KqlParser.LONGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def INTLITERAL(self):
            return self.getToken(KqlParser.INTLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_intLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntLiteralExpression" ):
                listener.enterIntLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntLiteralExpression" ):
                listener.exitIntLiteralExpression(self)




    def intLiteralExpression(self):

        localctx = KqlParser.IntLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_intLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2718
            localctx.Token = self.match(KqlParser.INTLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RealLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def REALLITERAL(self):
            return self.getToken(KqlParser.REALLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_realLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealLiteralExpression" ):
                listener.enterRealLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealLiteralExpression" ):
                listener.exitRealLiteralExpression(self)




    def realLiteralExpression(self):

        localctx = KqlParser.RealLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_realLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2720
            localctx.Token = self.match(KqlParser.REALLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def DECIMALLITERAL(self):
            return self.getToken(KqlParser.DECIMALLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_decimalLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteralExpression" ):
                listener.enterDecimalLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteralExpression" ):
                listener.exitDecimalLiteralExpression(self)




    def decimalLiteralExpression(self):

        localctx = KqlParser.DecimalLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_decimalLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2722
            localctx.Token = self.match(KqlParser.DECIMALLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateTimeLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def DATETIMELITERAL(self):
            return self.getToken(KqlParser.DATETIMELITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_dateTimeLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeLiteralExpression" ):
                listener.enterDateTimeLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeLiteralExpression" ):
                listener.exitDateTimeLiteralExpression(self)




    def dateTimeLiteralExpression(self):

        localctx = KqlParser.DateTimeLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_dateTimeLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2724
            localctx.Token = self.match(KqlParser.DATETIMELITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeSpanLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def TIMESPANLITERAL(self):
            return self.getToken(KqlParser.TIMESPANLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_timeSpanLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeSpanLiteralExpression" ):
                listener.enterTimeSpanLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeSpanLiteralExpression" ):
                listener.exitTimeSpanLiteralExpression(self)




    def timeSpanLiteralExpression(self):

        localctx = KqlParser.TimeSpanLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_timeSpanLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2726
            localctx.Token = self.match(KqlParser.TIMESPANLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def BOOLEANLITERAL(self):
            return self.getToken(KqlParser.BOOLEANLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_booleanLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteralExpression" ):
                listener.enterBooleanLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteralExpression" ):
                listener.exitBooleanLiteralExpression(self)




    def booleanLiteralExpression(self):

        localctx = KqlParser.BooleanLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_booleanLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2728
            localctx.Token = self.match(KqlParser.BOOLEANLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuidLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def GUIDLITERAL(self):
            return self.getToken(KqlParser.GUIDLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_guidLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuidLiteralExpression" ):
                listener.enterGuidLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuidLiteralExpression" ):
                listener.exitGuidLiteralExpression(self)




    def guidLiteralExpression(self):

        localctx = KqlParser.GuidLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_guidLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2730
            localctx.Token = self.match(KqlParser.GUIDLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def TYPELITERAL(self):
            return self.getToken(KqlParser.TYPELITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_typeLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeLiteralExpression" ):
                listener.enterTypeLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeLiteralExpression" ):
                listener.exitTypeLiteralExpression(self)




    def typeLiteralExpression(self):

        localctx = KqlParser.TypeLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_typeLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2732
            localctx.Token = self.match(KqlParser.TYPELITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedLongLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SignToken = None # Token
            self.LiteralToken = None # Token

        def LONGLITERAL(self):
            return self.getToken(KqlParser.LONGLITERAL, 0)

        def PLUS(self):
            return self.getToken(KqlParser.PLUS, 0)

        def DASH(self):
            return self.getToken(KqlParser.DASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_signedLongLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedLongLiteralExpression" ):
                listener.enterSignedLongLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedLongLiteralExpression" ):
                listener.exitSignedLongLiteralExpression(self)




    def signedLongLiteralExpression(self):

        localctx = KqlParser.SignedLongLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_signedLongLiteralExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2734
            localctx.SignToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.DASH or _la==KqlParser.PLUS):
                localctx.SignToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2735
            localctx.LiteralToken = self.match(KqlParser.LONGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignedRealLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SignToken = None # Token
            self.LiteralToken = None # Token

        def REALLITERAL(self):
            return self.getToken(KqlParser.REALLITERAL, 0)

        def PLUS(self):
            return self.getToken(KqlParser.PLUS, 0)

        def DASH(self):
            return self.getToken(KqlParser.DASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_signedRealLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedRealLiteralExpression" ):
                listener.enterSignedRealLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedRealLiteralExpression" ):
                listener.exitSignedRealLiteralExpression(self)




    def signedRealLiteralExpression(self):

        localctx = KqlParser.SignedRealLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_signedRealLiteralExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2737
            localctx.SignToken = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==KqlParser.DASH or _la==KqlParser.PLUS):
                localctx.SignToken = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2738
            localctx.LiteralToken = self.match(KqlParser.REALLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STRINGLITERAL = None # Token
            self.Tokens = list() # of Tokens

        def STRINGLITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.STRINGLITERAL)
            else:
                return self.getToken(KqlParser.STRINGLITERAL, i)

        def getRuleIndex(self):
            return KqlParser.RULE_stringLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralExpression" ):
                listener.enterStringLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralExpression" ):
                listener.exitStringLiteralExpression(self)




    def stringLiteralExpression(self):

        localctx = KqlParser.StringLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_stringLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2740
            localctx._STRINGLITERAL = self.match(KqlParser.STRINGLITERAL)
            localctx.Tokens.append(localctx._STRINGLITERAL)
            self.state = 2744
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2741
                    localctx._STRINGLITERAL = self.match(KqlParser.STRINGLITERAL)
                    localctx.Tokens.append(localctx._STRINGLITERAL) 
                self.state = 2746
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicLiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Value = None # JsonValueContext

        def DYNAMIC(self):
            return self.getToken(KqlParser.DYNAMIC, 0)

        def OPENPAREN(self):
            return self.getToken(KqlParser.OPENPAREN, 0)

        def CLOSEPAREN(self):
            return self.getToken(KqlParser.CLOSEPAREN, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(KqlParser.JsonValueContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_dynamicLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicLiteralExpression" ):
                listener.enterDynamicLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicLiteralExpression" ):
                listener.exitDynamicLiteralExpression(self)




    def dynamicLiteralExpression(self):

        localctx = KqlParser.DynamicLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_dynamicLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2747
            self.match(KqlParser.DYNAMIC)
            self.state = 2748
            self.match(KqlParser.OPENPAREN)
            self.state = 2749
            localctx.Value = self.jsonValue()
            self.state = 2750
            self.match(KqlParser.CLOSEPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Array = None # JsonArrayContext
            self.Boolean = None # JsonBooleanContext
            self.DateTime = None # JsonDateTimeContext
            self.Guid = None # JsonGuidContext
            self.Long = None # JsonLongContext
            self.Null = None # JsonNullContext
            self.Object = None # JsonObjectContext
            self.Real = None # JsonRealContext
            self.String = None # JsonStringContext
            self.Timespan = None # JsonTimeSpanContext
            self.Dynamic = None # DynamicLiteralExpressionContext

        def jsonArray(self):
            return self.getTypedRuleContext(KqlParser.JsonArrayContext,0)


        def jsonBoolean(self):
            return self.getTypedRuleContext(KqlParser.JsonBooleanContext,0)


        def jsonDateTime(self):
            return self.getTypedRuleContext(KqlParser.JsonDateTimeContext,0)


        def jsonGuid(self):
            return self.getTypedRuleContext(KqlParser.JsonGuidContext,0)


        def jsonLong(self):
            return self.getTypedRuleContext(KqlParser.JsonLongContext,0)


        def jsonNull(self):
            return self.getTypedRuleContext(KqlParser.JsonNullContext,0)


        def jsonObject(self):
            return self.getTypedRuleContext(KqlParser.JsonObjectContext,0)


        def jsonReal(self):
            return self.getTypedRuleContext(KqlParser.JsonRealContext,0)


        def jsonString(self):
            return self.getTypedRuleContext(KqlParser.JsonStringContext,0)


        def jsonTimeSpan(self):
            return self.getTypedRuleContext(KqlParser.JsonTimeSpanContext,0)


        def dynamicLiteralExpression(self):
            return self.getTypedRuleContext(KqlParser.DynamicLiteralExpressionContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = KqlParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_jsonValue)
        try:
            self.state = 2763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2752
                localctx.Array = self.jsonArray()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2753
                localctx.Boolean = self.jsonBoolean()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2754
                localctx.DateTime = self.jsonDateTime()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2755
                localctx.Guid = self.jsonGuid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2756
                localctx.Long = self.jsonLong()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2757
                localctx.Null = self.jsonNull()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2758
                localctx.Object = self.jsonObject()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2759
                localctx.Real = self.jsonReal()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2760
                localctx.String = self.jsonString()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2761
                localctx.Timespan = self.jsonTimeSpan()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2762
                localctx.Dynamic = self.dynamicLiteralExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._jsonPair = None # JsonPairContext
            self.Pairs = list() # of JsonPairContexts

        def OPENBRACE(self):
            return self.getToken(KqlParser.OPENBRACE, 0)

        def CLOSEBRACE(self):
            return self.getToken(KqlParser.CLOSEBRACE, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(KqlParser.JsonPairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObject" ):
                listener.enterJsonObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObject" ):
                listener.exitJsonObject(self)




    def jsonObject(self):

        localctx = KqlParser.JsonObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_jsonObject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2765
            self.match(KqlParser.OPENBRACE)
            self.state = 2774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.STRINGLITERAL:
                self.state = 2766
                localctx._jsonPair = self.jsonPair()
                localctx.Pairs.append(localctx._jsonPair)
                self.state = 2771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KqlParser.COMMA:
                    self.state = 2767
                    self.match(KqlParser.COMMA)
                    self.state = 2768
                    localctx._jsonPair = self.jsonPair()
                    localctx.Pairs.append(localctx._jsonPair)
                    self.state = 2773
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2776
            self.match(KqlParser.CLOSEBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Name = None # Token
            self.Value = None # JsonValueContext

        def COLON(self):
            return self.getToken(KqlParser.COLON, 0)

        def STRINGLITERAL(self):
            return self.getToken(KqlParser.STRINGLITERAL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(KqlParser.JsonValueContext,0)


        def getRuleIndex(self):
            return KqlParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = KqlParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_jsonPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2778
            localctx.Name = self.match(KqlParser.STRINGLITERAL)
            self.state = 2779
            self.match(KqlParser.COLON)
            self.state = 2780
            localctx.Value = self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrayContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._jsonValue = None # JsonValueContext
            self.Values = list() # of JsonValueContexts

        def OPENBRACKET(self):
            return self.getToken(KqlParser.OPENBRACKET, 0)

        def CLOSEBRACKET(self):
            return self.getToken(KqlParser.CLOSEBRACKET, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KqlParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(KqlParser.JsonValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.COMMA)
            else:
                return self.getToken(KqlParser.COMMA, i)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArray" ):
                listener.enterJsonArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArray" ):
                listener.exitJsonArray(self)




    def jsonArray(self):

        localctx = KqlParser.JsonArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_jsonArray)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2782
            self.match(KqlParser.OPENBRACKET)
            self.state = 2791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KqlParser.DASH) | (1 << KqlParser.OPENBRACE) | (1 << KqlParser.OPENBRACKET))) != 0) or _la==KqlParser.NULL or ((((_la - 285)) & ~0x3f) == 0 and ((1 << (_la - 285)) & ((1 << (KqlParser.DYNAMIC - 285)) | (1 << (KqlParser.LONGLITERAL - 285)) | (1 << (KqlParser.REALLITERAL - 285)) | (1 << (KqlParser.STRINGLITERAL - 285)) | (1 << (KqlParser.BOOLEANLITERAL - 285)) | (1 << (KqlParser.DATETIMELITERAL - 285)) | (1 << (KqlParser.TIMESPANLITERAL - 285)) | (1 << (KqlParser.GUIDLITERAL - 285)))) != 0):
                self.state = 2783
                localctx._jsonValue = self.jsonValue()
                localctx.Values.append(localctx._jsonValue)
                self.state = 2788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KqlParser.COMMA:
                    self.state = 2784
                    self.match(KqlParser.COMMA)
                    self.state = 2785
                    localctx._jsonValue = self.jsonValue()
                    localctx.Values.append(localctx._jsonValue)
                    self.state = 2790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2793
            self.match(KqlParser.CLOSEBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonBooleanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def BOOLEANLITERAL(self):
            return self.getToken(KqlParser.BOOLEANLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonBoolean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonBoolean" ):
                listener.enterJsonBoolean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonBoolean" ):
                listener.exitJsonBoolean(self)




    def jsonBoolean(self):

        localctx = KqlParser.JsonBooleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_jsonBoolean)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2795
            localctx.Token = self.match(KqlParser.BOOLEANLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonDateTimeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def DATETIMELITERAL(self):
            return self.getToken(KqlParser.DATETIMELITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonDateTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonDateTime" ):
                listener.enterJsonDateTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonDateTime" ):
                listener.exitJsonDateTime(self)




    def jsonDateTime(self):

        localctx = KqlParser.JsonDateTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_jsonDateTime)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2797
            localctx.Token = self.match(KqlParser.DATETIMELITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonGuidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def GUIDLITERAL(self):
            return self.getToken(KqlParser.GUIDLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonGuid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonGuid" ):
                listener.enterJsonGuid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonGuid" ):
                listener.exitJsonGuid(self)




    def jsonGuid(self):

        localctx = KqlParser.JsonGuidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_jsonGuid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2799
            localctx.Token = self.match(KqlParser.GUIDLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonNullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def NULL(self):
            return self.getToken(KqlParser.NULL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonNull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonNull" ):
                listener.enterJsonNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonNull" ):
                listener.exitJsonNull(self)




    def jsonNull(self):

        localctx = KqlParser.JsonNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_jsonNull)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801
            localctx.Token = self.match(KqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonStringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STRINGLITERAL = None # Token
            self.Tokens = list() # of Tokens

        def STRINGLITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(KqlParser.STRINGLITERAL)
            else:
                return self.getToken(KqlParser.STRINGLITERAL, i)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonString" ):
                listener.enterJsonString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonString" ):
                listener.exitJsonString(self)




    def jsonString(self):

        localctx = KqlParser.JsonStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_jsonString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2803
            localctx._STRINGLITERAL = self.match(KqlParser.STRINGLITERAL)
            localctx.Tokens.append(localctx._STRINGLITERAL)
            self.state = 2807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KqlParser.STRINGLITERAL:
                self.state = 2804
                localctx._STRINGLITERAL = self.match(KqlParser.STRINGLITERAL)
                localctx.Tokens.append(localctx._STRINGLITERAL)
                self.state = 2809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonTimeSpanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Token = None # Token

        def TIMESPANLITERAL(self):
            return self.getToken(KqlParser.TIMESPANLITERAL, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonTimeSpan

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonTimeSpan" ):
                listener.enterJsonTimeSpan(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonTimeSpan" ):
                listener.exitJsonTimeSpan(self)




    def jsonTimeSpan(self):

        localctx = KqlParser.JsonTimeSpanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_jsonTimeSpan)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2810
            localctx.Token = self.match(KqlParser.TIMESPANLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonLongContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SignToken = None # Token
            self.LiteralToken = None # Token

        def LONGLITERAL(self):
            return self.getToken(KqlParser.LONGLITERAL, 0)

        def DASH(self):
            return self.getToken(KqlParser.DASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonLong

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonLong" ):
                listener.enterJsonLong(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonLong" ):
                listener.exitJsonLong(self)




    def jsonLong(self):

        localctx = KqlParser.JsonLongContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_jsonLong)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.DASH:
                self.state = 2812
                localctx.SignToken = self.match(KqlParser.DASH)


            self.state = 2815
            localctx.LiteralToken = self.match(KqlParser.LONGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonRealContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SignToken = None # Token
            self.LiteralToken = None # Token

        def REALLITERAL(self):
            return self.getToken(KqlParser.REALLITERAL, 0)

        def DASH(self):
            return self.getToken(KqlParser.DASH, 0)

        def getRuleIndex(self):
            return KqlParser.RULE_jsonReal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonReal" ):
                listener.enterJsonReal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonReal" ):
                listener.exitJsonReal(self)




    def jsonReal(self):

        localctx = KqlParser.JsonRealContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_jsonReal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KqlParser.DASH:
                self.state = 2817
                localctx.SignToken = self.match(KqlParser.DASH)


            self.state = 2820
            localctx.LiteralToken = self.match(KqlParser.REALLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





